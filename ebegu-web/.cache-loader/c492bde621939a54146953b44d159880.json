{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/authentication/authenticaton.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/authentication/authenticaton.ts","mtime":1512484411995},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar template = require('./authentication.html');\nrequire('./authentication.less');\nvar AuthenticationComponentConfig = /** @class */ (function () {\n    function AuthenticationComponentConfig() {\n        this.transclude = false;\n        this.template = template;\n        this.controller = AuthenticationListViewController;\n        this.controllerAs = 'vm';\n    }\n    return AuthenticationComponentConfig;\n}());\nexports.AuthenticationComponentConfig = AuthenticationComponentConfig;\nvar AuthenticationListViewController = /** @class */ (function () {\n    function AuthenticationListViewController($state, $stateParams, $window, $httpParamSerializer, $timeout, authService, $location) {\n        var _this = this;\n        this.$state = $state;\n        this.$stateParams = $stateParams;\n        this.$window = $window;\n        this.$httpParamSerializer = $httpParamSerializer;\n        this.$timeout = $timeout;\n        this.authService = authService;\n        this.$location = $location;\n        this.redirectionUrl = '/ebegu/saml2/jsp/fedletSSOInit.jsp';\n        this.countdown = 0;\n        this.redirect = function () {\n            var urlToGoTo = _this.redirectionHref;\n            console.log('redirecting to login', urlToGoTo);\n            _this.$window.open(urlToGoTo, '_self');\n        };\n        this.doCountdown = function () {\n            if (_this.countdown > 0) {\n                _this.countdown--;\n                _this.$timeout(_this.doCountdown, 1000);\n            }\n        };\n        //wir leiten hier mal direkt weiter, theoretisch koennte man auch eine auswahl praesentieren\n        this.relayString = angular.copy(this.$stateParams.relayPath ? (this.$stateParams.relayPath) : '');\n        this.authService.initSSOLogin(this.relayString).then(function (response) {\n            _this.redirectionUrl = response;\n            _this.redirectionHref = response;\n            if (_this.$stateParams.type !== undefined && _this.$stateParams.type === 'logout') {\n                _this.doLogout();\n            }\n            else {\n                _this.redirecting = true;\n                if (_this.countdown > 0) {\n                    _this.$timeout(_this.doCountdown, 1000);\n                }\n                _this.$timeout(_this.redirect, _this.countdown * 1000);\n            }\n        });\n        if (this.authService.getPrincipal()) {\n            this.authService.initSingleLogout(this.getBaseURL())\n                .then(function (responseLogut) {\n                _this.logoutHref = responseLogut;\n            });\n        }\n    }\n    AuthenticationListViewController.prototype.getBaseURL = function () {\n        //let port = (this.$location.port() === 80 || this.$location.port() === 443) ? '' : ':' + this.$location.port();\n        var absURL = this.$location.absUrl();\n        var index = absURL.indexOf(this.$location.url());\n        var result = absURL;\n        if (index !== -1) {\n            result = absURL.substr(0, index);\n            var hashindex = result.indexOf('#');\n            if (hashindex !== -1) {\n                result = absURL.substr(0, hashindex);\n            }\n        }\n        return result;\n    };\n    AuthenticationListViewController.prototype.singlelogout = function () {\n        var _this = this;\n        this.authService.logoutRequest().then(function () {\n            if (_this.logoutHref !== '' || _this.logoutHref === undefined) {\n                _this.$window.open(_this.logoutHref, '_self');\n            }\n            else {\n                _this.$state.go('start'); // wenn wir nicht in iam ausloggen gehen wir auf start\n            }\n        });\n    };\n    AuthenticationListViewController.prototype.isLoggedId = function () {\n        console.log('logged in principal', this.authService.getPrincipal());\n        return this.authService.getPrincipal() ? true : false;\n    };\n    /**\n     * triggered einen logout, fuer iam user sowohl in iam als auch in ebegu,\n     * bei lokalen benutzern wird auch nur bei uns ausgeloggt\n     */\n    AuthenticationListViewController.prototype.doLogout = function () {\n        var _this = this;\n        if (this.authService.getPrincipal()) {\n            this.authService.initSingleLogout(this.getBaseURL()).then(function (responseLogut) {\n                _this.logoutHref = responseLogut;\n                _this.singlelogout();\n            });\n        }\n    };\n    AuthenticationListViewController.$inject = ['$state', '$stateParams', '$window', '$httpParamSerializer', '$timeout', 'AuthServiceRS',\n        '$location'];\n    return AuthenticationListViewController;\n}());\nexports.AuthenticationListViewController = AuthenticationListViewController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/authentication/authenticaton.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/authentication/authenticaton.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions} from 'angular';\nimport {IStateService} from 'angular-ui-router';\nimport AuthServiceRS from './service/AuthServiceRS.rest';\nimport {IAuthenticationStateParams} from './authentication.route';\nimport IWindowService = angular.IWindowService;\nimport IHttpParamSerializer = angular.IHttpParamSerializer;\nimport ITimeoutService = angular.ITimeoutService;\nimport ILocationService = angular.ILocationService;\n\nlet template = require('./authentication.html');\nrequire('./authentication.less');\n\nexport class AuthenticationComponentConfig implements IComponentOptions {\n    transclude = false;\n    template = template;\n    controller = AuthenticationListViewController;\n    controllerAs = 'vm';\n}\n\nexport class AuthenticationListViewController {\n\n    static $inject: string[] = ['$state', '$stateParams', '$window', '$httpParamSerializer', '$timeout', 'AuthServiceRS'\n        , '$location'];\n\n    private redirectionUrl: string = '/ebegu/saml2/jsp/fedletSSOInit.jsp';\n    private relayString: string;\n    private redirectionHref: string;\n\n    private logoutHref: string;\n    private redirecting: boolean;\n    private countdown: number = 0;\n\n    constructor(private $state: IStateService, private $stateParams: IAuthenticationStateParams,\n                private $window: IWindowService, private $httpParamSerializer: IHttpParamSerializer,\n                private $timeout: ITimeoutService, private authService: AuthServiceRS, private $location: ILocationService) {\n        //wir leiten hier mal direkt weiter, theoretisch koennte man auch eine auswahl praesentieren\n        this.relayString = angular.copy(this.$stateParams.relayPath ? (this.$stateParams.relayPath) : '');\n        this.authService.initSSOLogin(this.relayString).then((response) => {\n            this.redirectionUrl = response;\n            this.redirectionHref = response;\n            if (this.$stateParams.type !== undefined && this.$stateParams.type === 'logout') {\n                this.doLogout();\n            } else {\n                this.redirecting = true;\n                if (this.countdown > 0) {\n                    this.$timeout(this.doCountdown, 1000);\n                }\n                this.$timeout(this.redirect, this.countdown * 1000);\n            }\n        });\n\n        if (this.authService.getPrincipal()) {  // wenn logged in\n            this.authService.initSingleLogout(this.getBaseURL())\n                .then((responseLogut) => {\n                    this.logoutHref = responseLogut;\n                });\n        }\n    }\n\n    public getBaseURL(): string {\n        //let port = (this.$location.port() === 80 || this.$location.port() === 443) ? '' : ':' + this.$location.port();\n        let absURL = this.$location.absUrl();\n        let index = absURL.indexOf(this.$location.url());\n        let result = absURL;\n        if (index !== -1) {\n            result = absURL.substr(0, index);\n            let hashindex = result.indexOf('#');\n            if (hashindex !== -1) {\n                result = absURL.substr(0, hashindex);\n            }\n\n        }\n        return result;\n    }\n\n    public singlelogout() {\n        this.authService.logoutRequest().then(() => {\n            if (this.logoutHref !== '' || this.logoutHref === undefined) {\n                this.$window.open(this.logoutHref, '_self');\n            } else {\n                this.$state.go('start');  // wenn wir nicht in iam ausloggen gehen wir auf start\n            }\n        });\n    }\n\n    public isLoggedId(): boolean {\n        console.log('logged in principal', this.authService.getPrincipal());\n        return this.authService.getPrincipal() ? true : false;\n    }\n\n    public redirect = () => {\n        let urlToGoTo = this.redirectionHref;\n        console.log('redirecting to login', urlToGoTo);\n\n        this.$window.open(urlToGoTo, '_self');\n    }\n\n    /**\n     * triggered einen logout, fuer iam user sowohl in iam als auch in ebegu,\n     * bei lokalen benutzern wird auch nur bei uns ausgeloggt\n     */\n    private doLogout() {\n        if (this.authService.getPrincipal()) {  // wenn logged in\n            this.authService.initSingleLogout(this.getBaseURL()).then((responseLogut) => {\n                this.logoutHref = responseLogut;\n                this.singlelogout();\n            });\n        }\n\n    }\n\n    private doCountdown = () => {\n        if (this.countdown > 0) {\n            this.countdown--;\n            this.$timeout(this.doCountdown, 1000);\n        }\n\n    }\n}\n"]}]}
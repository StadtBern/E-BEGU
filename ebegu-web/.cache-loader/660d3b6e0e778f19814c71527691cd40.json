{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-quicksearch/dv-st-persist-quicksearch.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-quicksearch/dv-st-persist-quicksearch.ts","mtime":1518003987680},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This directive allows a filter and sorting configuration to be saved after leaving the table.\n * The information will be stored in an angular-service, whi\n */\nvar DVSTPersistQuicksearch = /** @class */ (function () {\n    /* @ngInject */\n    function DVSTPersistQuicksearch(userRS, institutionRS, dVsTPersistService) {\n        var _this = this;\n        this.userRS = userRS;\n        this.institutionRS = institutionRS;\n        this.dVsTPersistService = dVsTPersistService;\n        this.restrict = 'A';\n        this.require = ['^stTable', '^dvQuicksearchList'];\n        this.link = function (scope, element, attrs, ctrlArray) {\n            var nameSpace = attrs.dvStPersistQuicksearch;\n            var stTableCtrl = ctrlArray[0];\n            var quicksearchListController = ctrlArray[1];\n            //save the table state every time it changes\n            scope.$watch(function () {\n                return stTableCtrl.tableState();\n            }, function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    // sessionStorage.setItem(nameSpace, JSON.stringify(newValue));\n                    dVsTPersistService.saveData(nameSpace, newValue);\n                }\n            }, true);\n            // if (sessionStorage.getItem(nameSpace)) {\n            // let savedState = JSON.parse(sessionStorage.getItem(nameSpace));\n            //fetch the table state when the directive is loaded\n            var savedState = dVsTPersistService.loadData(nameSpace);\n            if (savedState) {\n                if (savedState.search && savedState.search.predicateObject) {\n                    quicksearchListController.selectedAntragTyp = savedState.search.predicateObject.antragTyp;\n                    quicksearchListController.selectedGesuchsperiode = savedState.search.predicateObject.gesuchsperiodeString;\n                    quicksearchListController.selectedAntragStatus = savedState.search.predicateObject.status;\n                    quicksearchListController.selectedBetreuungsangebotTyp = savedState.search.predicateObject.angebote;\n                    _this.setInstitutionFromName(quicksearchListController, savedState.search.predicateObject.institutionen);\n                    quicksearchListController.selectedFallNummer = savedState.search.predicateObject.fallNummer;\n                    quicksearchListController.selectedFamilienName = savedState.search.predicateObject.familienName;\n                    quicksearchListController.selectedKinder = savedState.search.predicateObject.kinder;\n                    quicksearchListController.selectedEingangsdatum = savedState.search.predicateObject.eingangsdatum;\n                    quicksearchListController.selectedDokumenteHochgeladen = savedState.search.predicateObject.dokumenteHochgeladen;\n                    _this.setVerantwortlicherFromName(quicksearchListController, savedState.search.predicateObject.verantwortlicher);\n                    _this.setVerantwortlicherSCHFromName(quicksearchListController, savedState.search.predicateObject.verantwortlicherSCH);\n                }\n                var tableState = stTableCtrl.tableState();\n                angular.extend(tableState, savedState);\n                stTableCtrl.pipe();\n            }\n        };\n    }\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    DVSTPersistQuicksearch.prototype.setVerantwortlicherFromName = function (quicksearchListController, verantwortlicherFullname) {\n        if (verantwortlicherFullname && quicksearchListController) {\n            this.userRS.getBenutzerJAorAdmin().then(function (response) {\n                var userList = angular.copy(response);\n                if (userList) {\n                    for (var i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherFullname) {\n                            quicksearchListController.selectedVerantwortlicher = userList[i];\n                            quicksearchListController.userChanged(quicksearchListController.selectedVerantwortlicher);\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    DVSTPersistQuicksearch.prototype.setVerantwortlicherSCHFromName = function (quicksearchListController, verantwortlicherSCHFullname) {\n        if (verantwortlicherSCHFullname && quicksearchListController) {\n            this.userRS.getBenutzerSCHorAdminSCH().then(function (response) {\n                var userList = angular.copy(response);\n                if (userList) {\n                    for (var i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherSCHFullname) {\n                            quicksearchListController.selectedVerantwortlicherSCH = userList[i];\n                            quicksearchListController.userChanged(quicksearchListController.selectedVerantwortlicherSCH);\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Extracts the Institution from the institutionList of the controller using the name that had been saved in the\n     * filter. This is needed because the filter saves the name and not the object.\n     */\n    DVSTPersistQuicksearch.prototype.setInstitutionFromName = function (quicksearchListController, institution) {\n        if (institution && quicksearchListController) {\n            this.institutionRS.getInstitutionenForCurrentBenutzer().then(function (institutionList) {\n                if (institutionList) {\n                    for (var i = 0; i < institutionList.length; i++) {\n                        if (institutionList[i].name === institution) {\n                            quicksearchListController.selectedInstitution = institutionList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    DVSTPersistQuicksearch.factory = function () {\n        var directive = function (userRS, institutionRS, dVsTPersistService) { return new DVSTPersistQuicksearch(userRS, institutionRS, dVsTPersistService); };\n        directive.$inject = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n        return directive;\n    };\n    DVSTPersistQuicksearch.$inject = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n    return DVSTPersistQuicksearch;\n}());\nexports.default = DVSTPersistQuicksearch;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-quicksearch/dv-st-persist-quicksearch.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-quicksearch/dv-st-persist-quicksearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IAttributes, IAugmentedJQuery, IDirective, IDirectiveFactory, IDirectiveLinkFn, IScope} from 'angular';\nimport TSUser from '../../../models/TSUser';\nimport UserRS from '../../service/userRS.rest';\nimport {InstitutionRS} from '../../service/institutionRS.rest';\nimport {DVsTPersistService} from '../../service/dVsTPersistService';\nimport {DVQuicksearchListController} from '../../../quicksearch/component/dv-quicksearch-list/dv-quicksearch-list';\n\n/**\n * This directive allows a filter and sorting configuration to be saved after leaving the table.\n * The information will be stored in an angular-service, whi\n */\nexport default class DVSTPersistQuicksearch implements IDirective {\n    static $inject: string[] = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n\n    restrict = 'A';\n    require = ['^stTable', '^dvQuicksearchList'];\n    link: IDirectiveLinkFn;\n\n    /* @ngInject */\n    constructor(private userRS: UserRS, private institutionRS: InstitutionRS, private dVsTPersistService: DVsTPersistService) {\n        this.link = (scope: IScope, element: IAugmentedJQuery, attrs: IAttributes, ctrlArray: any) => {\n            let nameSpace: string = attrs.dvStPersistQuicksearch;\n            let stTableCtrl: any = ctrlArray[0];\n            let quicksearchListController: DVQuicksearchListController = ctrlArray[1];\n\n            //save the table state every time it changes\n            scope.$watch(function () {\n                return stTableCtrl.tableState();\n            }, function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    // sessionStorage.setItem(nameSpace, JSON.stringify(newValue));\n                    dVsTPersistService.saveData(nameSpace, newValue);\n                }\n            }, true);\n\n            // if (sessionStorage.getItem(nameSpace)) {\n            // let savedState = JSON.parse(sessionStorage.getItem(nameSpace));\n\n            //fetch the table state when the directive is loaded\n            let savedState = dVsTPersistService.loadData(nameSpace);\n            if (savedState) {\n                if (savedState.search && savedState.search.predicateObject) { //update all objects of the model for the filters\n                    quicksearchListController.selectedAntragTyp = savedState.search.predicateObject.antragTyp;\n                    quicksearchListController.selectedGesuchsperiode = savedState.search.predicateObject.gesuchsperiodeString;\n                    quicksearchListController.selectedAntragStatus = savedState.search.predicateObject.status;\n                    quicksearchListController.selectedBetreuungsangebotTyp = savedState.search.predicateObject.angebote;\n                    this.setInstitutionFromName(quicksearchListController, savedState.search.predicateObject.institutionen);\n                    quicksearchListController.selectedFallNummer = savedState.search.predicateObject.fallNummer;\n                    quicksearchListController.selectedFamilienName = savedState.search.predicateObject.familienName;\n                    quicksearchListController.selectedKinder = savedState.search.predicateObject.kinder;\n                    quicksearchListController.selectedEingangsdatum = savedState.search.predicateObject.eingangsdatum;\n                    quicksearchListController.selectedDokumenteHochgeladen = savedState.search.predicateObject.dokumenteHochgeladen;\n                    this.setVerantwortlicherFromName(quicksearchListController, savedState.search.predicateObject.verantwortlicher);\n                    this.setVerantwortlicherSCHFromName(quicksearchListController, savedState.search.predicateObject.verantwortlicherSCH);\n                }\n                let tableState = stTableCtrl.tableState();\n\n                angular.extend(tableState, savedState);\n                stTableCtrl.pipe();\n\n            }\n        };\n    }\n\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    private setVerantwortlicherFromName(quicksearchListController: DVQuicksearchListController, verantwortlicherFullname: string): void {\n        if (verantwortlicherFullname && quicksearchListController) {\n            this.userRS.getBenutzerJAorAdmin().then((response: any) => {\n                let userList: TSUser[] = angular.copy(response);\n                if (userList) {\n                    for (let i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherFullname) {\n                            quicksearchListController.selectedVerantwortlicher = userList[i];\n                            quicksearchListController.userChanged(quicksearchListController.selectedVerantwortlicher);\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    private setVerantwortlicherSCHFromName(quicksearchListController: DVQuicksearchListController, verantwortlicherSCHFullname: string): void {\n        if (verantwortlicherSCHFullname && quicksearchListController) {\n            this.userRS.getBenutzerSCHorAdminSCH().then((response: any) => {\n                let userList: TSUser[] = angular.copy(response);\n                if (userList) {\n                    for (let i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherSCHFullname) {\n                            quicksearchListController.selectedVerantwortlicherSCH = userList[i];\n                            quicksearchListController.userChanged(quicksearchListController.selectedVerantwortlicherSCH);\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Extracts the Institution from the institutionList of the controller using the name that had been saved in the\n     * filter. This is needed because the filter saves the name and not the object.\n     */\n    private setInstitutionFromName(quicksearchListController: DVQuicksearchListController, institution: string): void {\n        if (institution && quicksearchListController) {\n            this.institutionRS.getInstitutionenForCurrentBenutzer().then((institutionList: any) => {\n                if (institutionList) {\n                    for (let i = 0; i < institutionList.length; i++) {\n                        if (institutionList[i].name === institution) {\n                            quicksearchListController.selectedInstitution = institutionList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    static factory(): IDirectiveFactory {\n        const directive = (userRS: any, institutionRS: any, dVsTPersistService: any) => new DVSTPersistQuicksearch(userRS, institutionRS, dVsTPersistService);\n        directive.$inject = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n        return directive;\n    }\n}\n\n"]}]}
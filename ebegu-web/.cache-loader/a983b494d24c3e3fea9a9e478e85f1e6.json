{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/betreuungView/betreuungView.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/betreuungView/betreuungView.ts","mtime":1518535855224},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\ndefine([\"require\", \"exports\", \"../abstractGesuchView\", \"../../../models/enums/TSBetreuungsangebotTyp\", \"../../../models/TSBetreuungspensumContainer\", \"../../../models/TSBetreuung\", \"../../../models/TSBetreuungspensum\", \"../../../models/types/TSDateRange\", \"../../../models/enums/TSBetreuungsstatus\", \"../../../utils/DateUtil\", \"../../../models/enums/TSWizardStepName\", \"../../../utils/TSRoleUtil\", \"../../dialog/RemoveDialogController\", \"../../../models/enums/TSAntragStatus\", \"../../../models/enums/TSGesuchsperiodeStatus\"], function (require, exports, abstractGesuchView_1, TSBetreuungsangebotTyp_1, TSBetreuungspensumContainer_1, TSBetreuung_1, TSBetreuungspensum_1, TSDateRange_1, TSBetreuungsstatus_1, DateUtil_1, TSWizardStepName_1, TSRoleUtil_1, RemoveDialogController_1, TSAntragStatus_1, TSGesuchsperiodeStatus_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var template = require('./betreuungView.html');\n    require('./betreuungView.less');\n    var removeDialogTemplate = require('../../dialog/removeDialogTemplate.html');\n    var BetreuungViewComponentConfig = /** @class */ (function () {\n        function BetreuungViewComponentConfig() {\n            this.transclude = false;\n            this.template = template;\n            this.controller = BetreuungViewController;\n            this.controllerAs = 'vm';\n        }\n        return BetreuungViewComponentConfig;\n    }());\n    exports.BetreuungViewComponentConfig = BetreuungViewComponentConfig;\n    var BetreuungViewController = /** @class */ (function (_super) {\n        __extends(BetreuungViewController, _super);\n        /* @ngInject */\n        function BetreuungViewController($state, gesuchModelManager, ebeguUtil, CONSTANTS, $scope, berechnungsManager, errorService, authServiceRS, wizardStepManager, $stateParams, mitteilungRS, dvDialog, $log, $timeout) {\n            var _this = _super.call(this, gesuchModelManager, berechnungsManager, wizardStepManager, $scope, TSWizardStepName_1.TSWizardStepName.BETREUUNG, $timeout) || this;\n            _this.$state = $state;\n            _this.ebeguUtil = ebeguUtil;\n            _this.CONSTANTS = CONSTANTS;\n            _this.errorService = errorService;\n            _this.authServiceRS = authServiceRS;\n            _this.$stateParams = $stateParams;\n            _this.mitteilungRS = mitteilungRS;\n            _this.dvDialog = dvDialog;\n            _this.$log = $log;\n            return _this;\n        }\n        BetreuungViewController.prototype.$onInit = function () {\n            var _this = this;\n            this.mutationsmeldungModel = undefined;\n            this.isMutationsmeldungStatus = false;\n            var kindIndex = this.gesuchModelManager.convertKindNumberToKindIndex(parseInt(this.$stateParams.kindNumber, 10));\n            if (kindIndex >= 0) {\n                this.gesuchModelManager.setKindIndex(kindIndex);\n                if (this.$stateParams.betreuungNumber) {\n                    this.betreuungIndex = this.gesuchModelManager.convertBetreuungNumberToBetreuungIndex(parseInt(this.$stateParams.betreuungNumber));\n                    this.model = angular.copy(this.gesuchModelManager.getKindToWorkWith().betreuungen[this.betreuungIndex]);\n                    this.initialBetreuung = angular.copy(this.gesuchModelManager.getKindToWorkWith().betreuungen[this.betreuungIndex]);\n                    this.gesuchModelManager.setBetreuungIndex(this.betreuungIndex);\n                }\n                else {\n                    //wenn betreuung-nummer nicht definiert ist heisst dass, das wir ein neues erstellen sollten\n                    this.model = this.initEmptyBetreuung();\n                    this.initialBetreuung = angular.copy(this.model);\n                    this.betreuungIndex = this.gesuchModelManager.getKindToWorkWith().betreuungen ? this.gesuchModelManager.getKindToWorkWith().betreuungen.length : 0;\n                    this.gesuchModelManager.setBetreuungIndex(this.betreuungIndex);\n                }\n                this.setBetreuungsangebotTypValues();\n                this.betreuungsangebot = undefined;\n                this.initViewModel();\n                // just to read!\n                this.kindModel = this.gesuchModelManager.getKindToWorkWith();\n            }\n            else {\n                this.$log.error('There is no kind available with kind-number:' + this.$stateParams.kindNumber);\n            }\n            this.gesuchModelManager.isNeuestesGesuch().then(function (response) {\n                _this.isNewestGesuch = response;\n            });\n            this.findExistingBetreuungsmitteilung();\n        };\n        /**\n         * Creates a Betreuung for the kind given by the kindNumber attribute of the class.\n         * Thus the kindnumber must be set before this method is called.\n         */\n        BetreuungViewController.prototype.initEmptyBetreuung = function () {\n            var tsBetreuung = new TSBetreuung_1.default();\n            tsBetreuung.betreuungsstatus = TSBetreuungsstatus_1.TSBetreuungsstatus.AUSSTEHEND;\n            return tsBetreuung;\n        };\n        BetreuungViewController.prototype.initViewModel = function () {\n            this.isSavingData = false;\n            this.flagErrorVertrag = false;\n            if (this.getInstitutionSD()) {\n                this.instStammId = this.getInstitutionSD().id;\n                this.betreuungsangebot = this.getBetreuungsangebotFromInstitutionList();\n            }\n            this.startEmptyListOfBetreuungspensen();\n            //institutionen lazy laden\n            if (!this.gesuchModelManager.getActiveInstitutionenList() || this.gesuchModelManager.getActiveInstitutionenList().length <= 0) {\n                this.gesuchModelManager.updateActiveInstitutionenList();\n            }\n        };\n        /**\n         * Fuer Institutionen und Traegerschaften wird es geprueft ob es schon ein Betreuungspensum existiert,\n         * wenn nicht wir die Liste dann mit einem leeren initiallisiert\n         */\n        BetreuungViewController.prototype.startEmptyListOfBetreuungspensen = function () {\n            if ((!this.getBetreuungspensen() || this.getBetreuungspensen().length === 0)\n                && (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles()))) {\n                // nur fuer Institutionen wird ein Betreuungspensum by default erstellt\n                this.createBetreuungspensum();\n            }\n        };\n        BetreuungViewController.prototype.getGesuchsperiodeBegin = function () {\n            return this.gesuchModelManager.getGesuchsperiodeBegin();\n        };\n        BetreuungViewController.prototype.getBetreuungsangebotFromInstitutionList = function () {\n            var _this = this;\n            return $.grep(this.betreuungsangebotValues, function (value) {\n                return value.key === _this.getInstitutionSD().betreuungsangebotTyp;\n            })[0];\n        };\n        BetreuungViewController.prototype.getKindModel = function () {\n            return this.kindModel;\n        };\n        BetreuungViewController.prototype.getBetreuungModel = function () {\n            if (this.isMutationsmeldungStatus && this.mutationsmeldungModel) {\n                return this.mutationsmeldungModel;\n            }\n            return this.model;\n        };\n        BetreuungViewController.prototype.changedAngebot = function () {\n            if (this.getBetreuungModel()) {\n                if (this.isTagesschule()) {\n                    this.getBetreuungModel().betreuungsstatus = TSBetreuungsstatus_1.TSBetreuungsstatus.SCHULAMT;\n                    // Fuer Tagesschule setzen wir eine Dummy-Tagesschule als Institution\n                    this.instStammId = this.CONSTANTS.INSTITUTIONSSTAMMDATENID_DUMMY_TAGESSCHULE;\n                    this.setSelectedInstitutionStammdaten();\n                }\n                else {\n                    this.getBetreuungModel().betreuungsstatus = TSBetreuungsstatus_1.TSBetreuungsstatus.AUSSTEHEND;\n                }\n            }\n        };\n        BetreuungViewController.prototype.save = function (newStatus, nextStep, params) {\n            var _this = this;\n            this.isSavingData = true;\n            this.gesuchModelManager.setBetreuungToWorkWith(this.model); //setze model\n            var oldStatus = this.model.betreuungsstatus;\n            if (this.getBetreuungModel()) {\n                if (this.isTagesschule()) {\n                    this.getBetreuungModel().betreuungspensumContainers = []; // fuer Tagesschule werden keine Betreuungspensum benoetigt, deswegen löschen wir sie vor dem Speichern\n                }\n            }\n            this.errorService.clearAll();\n            this.model.betreuungsstatus = newStatus;\n            this.gesuchModelManager.saveBetreuung(this.model, false).then(function (betreuungResponse) {\n                _this.isSavingData = false;\n                _this.form.$setPristine();\n                _this.$state.go(nextStep, params);\n            }).catch(function (exception) {\n                // starting over\n                _this.$log.error('there was an error saving the betreuung ', _this.model);\n                _this.isSavingData = false;\n                _this.model.betreuungsstatus = oldStatus;\n                _this.startEmptyListOfBetreuungspensen();\n                _this.form.$setUntouched();\n                _this.form.$setPristine();\n                return undefined;\n            });\n        };\n        BetreuungViewController.prototype.setBetreuungsangebotTypValues = function () {\n            this.betreuungsangebotValues = this.ebeguUtil.translateStringList(TSBetreuungsangebotTyp_1.getTSBetreuungsangebotTypValues());\n        };\n        BetreuungViewController.prototype.cancel = function () {\n            this.reset();\n            this.form.$setPristine();\n            this.$state.go('gesuch.betreuungen', { gesuchId: this.getGesuchId() });\n        };\n        BetreuungViewController.prototype.reset = function () {\n            this.removeBetreuungFromKind(); //wenn model existiert und nicht neu ist wegnehmen, sonst resetten\n        };\n        BetreuungViewController.prototype.removeBetreuungFromKind = function () {\n            if (this.model && !this.model.timestampErstellt) {\n                //wenn die Betreeung noch nicht erstellt wurde, loeschen wir die Betreuung vom Array\n                this.gesuchModelManager.removeBetreuungFromKind();\n            }\n        };\n        BetreuungViewController.prototype.getInstitutionenSDList = function () {\n            var _this = this;\n            var result = [];\n            if (this.betreuungsangebot) {\n                this.gesuchModelManager.getActiveInstitutionenList().forEach(function (instStamm) {\n                    if (instStamm.betreuungsangebotTyp === _this.betreuungsangebot.key) {\n                        result.push(instStamm);\n                    }\n                });\n            }\n            return result;\n        };\n        BetreuungViewController.prototype.getInstitutionSD = function () {\n            if (this.getBetreuungModel()) {\n                return this.getBetreuungModel().institutionStammdaten;\n            }\n            return undefined;\n        };\n        BetreuungViewController.prototype.getBetreuungspensen = function () {\n            if (this.getBetreuungModel()) {\n                return this.getBetreuungModel().betreuungspensumContainers;\n            }\n            return undefined;\n        };\n        BetreuungViewController.prototype.getBetreuungspensum = function (index) {\n            if (this.getBetreuungspensen() && index >= 0 && index < this.getBetreuungspensen().length) {\n                return this.getBetreuungspensen()[index];\n            }\n            return undefined;\n        };\n        BetreuungViewController.prototype.createBetreuungspensum = function () {\n            if (this.getBetreuungModel() && (this.getBetreuungspensen() === undefined || this.getBetreuungspensen() === null)) {\n                this.getBetreuungModel().betreuungspensumContainers = [];\n            }\n            if (!this.getBetreuungModel()) {\n                this.errorService.addMesageAsError('Betreuungsmodel ist nicht initialisiert.');\n            }\n            this.getBetreuungspensen().push(new TSBetreuungspensumContainer_1.default(undefined, new TSBetreuungspensum_1.default(false, undefined, new TSDateRange_1.TSDateRange())));\n        };\n        BetreuungViewController.prototype.removeBetreuungspensum = function (betreuungspensumToDelete) {\n            var position = this.getBetreuungspensen().indexOf(betreuungspensumToDelete);\n            if (position > -1) {\n                this.getBetreuungspensen().splice(position, 1);\n            }\n        };\n        BetreuungViewController.prototype.setSelectedInstitutionStammdaten = function () {\n            var instStamList = this.gesuchModelManager.getActiveInstitutionenList();\n            for (var i = 0; i < instStamList.length; i++) {\n                if (instStamList[i].id === this.instStammId) {\n                    this.model.institutionStammdaten = instStamList[i];\n                }\n            }\n        };\n        BetreuungViewController.prototype.platzAnfordern = function () {\n            if (this.isGesuchValid() && this.getBetreuungModel().vertrag === true) {\n                this.flagErrorVertrag = false;\n                this.save(TSBetreuungsstatus_1.TSBetreuungsstatus.WARTEN, 'gesuch.betreuungen', { gesuchId: this.getGesuchId() });\n            }\n            else if (this.getBetreuungModel().vertrag !== true) {\n                this.flagErrorVertrag = true;\n            }\n        };\n        BetreuungViewController.prototype.platzBestaetigen = function () {\n            if (this.isGesuchValid()) {\n                this.getBetreuungModel().datumBestaetigung = DateUtil_1.default.today();\n                this.save(TSBetreuungsstatus_1.TSBetreuungsstatus.BESTAETIGT, 'pendenzenInstitution', undefined);\n            }\n        };\n        /**\n         * Wenn ein Betreuungsangebot abgewiesen wird, muss man die neu eingegebenen Betreuungspensen zuruecksetzen, da sie nicht relevant sind.\n         * Allerdings muessen der Grund und das Datum der Ablehnung doch gespeichert werden.\n         * In diesem Fall machen wir keine Validierung weil die Daten die eingegeben werden muessen, direkt auf dem Server gecheckt werden\n         */\n        BetreuungViewController.prototype.platzAbweisen = function () {\n            //copy values modified by the Institution in initialBetreuung\n            this.initialBetreuung.erweiterteBeduerfnisse = this.getBetreuungModel().erweiterteBeduerfnisse;\n            this.initialBetreuung.grundAblehnung = this.getBetreuungModel().grundAblehnung;\n            //restore initialBetreuung\n            this.model = angular.copy(this.initialBetreuung);\n            this.model.datumAblehnung = DateUtil_1.default.today();\n            this.save(TSBetreuungsstatus_1.TSBetreuungsstatus.ABGEWIESEN, 'pendenzenInstitution', undefined);\n        };\n        BetreuungViewController.prototype.stornieren = function () {\n            if (this.isGesuchValid()) {\n                this.getBetreuungModel().datumBestaetigung = DateUtil_1.default.today();\n                for (var i = 0; i < this.getBetreuungspensen().length; i++) {\n                    this.getBetreuungspensum(i).betreuungspensumJA.pensum = 0;\n                    this.getBetreuungspensum(i).betreuungspensumJA.nichtEingetreten = true;\n                }\n                this.getBetreuungModel().erweiterteBeduerfnisse = false;\n                this.save(TSBetreuungsstatus_1.TSBetreuungsstatus.STORNIERT, 'pendenzenInstitution', undefined);\n            }\n        };\n        BetreuungViewController.prototype.saveSchulamt = function () {\n            if (this.isGesuchValid()) {\n                this.save(TSBetreuungsstatus_1.TSBetreuungsstatus.SCHULAMT, 'gesuch.betreuungen', { gesuchId: this.getGesuchId() });\n            }\n        };\n        /**\n         * Returns true when the user is allowed to edit the content. This happens when the status is AUSSTEHEHND\n         * or SCHULAMT and we are not yet in the KorrekturmodusJugendamt\n         * @returns {boolean}\n         */\n        BetreuungViewController.prototype.isEnabled = function () {\n            if (this.getBetreuungModel()) {\n                return !this.getBetreuungModel().hasVorgaenger()\n                    && (this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.AUSSTEHEND) || (this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.SCHULAMT)\n                        && !this.isKorrekturModusJugendamt()));\n            }\n            return false;\n        };\n        BetreuungViewController.prototype.isBetreuungsstatusWarten = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.WARTEN);\n        };\n        BetreuungViewController.prototype.isBetreuungsstatusAbgewiesen = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.ABGEWIESEN);\n        };\n        BetreuungViewController.prototype.isBetreuungsstatusBestaetigt = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.BESTAETIGT);\n        };\n        BetreuungViewController.prototype.isBetreuungsstatusNichtEingetreten = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.NICHT_EINGETRETEN);\n        };\n        BetreuungViewController.prototype.isStorniert = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.STORNIERT);\n        };\n        BetreuungViewController.prototype.isBetreuungsstatusAusstehend = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.AUSSTEHEND);\n        };\n        BetreuungViewController.prototype.isBetreuungsstatusSchulamt = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.SCHULAMT);\n        };\n        BetreuungViewController.prototype.isBetreuungsstatusStorniert = function () {\n            return this.isBetreuungsstatus(TSBetreuungsstatus_1.TSBetreuungsstatus.STORNIERT);\n        };\n        BetreuungViewController.prototype.isBetreuungsstatus = function (status) {\n            if (this.getBetreuungModel()) {\n                return this.getBetreuungModel().betreuungsstatus === status;\n            }\n            return false;\n        };\n        BetreuungViewController.prototype.isTagesschule = function () {\n            return this.isBetreuungsangebottyp(TSBetreuungsangebotTyp_1.TSBetreuungsangebotTyp.TAGESSCHULE);\n        };\n        BetreuungViewController.prototype.isTageseltern = function () {\n            return this.isBetreuungsangebottyp(TSBetreuungsangebotTyp_1.TSBetreuungsangebotTyp.TAGESELTERN_KLEINKIND) ||\n                this.isBetreuungsangebottyp(TSBetreuungsangebotTyp_1.TSBetreuungsangebotTyp.TAGESELTERN_SCHULKIND);\n        };\n        BetreuungViewController.prototype.isBetreuungsangebottyp = function (betAngTyp) {\n            if (this.betreuungsangebot) {\n                return this.betreuungsangebot.key === TSBetreuungsangebotTyp_1.TSBetreuungsangebotTyp[betAngTyp];\n            }\n            return false;\n        };\n        /**\n         * Erweiterte Beduerfnisse wird nur beim Institutionen oder Traegerschaften eingeblendet oder wenn das Feld schon als true gesetzt ist\n         * ACHTUNG: Hier benutzen wir die Direktive dv-show-element nicht, da es unterschiedliche Bedingungen für jede Rolle gibt.\n         * @returns {boolean}\n         */\n        BetreuungViewController.prototype.showErweiterteBeduerfnisse = function () {\n            return this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getTraegerschaftInstitutionRoles())\n                || this.getBetreuungModel().erweiterteBeduerfnisse === true;\n        };\n        BetreuungViewController.prototype.showFalscheAngaben = function () {\n            return (this.isBetreuungsstatusBestaetigt() || this.isBetreuungsstatusAbgewiesen())\n                && !this.isGesuchReadonly() && !this.isFromMutation();\n        };\n        BetreuungViewController.prototype.showAngabenKorrigieren = function () {\n            return (this.isBetreuungsstatusBestaetigt() || this.isBetreuungsstatusAbgewiesen() || this.isBetreuungsstatusStorniert())\n                && !this.isGesuchReadonly() && this.isFromMutation();\n        };\n        BetreuungViewController.prototype.isFromMutation = function () {\n            if (this.getBetreuungModel()) {\n                if (this.getBetreuungModel().vorgaengerId) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        BetreuungViewController.prototype.showAngabeKorrigieren = function () {\n            return (this.isBetreuungsstatusBestaetigt() || this.isBetreuungsstatusAbgewiesen())\n                && !this.isGesuchReadonly() && this.isFromMutation();\n        };\n        BetreuungViewController.prototype.mutationsmeldungErstellen = function () {\n            //create dummy copy of model\n            this.mutationsmeldungModel = angular.copy(this.getBetreuungModel());\n            this.isMutationsmeldungStatus = true;\n        };\n        /**\n         * Mutationsmeldungen werden nur Betreuungen erlaubt, die verfuegt sind oder bereits irgendwann\n         * verfuegt wurden bzw. ein vorgaengerId haben. Ausserdem muss es sich um das letzte bzw. neueste Gesuch handeln\n         */\n        BetreuungViewController.prototype.isMutationsmeldungAllowed = function () {\n            return ((this.isMutation() && (this.getBetreuungModel().vorgaengerId || this.getBetreuungModel().betreuungsstatus === TSBetreuungsstatus_1.TSBetreuungsstatus.VERFUEGT))\n                || (!this.isMutation() && TSAntragStatus_1.isVerfuegtOrSTV(this.gesuchModelManager.getGesuch().status) && this.getBetreuungModel().betreuungsstatus === TSBetreuungsstatus_1.TSBetreuungsstatus.VERFUEGT))\n                && this.getBetreuungModel().betreuungsstatus !== TSBetreuungsstatus_1.TSBetreuungsstatus.WARTEN\n                && this.gesuchModelManager.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus_1.TSGesuchsperiodeStatus.AKTIV\n                && this.isNewestGesuch\n                && this.gesuchModelManager.getGesuch().gesperrtWegenBeschwerde !== true;\n        };\n        BetreuungViewController.prototype.mutationsmeldungSenden = function () {\n            var _this = this;\n            // send mutationsmeldung (dummy copy)\n            if (this.isGesuchValid() && this.mutationsmeldungModel) {\n                this.dvDialog.showDialog(removeDialogTemplate, RemoveDialogController_1.RemoveDialogController, {\n                    title: 'MUTATIONSMELDUNG_CONFIRMATION',\n                    deleteText: 'MUTATIONSMELDUNG_BESCHREIBUNG',\n                    parentController: undefined,\n                    elementID: undefined\n                }).then(function () {\n                    _this.mitteilungRS.sendbetreuungsmitteilung(_this.gesuchModelManager.getGesuch().fall, _this.mutationsmeldungModel).then(function (response) {\n                        _this.form.$setUntouched();\n                        _this.form.$setPristine();\n                        // reset values. is needed??????\n                        _this.isMutationsmeldungStatus = false;\n                        _this.mutationsmeldungModel = undefined;\n                        _this.$state.go('gesuch.betreuungen', { gesuchId: _this.getGesuchId() });\n                    });\n                });\n            }\n        };\n        /**\n         * Prueft dass das Objekt existingMutationsMeldung existiert und dass es ein sentDatum hat. Das wird gebraucht,\n         * um zu vermeiden, dass ein leeres Objekt als gueltiges Objekt erkannt wird.\n         * Ausserdem muss die Meldung nicht applied sein und nicht den Status ERLEDIGT haben\n         */\n        BetreuungViewController.prototype.showExistingBetreuungsmitteilungInfoBox = function () {\n            return this.existingMutationsMeldung !== undefined && this.existingMutationsMeldung !== null\n                && this.existingMutationsMeldung.sentDatum !== undefined && this.existingMutationsMeldung.sentDatum !== null\n                && this.existingMutationsMeldung.applied !== true && !this.existingMutationsMeldung.isErledigt();\n        };\n        BetreuungViewController.prototype.getDatumLastBetreuungsmitteilung = function () {\n            if (this.showExistingBetreuungsmitteilungInfoBox()) {\n                return DateUtil_1.default.momentToLocalDateFormat(this.existingMutationsMeldung.sentDatum, 'DD.MM.YYYY');\n            }\n            return '';\n        };\n        BetreuungViewController.prototype.getTimeLastBetreuungsmitteilung = function () {\n            if (this.showExistingBetreuungsmitteilungInfoBox()) {\n                return DateUtil_1.default.momentToLocalDateTimeFormat(this.existingMutationsMeldung.sentDatum, 'HH:mm');\n            }\n            return '';\n        };\n        BetreuungViewController.prototype.openExistingBetreuungsmitteilung = function () {\n            this.$state.go('gesuch.mitteilung', {\n                fallId: this.gesuchModelManager.getGesuch().fall.id,\n                gesuchId: this.gesuchModelManager.getGesuch().id,\n                betreuungId: this.getBetreuungModel().id,\n                mitteilungId: this.existingMutationsMeldung.id\n            });\n        };\n        /**\n         * Sucht die neueste Betreuungsmitteilung fuer die aktuelle Betreuung. Da es nur fuer die Rollen\n         * INST und TRAEG relevant ist, wird es nur fuer diese Rollen geholt\n         */\n        BetreuungViewController.prototype.findExistingBetreuungsmitteilung = function () {\n            var _this = this;\n            if (!this.getBetreuungModel().isNew() && this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) {\n                this.mitteilungRS.getNewestBetreuungsmitteilung(this.getBetreuungModel().id).then(function (response) {\n                    _this.existingMutationsMeldung = response;\n                });\n            }\n        };\n        BetreuungViewController.$inject = ['$state', 'GesuchModelManager', 'EbeguUtil', 'CONSTANTS', '$scope', 'BerechnungsManager', 'ErrorService',\n            'AuthServiceRS', 'WizardStepManager', '$stateParams', 'MitteilungRS', 'DvDialog', '$log', '$timeout'];\n        return BetreuungViewController;\n    }(abstractGesuchView_1.default));\n    exports.BetreuungViewController = BetreuungViewController;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/betreuungView/betreuungView.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/betreuungView/betreuungView.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;;;;;;;;;;;;;IAkCH,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAC/C,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAChC,IAAI,oBAAoB,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;IAE7E;QAAA;YACI,eAAU,GAAG,KAAK,CAAC;YACnB,aAAQ,GAAG,QAAQ,CAAC;YACpB,eAAU,GAAG,uBAAuB,CAAC;YACrC,iBAAY,GAAG,IAAI,CAAC;QACxB,CAAC;QAAD,mCAAC;IAAD,CAAC,AALD,IAKC;IALY,oEAA4B;IAOzC;QAA6C,2CAAyC;QAgBlF,eAAe;QACf,iCAAoB,MAAqB,EAAE,kBAAsC,EAAU,SAAoB,EAAU,SAAc,EAC3H,MAAc,EAAE,kBAAsC,EAAU,YAA0B,EAClF,aAA4B,EAAE,iBAAoC,EAAU,YAAmC,EAC/G,YAA0B,EAAU,QAAkB,EAAU,IAAiB,EACzF,QAAyB;YAJrC,YAKI,kBAAM,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,MAAM,EAAE,mCAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,SAEjH;YAPmB,YAAM,GAAN,MAAM,CAAe;YAAkD,eAAS,GAAT,SAAS,CAAW;YAAU,eAAS,GAAT,SAAS,CAAK;YAC3D,kBAAY,GAAZ,YAAY,CAAc;YAClF,mBAAa,GAAb,aAAa,CAAe;YAAgD,kBAAY,GAAZ,YAAY,CAAuB;YAC/G,kBAAY,GAAZ,YAAY,CAAc;YAAU,cAAQ,GAAR,QAAQ,CAAU;YAAU,UAAI,GAAJ,IAAI,CAAa;;QAIrG,CAAC;QAED,yCAAO,GAAP;YAAA,iBAiCC;YAhCG,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;YACvC,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACtC,IAAI,SAAS,GAAW,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;YACzH,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;gBAChD,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC;oBACpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,sCAAsC,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC;oBAClI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACxG,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACnH,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBACnE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,4FAA4F;oBAC5F,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBACvC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACjD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnJ,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBACnE,CAAC;gBAED,IAAI,CAAC,6BAA6B,EAAE,CAAC;gBACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;gBACnC,IAAI,CAAC,aAAa,EAAE,CAAC;gBAErB,gBAAgB;gBAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;YACjE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,8CAA8C,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YACnG,CAAC;YACD,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAC,QAAiB;gBAC9D,KAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,gCAAgC,EAAE,CAAC;QAC5C,CAAC;QAED;;;WAGG;QACI,oDAAkB,GAAzB;YACI,IAAI,WAAW,GAAgB,IAAI,qBAAW,EAAE,CAAC;YACjD,WAAW,CAAC,gBAAgB,GAAG,uCAAkB,CAAC,UAAU,CAAC;YAC7D,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;QAEO,+CAAa,GAArB;YACI,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC;gBAC9C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,uCAAuC,EAAE,CAAC;YAC5E,CAAC;YACD,IAAI,CAAC,gCAAgC,EAAE,CAAC;YACxC,0BAA0B;YAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC5H,IAAI,CAAC,kBAAkB,CAAC,6BAA6B,EAAE,CAAC;YAC5D,CAAC;QACL,CAAC;QAED;;;WAGG;QACK,kEAAgC,GAAxC;YACI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;mBACrE,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,uBAAU,CAAC,oCAAoC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1F,uEAAuE;gBACvE,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAClC,CAAC;QACL,CAAC;QAEM,wDAAsB,GAA7B;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,CAAC;QAC5D,CAAC;QAEO,yEAAuC,GAA/C;YAAA,iBAIC;YAHG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,UAAC,KAAU;gBACnD,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,KAAI,CAAC,gBAAgB,EAAE,CAAC,oBAAoB,CAAC;YACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACV,CAAC;QAEM,8CAAY,GAAnB;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;QAEM,mDAAiB,GAAxB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;YACtC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;QAEM,gDAAc,GAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;oBACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,GAAG,uCAAkB,CAAC,QAAQ,CAAC;oBACxE,qEAAqE;oBACrE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,0CAA0C,CAAC;oBAC7E,IAAI,CAAC,gCAAgC,EAAE,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,GAAG,uCAAkB,CAAC,UAAU,CAAC;gBAC9E,CAAC;YACL,CAAC;QACL,CAAC;QAEO,sCAAI,GAAZ,UAAa,SAA6B,EAAE,QAAgB,EAAE,MAAW;YAAzE,iBAyBC;YAxBG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa;YACzE,IAAI,SAAS,GAAuB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;YAChE,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;oBACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC,0BAA0B,GAAG,EAAE,CAAC,CAAC,uGAAuG;gBACrK,CAAC;YACL,CAAC;YACD,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,SAAS,CAAC;YACxC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,iBAAsB;gBACjF,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACzB,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,SAAS;gBACf,gBAAgB;gBAChB,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAI,CAAC,KAAK,CAAC,CAAC;gBACxE,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,KAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,SAAS,CAAC;gBACxC,KAAI,CAAC,gCAAgC,EAAE,CAAC;gBACxC,KAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;gBAC1B,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACzB,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,+DAA6B,GAArC;YACI,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,wDAA+B,EAAE,CAAC,CAAC;QACzG,CAAC;QAEM,wCAAM,GAAb;YACI,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC;QACzE,CAAC;QAED,uCAAK,GAAL;YACI,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,kEAAkE;QACtG,CAAC;QAEO,yDAAuB,GAA/B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC9C,oFAAoF;gBACpF,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,EAAE,CAAC;YACtD,CAAC;QACL,CAAC;QAEM,wDAAsB,GAA7B;YAAA,iBAUC;YATG,IAAI,MAAM,GAAmC,EAAE,CAAC;YAChD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,CAAC,OAAO,CAAC,UAAC,SAAkC;oBAC5F,EAAE,CAAC,CAAC,SAAS,CAAC,oBAAoB,KAAK,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;wBAChE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC3B,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEM,kDAAgB,GAAvB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,qBAAqB,CAAC;YAC1D,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAEM,qDAAmB,GAA1B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,0BAA0B,CAAC;YAC/D,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAEM,qDAAmB,GAA1B,UAA2B,KAAa;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxF,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,KAAK,CAAC,CAAC;YAC7C,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAEM,wDAAsB,GAA7B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC,mBAAmB,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChH,IAAI,CAAC,iBAAiB,EAAE,CAAC,0BAA0B,GAAG,EAAE,CAAC;YAC7D,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,0CAA0C,CAAC,CAAC;YACnF,CAAC;YACD,IAAI,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,IAAI,qCAA2B,CAAC,SAAS,EAAE,IAAI,4BAAkB,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,yBAAW,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC;QAEM,wDAAsB,GAA7B,UAA8B,wBAAqD;YAC/E,IAAI,QAAQ,GAAW,IAAI,CAAC,mBAAmB,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,mBAAmB,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACnD,CAAC;QACL,CAAC;QAEM,kEAAgC,GAAvC;YACI,IAAI,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,CAAC;YACxE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC1C,IAAI,CAAC,KAAK,CAAC,qBAAqB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;gBACvD,CAAC;YACL,CAAC;QACL,CAAC;QAEM,gDAAc,GAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;gBACpE,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;gBAC9B,IAAI,CAAC,IAAI,CAAC,uCAAkB,CAAC,MAAM,EAAE,oBAAoB,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC;YAC/F,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YACjC,CAAC;QACL,CAAC;QAEM,kDAAgB,GAAvB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,GAAG,kBAAQ,CAAC,KAAK,EAAE,CAAC;gBAC9D,IAAI,CAAC,IAAI,CAAC,uCAAkB,CAAC,UAAU,EAAE,sBAAsB,EAAE,SAAS,CAAC,CAAC;YAChF,CAAC;QACL,CAAC;QAED;;;;WAIG;QACI,+CAAa,GAApB;YACI,6DAA6D;YAC7D,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,sBAAsB,CAAC;YAC/F,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,cAAc,CAAC;YAC/E,0BAA0B;YAC1B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,kBAAQ,CAAC,KAAK,EAAE,CAAC;YAC7C,IAAI,CAAC,IAAI,CAAC,uCAAkB,CAAC,UAAU,EAAE,sBAAsB,EAAE,SAAS,CAAC,CAAC;QAChF,CAAC;QAEM,4CAAU,GAAjB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,GAAG,kBAAQ,CAAC,KAAK,EAAE,CAAC;gBAE9D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACjE,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC1D,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC3E,CAAC;gBACD,IAAI,CAAC,iBAAiB,EAAE,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBAExD,IAAI,CAAC,IAAI,CAAC,uCAAkB,CAAC,SAAS,EAAE,sBAAsB,EAAE,SAAS,CAAC,CAAC;YAC/E,CAAC;QACL,CAAC;QAEM,8CAAY,GAAnB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,uCAAkB,CAAC,QAAQ,EAAE,oBAAoB,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC;YACjG,CAAC;QACL,CAAC;QAED;;;;WAIG;QACI,2CAAS,GAAhB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,aAAa,EAAE;uBACzC,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,QAAQ,CAAC;2BAChH,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;YAC/C,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEM,0DAAwB,GAA/B;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC;QAEM,8DAA4B,GAAnC;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,UAAU,CAAC,CAAC;QAClE,CAAC;QAEM,8DAA4B,GAAnC;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,UAAU,CAAC,CAAC;QAClE,CAAC;QAEM,oEAAkC,GAAzC;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,iBAAiB,CAAC,CAAC;QACzE,CAAC;QAEM,6CAAW,GAAlB;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,SAAS,CAAC,CAAC;QACjE,CAAC;QAEM,8DAA4B,GAAnC;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,UAAU,CAAC,CAAC;QAClE,CAAC;QAEM,4DAA0B,GAAjC;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,QAAQ,CAAC,CAAC;QAChE,CAAC;QAEM,6DAA2B,GAAlC;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uCAAkB,CAAC,SAAS,CAAC,CAAC;QACjE,CAAC;QAEO,oDAAkB,GAA1B,UAA2B,MAA0B;YACjD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,KAAK,MAAM,CAAC;YAChE,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEM,+CAAa,GAApB;YACI,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,+CAAsB,CAAC,WAAW,CAAC,CAAC;QAC3E,CAAC;QAEM,+CAAa,GAApB;YACI,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,+CAAsB,CAAC,qBAAqB,CAAC;gBAC5E,IAAI,CAAC,sBAAsB,CAAC,+CAAsB,CAAC,qBAAqB,CAAC,CAAC;QAClF,CAAC;QAEO,wDAAsB,GAA9B,UAA+B,SAAiC;YAC5D,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,KAAK,+CAAsB,CAAC,SAAS,CAAC,CAAC;YAC5E,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED;;;;WAIG;QACI,4DAA0B,GAAjC;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,uBAAU,CAAC,gCAAgC,EAAE,CAAC;mBAC9E,IAAI,CAAC,iBAAiB,EAAE,CAAC,sBAAsB,KAAK,IAAI,CAAC;QACpE,CAAC;QAEM,oDAAkB,GAAzB;YACI,MAAM,CAAC,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,IAAI,CAAC,4BAA4B,EAAE,CAAC;mBAC5E,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QAC9D,CAAC;QAEM,wDAAsB,GAA7B;YACI,MAAM,CAAC,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,IAAI,CAAC,4BAA4B,EAAE,IAAI,IAAI,CAAC,2BAA2B,EAAE,CAAC;mBAClH,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;QAC7D,CAAC;QAEM,gDAAc,GAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;oBACxC,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEM,uDAAqB,GAA5B;YACI,MAAM,CAAC,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,IAAI,CAAC,4BAA4B,EAAE,CAAC;mBAC5E,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;QAC7D,CAAC;QAEM,2DAAyB,GAAhC;YACI,4BAA4B;YAC5B,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;YACpE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACzC,CAAC;QAED;;;WAGG;QACI,2DAAyB,GAAhC;YACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,YAAY,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,KAAK,uCAAkB,CAAC,QAAQ,CAAC,CAAC;mBAC5I,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,gCAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,KAAK,uCAAkB,CAAC,QAAQ,CAAC,CAAC;mBACjK,IAAI,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,KAAK,uCAAkB,CAAC,MAAM;mBACvE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,MAAM,KAAK,+CAAsB,CAAC,KAAK;mBAC1F,IAAI,CAAC,cAAc;mBACnB,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,uBAAuB,KAAK,IAAI,CAAC;QAChF,CAAC;QAEM,wDAAsB,GAA7B;YAAA,iBAqBC;YApBG,qCAAqC;YACrC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,oBAAoB,EAAE,+CAAsB,EAAE;oBACnE,KAAK,EAAE,+BAA+B;oBACtC,UAAU,EAAE,+BAA+B;oBAC3C,gBAAgB,EAAE,SAAS;oBAC3B,SAAS,EAAE,SAAS;iBACvB,CAAC,CAAC,IAAI,CAAC;oBACJ,KAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,KAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,IAAI,EAC/E,KAAI,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;wBAE1C,KAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;wBAC1B,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;wBACzB,gCAAgC;wBAChC,KAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;wBACtC,KAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;wBACvC,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,EAAC,QAAQ,EAAE,KAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC;oBACzE,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;QAED;;;;WAIG;QACI,yEAAuC,GAA9C;YACI,MAAM,CAAC,IAAI,CAAC,wBAAwB,KAAK,SAAS,IAAI,IAAI,CAAC,wBAAwB,KAAK,IAAI;mBACrF,IAAI,CAAC,wBAAwB,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,wBAAwB,CAAC,SAAS,KAAK,IAAI;mBACzG,IAAI,CAAC,wBAAwB,CAAC,OAAO,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,CAAC;QACzG,CAAC;QAEM,kEAAgC,GAAvC;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,uCAAuC,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,kBAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YACnG,CAAC;YACD,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAEM,iEAA+B,GAAtC;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,uCAAuC,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,kBAAQ,CAAC,2BAA2B,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAClG,CAAC;YACD,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAEM,kEAAgC,GAAvC;YACI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,mBAAmB,EAAE;gBAChC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE;gBACnD,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,EAAE;gBAChD,WAAW,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,EAAE;gBACxC,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,EAAE;aACjD,CAAC,CAAC;QACP,CAAC;QAED;;;WAGG;QACK,kEAAgC,GAAxC;YAAA,iBAMC;YALG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,uBAAU,CAAC,oCAAoC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1H,IAAI,CAAC,YAAY,CAAC,6BAA6B,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,QAAgC;oBAC/G,KAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC;gBAC7C,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;QAhdM,+BAAO,GAAG,CAAC,QAAQ,EAAE,oBAAoB,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,oBAAoB,EAAE,cAAc;YACtH,eAAe,EAAE,mBAAmB,EAAE,cAAc,EAAE,cAAc,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QAgd9G,8BAAC;KAAA,AA/dD,CAA6C,4BAA4B,GA+dxE;IA/dY,0DAAuB","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions} from 'angular';\nimport {IStateService} from 'angular-ui-router';\nimport AbstractGesuchViewController from '../abstractGesuchView';\nimport GesuchModelManager from '../../service/gesuchModelManager';\nimport TSKindContainer from '../../../models/TSKindContainer';\nimport {getTSBetreuungsangebotTypValues, TSBetreuungsangebotTyp} from '../../../models/enums/TSBetreuungsangebotTyp';\nimport TSInstitutionStammdaten from '../../../models/TSInstitutionStammdaten';\nimport TSBetreuungspensumContainer from '../../../models/TSBetreuungspensumContainer';\nimport TSBetreuung from '../../../models/TSBetreuung';\nimport TSBetreuungspensum from '../../../models/TSBetreuungspensum';\nimport {TSDateRange} from '../../../models/types/TSDateRange';\nimport {TSBetreuungsstatus} from '../../../models/enums/TSBetreuungsstatus';\nimport BerechnungsManager from '../../service/berechnungsManager';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport ErrorService from '../../../core/errors/service/ErrorService';\nimport AuthServiceRS from '../../../authentication/service/AuthServiceRS.rest';\nimport DateUtil from '../../../utils/DateUtil';\nimport WizardStepManager from '../../service/wizardStepManager';\nimport {TSWizardStepName} from '../../../models/enums/TSWizardStepName';\nimport {TSRoleUtil} from '../../../utils/TSRoleUtil';\nimport {IBetreuungStateParams} from '../../gesuch.route';\nimport MitteilungRS from '../../../core/service/mitteilungRS.rest';\nimport {DvDialog} from '../../../core/directive/dv-dialog/dv-dialog';\nimport {RemoveDialogController} from '../../dialog/RemoveDialogController';\nimport {isVerfuegtOrSTV} from '../../../models/enums/TSAntragStatus';\nimport * as moment from 'moment';\nimport TSBetreuungsmitteilung from '../../../models/TSBetreuungsmitteilung';\nimport {TSGesuchsperiodeStatus} from '../../../models/enums/TSGesuchsperiodeStatus';\nimport IScope = angular.IScope;\nimport ITimeoutService = angular.ITimeoutService;\nimport ILogService = angular.ILogService;\n\nlet template = require('./betreuungView.html');\nrequire('./betreuungView.less');\nlet removeDialogTemplate = require('../../dialog/removeDialogTemplate.html');\n\nexport class BetreuungViewComponentConfig implements IComponentOptions {\n    transclude = false;\n    template = template;\n    controller = BetreuungViewController;\n    controllerAs = 'vm';\n}\n\nexport class BetreuungViewController extends AbstractGesuchViewController<TSBetreuung> {\n    betreuungsangebot: any;\n    betreuungsangebotValues: Array<any>;\n    instStammId: string; //der ausgewaehlte instStammId wird hier gespeichert und dann in die entsprechende InstitutionStammdaten umgewandert\n    isSavingData: boolean; // Semaphore\n    initialBetreuung: TSBetreuung;\n    flagErrorVertrag: boolean;\n    kindModel: TSKindContainer;\n    betreuungIndex: number;\n    isMutationsmeldungStatus: boolean;\n    mutationsmeldungModel: TSBetreuung;\n    existingMutationsMeldung: TSBetreuungsmitteilung;\n    isNewestGesuch: boolean;\n\n    static $inject = ['$state', 'GesuchModelManager', 'EbeguUtil', 'CONSTANTS', '$scope', 'BerechnungsManager', 'ErrorService',\n        'AuthServiceRS', 'WizardStepManager', '$stateParams', 'MitteilungRS', 'DvDialog', '$log', '$timeout'];\n    /* @ngInject */\n    constructor(private $state: IStateService, gesuchModelManager: GesuchModelManager, private ebeguUtil: EbeguUtil, private CONSTANTS: any,\n                $scope: IScope, berechnungsManager: BerechnungsManager, private errorService: ErrorService,\n                private authServiceRS: AuthServiceRS, wizardStepManager: WizardStepManager, private $stateParams: IBetreuungStateParams,\n                private mitteilungRS: MitteilungRS, private dvDialog: DvDialog, private $log: ILogService,\n                $timeout: ITimeoutService) {\n        super(gesuchModelManager, berechnungsManager, wizardStepManager, $scope, TSWizardStepName.BETREUUNG, $timeout);\n\n    }\n\n    $onInit() {\n        this.mutationsmeldungModel = undefined;\n        this.isMutationsmeldungStatus = false;\n        let kindIndex: number = this.gesuchModelManager.convertKindNumberToKindIndex(parseInt(this.$stateParams.kindNumber, 10));\n        if (kindIndex >= 0) {\n            this.gesuchModelManager.setKindIndex(kindIndex);\n            if (this.$stateParams.betreuungNumber) {\n                this.betreuungIndex = this.gesuchModelManager.convertBetreuungNumberToBetreuungIndex(parseInt(this.$stateParams.betreuungNumber));\n                this.model = angular.copy(this.gesuchModelManager.getKindToWorkWith().betreuungen[this.betreuungIndex]);\n                this.initialBetreuung = angular.copy(this.gesuchModelManager.getKindToWorkWith().betreuungen[this.betreuungIndex]);\n                this.gesuchModelManager.setBetreuungIndex(this.betreuungIndex);\n            } else {\n                //wenn betreuung-nummer nicht definiert ist heisst dass, das wir ein neues erstellen sollten\n                this.model = this.initEmptyBetreuung();\n                this.initialBetreuung = angular.copy(this.model);\n                this.betreuungIndex = this.gesuchModelManager.getKindToWorkWith().betreuungen ? this.gesuchModelManager.getKindToWorkWith().betreuungen.length : 0;\n                this.gesuchModelManager.setBetreuungIndex(this.betreuungIndex);\n            }\n\n            this.setBetreuungsangebotTypValues();\n            this.betreuungsangebot = undefined;\n            this.initViewModel();\n\n            // just to read!\n            this.kindModel = this.gesuchModelManager.getKindToWorkWith();\n        } else {\n            this.$log.error('There is no kind available with kind-number:' + this.$stateParams.kindNumber);\n        }\n        this.gesuchModelManager.isNeuestesGesuch().then((response: boolean) => {\n            this.isNewestGesuch = response;\n        });\n\n        this.findExistingBetreuungsmitteilung();\n    }\n\n    /**\n     * Creates a Betreuung for the kind given by the kindNumber attribute of the class.\n     * Thus the kindnumber must be set before this method is called.\n     */\n    public initEmptyBetreuung(): TSBetreuung {\n        let tsBetreuung: TSBetreuung = new TSBetreuung();\n        tsBetreuung.betreuungsstatus = TSBetreuungsstatus.AUSSTEHEND;\n        return tsBetreuung;\n    }\n\n    private initViewModel() {\n        this.isSavingData = false;\n        this.flagErrorVertrag = false;\n        if (this.getInstitutionSD()) {\n            this.instStammId = this.getInstitutionSD().id;\n            this.betreuungsangebot = this.getBetreuungsangebotFromInstitutionList();\n        }\n        this.startEmptyListOfBetreuungspensen();\n        //institutionen lazy laden\n        if (!this.gesuchModelManager.getActiveInstitutionenList() || this.gesuchModelManager.getActiveInstitutionenList().length <= 0) {\n            this.gesuchModelManager.updateActiveInstitutionenList();\n        }\n    }\n\n    /**\n     * Fuer Institutionen und Traegerschaften wird es geprueft ob es schon ein Betreuungspensum existiert,\n     * wenn nicht wir die Liste dann mit einem leeren initiallisiert\n     */\n    private startEmptyListOfBetreuungspensen() {\n        if ((!this.getBetreuungspensen() || this.getBetreuungspensen().length === 0)\n            && (this.authServiceRS.isOneOfRoles(TSRoleUtil.getTraegerschaftInstitutionOnlyRoles()))) {\n            // nur fuer Institutionen wird ein Betreuungspensum by default erstellt\n            this.createBetreuungspensum();\n        }\n    }\n\n    public getGesuchsperiodeBegin(): moment.Moment {\n        return this.gesuchModelManager.getGesuchsperiodeBegin();\n    }\n\n    private getBetreuungsangebotFromInstitutionList() {\n        return $.grep(this.betreuungsangebotValues, (value: any) => {\n            return value.key === this.getInstitutionSD().betreuungsangebotTyp;\n        })[0];\n    }\n\n    public getKindModel(): TSKindContainer {\n        return this.kindModel;\n    }\n\n    public getBetreuungModel(): TSBetreuung {\n        if (this.isMutationsmeldungStatus && this.mutationsmeldungModel) {\n            return this.mutationsmeldungModel;\n        }\n        return this.model;\n    }\n\n    public changedAngebot() {\n        if (this.getBetreuungModel()) {\n            if (this.isTagesschule()) {\n                this.getBetreuungModel().betreuungsstatus = TSBetreuungsstatus.SCHULAMT;\n                // Fuer Tagesschule setzen wir eine Dummy-Tagesschule als Institution\n                this.instStammId = this.CONSTANTS.INSTITUTIONSSTAMMDATENID_DUMMY_TAGESSCHULE;\n                this.setSelectedInstitutionStammdaten();\n            } else {\n                this.getBetreuungModel().betreuungsstatus = TSBetreuungsstatus.AUSSTEHEND;\n            }\n        }\n    }\n\n    private save(newStatus: TSBetreuungsstatus, nextStep: string, params: any): void {\n        this.isSavingData = true;\n        this.gesuchModelManager.setBetreuungToWorkWith(this.model); //setze model\n        let oldStatus: TSBetreuungsstatus = this.model.betreuungsstatus;\n        if (this.getBetreuungModel()) {\n            if (this.isTagesschule()) {\n                this.getBetreuungModel().betreuungspensumContainers = []; // fuer Tagesschule werden keine Betreuungspensum benoetigt, deswegen löschen wir sie vor dem Speichern\n            }\n        }\n        this.errorService.clearAll();\n        this.model.betreuungsstatus = newStatus;\n        this.gesuchModelManager.saveBetreuung(this.model, false).then((betreuungResponse: any) => {\n            this.isSavingData = false;\n            this.form.$setPristine();\n            this.$state.go(nextStep, params);\n        }).catch((exception) => {\n            // starting over\n            this.$log.error('there was an error saving the betreuung ', this.model);\n            this.isSavingData = false;\n            this.model.betreuungsstatus = oldStatus;\n            this.startEmptyListOfBetreuungspensen();\n            this.form.$setUntouched();\n            this.form.$setPristine();\n            return undefined;\n        });\n    }\n\n    private setBetreuungsangebotTypValues(): void {\n        this.betreuungsangebotValues = this.ebeguUtil.translateStringList(getTSBetreuungsangebotTypValues());\n    }\n\n    public cancel() {\n        this.reset();\n        this.form.$setPristine();\n        this.$state.go('gesuch.betreuungen', {gesuchId: this.getGesuchId()});\n    }\n\n    reset() {\n        this.removeBetreuungFromKind(); //wenn model existiert und nicht neu ist wegnehmen, sonst resetten\n    }\n\n    private removeBetreuungFromKind(): void {\n        if (this.model && !this.model.timestampErstellt) {\n            //wenn die Betreeung noch nicht erstellt wurde, loeschen wir die Betreuung vom Array\n            this.gesuchModelManager.removeBetreuungFromKind();\n        }\n    }\n\n    public getInstitutionenSDList(): Array<TSInstitutionStammdaten> {\n        let result: Array<TSInstitutionStammdaten> = [];\n        if (this.betreuungsangebot) {\n            this.gesuchModelManager.getActiveInstitutionenList().forEach((instStamm: TSInstitutionStammdaten) => {\n                if (instStamm.betreuungsangebotTyp === this.betreuungsangebot.key) {\n                    result.push(instStamm);\n                }\n            });\n        }\n        return result;\n    }\n\n    public getInstitutionSD(): TSInstitutionStammdaten {\n        if (this.getBetreuungModel()) {\n            return this.getBetreuungModel().institutionStammdaten;\n        }\n        return undefined;\n    }\n\n    public getBetreuungspensen(): Array<TSBetreuungspensumContainer> {\n        if (this.getBetreuungModel()) {\n            return this.getBetreuungModel().betreuungspensumContainers;\n        }\n        return undefined;\n    }\n\n    public getBetreuungspensum(index: number): TSBetreuungspensumContainer {\n        if (this.getBetreuungspensen() && index >= 0 && index < this.getBetreuungspensen().length) {\n            return this.getBetreuungspensen()[index];\n        }\n        return undefined;\n    }\n\n    public createBetreuungspensum(): void {\n        if (this.getBetreuungModel() && (this.getBetreuungspensen() === undefined || this.getBetreuungspensen() === null)) {\n            this.getBetreuungModel().betreuungspensumContainers = [];\n        }\n        if (!this.getBetreuungModel()) {\n            this.errorService.addMesageAsError('Betreuungsmodel ist nicht initialisiert.');\n        }\n        this.getBetreuungspensen().push(new TSBetreuungspensumContainer(undefined, new TSBetreuungspensum(false, undefined, new TSDateRange())));\n    }\n\n    public removeBetreuungspensum(betreuungspensumToDelete: TSBetreuungspensumContainer): void {\n        let position: number = this.getBetreuungspensen().indexOf(betreuungspensumToDelete);\n        if (position > -1) {\n            this.getBetreuungspensen().splice(position, 1);\n        }\n    }\n\n    public setSelectedInstitutionStammdaten(): void {\n        let instStamList = this.gesuchModelManager.getActiveInstitutionenList();\n        for (let i: number = 0; i < instStamList.length; i++) {\n            if (instStamList[i].id === this.instStammId) {\n                this.model.institutionStammdaten = instStamList[i];\n            }\n        }\n    }\n\n    public platzAnfordern(): void {\n        if (this.isGesuchValid() && this.getBetreuungModel().vertrag === true) {\n            this.flagErrorVertrag = false;\n            this.save(TSBetreuungsstatus.WARTEN, 'gesuch.betreuungen', {gesuchId: this.getGesuchId()});\n        } else if (this.getBetreuungModel().vertrag !== true) {\n            this.flagErrorVertrag = true;\n        }\n    }\n\n    public platzBestaetigen(): void {\n        if (this.isGesuchValid()) {\n            this.getBetreuungModel().datumBestaetigung = DateUtil.today();\n            this.save(TSBetreuungsstatus.BESTAETIGT, 'pendenzenInstitution', undefined);\n        }\n    }\n\n    /**\n     * Wenn ein Betreuungsangebot abgewiesen wird, muss man die neu eingegebenen Betreuungspensen zuruecksetzen, da sie nicht relevant sind.\n     * Allerdings muessen der Grund und das Datum der Ablehnung doch gespeichert werden.\n     * In diesem Fall machen wir keine Validierung weil die Daten die eingegeben werden muessen, direkt auf dem Server gecheckt werden\n     */\n    public platzAbweisen(): void {\n        //copy values modified by the Institution in initialBetreuung\n        this.initialBetreuung.erweiterteBeduerfnisse = this.getBetreuungModel().erweiterteBeduerfnisse;\n        this.initialBetreuung.grundAblehnung = this.getBetreuungModel().grundAblehnung;\n        //restore initialBetreuung\n        this.model = angular.copy(this.initialBetreuung);\n        this.model.datumAblehnung = DateUtil.today();\n        this.save(TSBetreuungsstatus.ABGEWIESEN, 'pendenzenInstitution', undefined);\n    }\n\n    public stornieren(): void {\n        if (this.isGesuchValid()) {\n            this.getBetreuungModel().datumBestaetigung = DateUtil.today();\n\n            for (let i: number = 0; i < this.getBetreuungspensen().length; i++) {\n                this.getBetreuungspensum(i).betreuungspensumJA.pensum = 0;\n                this.getBetreuungspensum(i).betreuungspensumJA.nichtEingetreten = true;\n            }\n            this.getBetreuungModel().erweiterteBeduerfnisse = false;\n\n            this.save(TSBetreuungsstatus.STORNIERT, 'pendenzenInstitution', undefined);\n        }\n    }\n\n    public saveSchulamt(): void {\n        if (this.isGesuchValid()) {\n            this.save(TSBetreuungsstatus.SCHULAMT, 'gesuch.betreuungen', {gesuchId: this.getGesuchId()});\n        }\n    }\n\n    /**\n     * Returns true when the user is allowed to edit the content. This happens when the status is AUSSTEHEHND\n     * or SCHULAMT and we are not yet in the KorrekturmodusJugendamt\n     * @returns {boolean}\n     */\n    public isEnabled(): boolean {\n        if (this.getBetreuungModel()) {\n            return !this.getBetreuungModel().hasVorgaenger()\n                && (this.isBetreuungsstatus(TSBetreuungsstatus.AUSSTEHEND) || (this.isBetreuungsstatus(TSBetreuungsstatus.SCHULAMT)\n                && !this.isKorrekturModusJugendamt()));\n        }\n        return false;\n    }\n\n    public isBetreuungsstatusWarten(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.WARTEN);\n    }\n\n    public isBetreuungsstatusAbgewiesen(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.ABGEWIESEN);\n    }\n\n    public isBetreuungsstatusBestaetigt(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.BESTAETIGT);\n    }\n\n    public isBetreuungsstatusNichtEingetreten(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.NICHT_EINGETRETEN);\n    }\n\n    public isStorniert(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.STORNIERT);\n    }\n\n    public isBetreuungsstatusAusstehend(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.AUSSTEHEND);\n    }\n\n    public isBetreuungsstatusSchulamt(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.SCHULAMT);\n    }\n\n    public isBetreuungsstatusStorniert(): boolean {\n        return this.isBetreuungsstatus(TSBetreuungsstatus.STORNIERT);\n    }\n\n    private isBetreuungsstatus(status: TSBetreuungsstatus): boolean {\n        if (this.getBetreuungModel()) {\n            return this.getBetreuungModel().betreuungsstatus === status;\n        }\n        return false;\n    }\n\n    public isTagesschule(): boolean {\n        return this.isBetreuungsangebottyp(TSBetreuungsangebotTyp.TAGESSCHULE);\n    }\n\n    public isTageseltern(): boolean {\n        return this.isBetreuungsangebottyp(TSBetreuungsangebotTyp.TAGESELTERN_KLEINKIND) ||\n            this.isBetreuungsangebottyp(TSBetreuungsangebotTyp.TAGESELTERN_SCHULKIND);\n    }\n\n    private isBetreuungsangebottyp(betAngTyp: TSBetreuungsangebotTyp): boolean {\n        if (this.betreuungsangebot) {\n            return this.betreuungsangebot.key === TSBetreuungsangebotTyp[betAngTyp];\n        }\n        return false;\n    }\n\n    /**\n     * Erweiterte Beduerfnisse wird nur beim Institutionen oder Traegerschaften eingeblendet oder wenn das Feld schon als true gesetzt ist\n     * ACHTUNG: Hier benutzen wir die Direktive dv-show-element nicht, da es unterschiedliche Bedingungen für jede Rolle gibt.\n     * @returns {boolean}\n     */\n    public showErweiterteBeduerfnisse(): boolean {\n        return this.authServiceRS.isOneOfRoles(TSRoleUtil.getTraegerschaftInstitutionRoles())\n            || this.getBetreuungModel().erweiterteBeduerfnisse === true;\n    }\n\n    public showFalscheAngaben(): boolean {\n        return (this.isBetreuungsstatusBestaetigt() || this.isBetreuungsstatusAbgewiesen())\n            && !this.isGesuchReadonly() && !this.isFromMutation();\n    }\n\n    public showAngabenKorrigieren(): boolean {\n        return (this.isBetreuungsstatusBestaetigt() || this.isBetreuungsstatusAbgewiesen() || this.isBetreuungsstatusStorniert())\n            && !this.isGesuchReadonly() && this.isFromMutation();\n    }\n\n    public isFromMutation(): boolean {\n        if (this.getBetreuungModel()) {\n            if (this.getBetreuungModel().vorgaengerId) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public showAngabeKorrigieren(): boolean {\n        return (this.isBetreuungsstatusBestaetigt() || this.isBetreuungsstatusAbgewiesen())\n            && !this.isGesuchReadonly() && this.isFromMutation();\n    }\n\n    public mutationsmeldungErstellen(): void {\n        //create dummy copy of model\n        this.mutationsmeldungModel = angular.copy(this.getBetreuungModel());\n        this.isMutationsmeldungStatus = true;\n    }\n\n    /**\n     * Mutationsmeldungen werden nur Betreuungen erlaubt, die verfuegt sind oder bereits irgendwann\n     * verfuegt wurden bzw. ein vorgaengerId haben. Ausserdem muss es sich um das letzte bzw. neueste Gesuch handeln\n     */\n    public isMutationsmeldungAllowed(): boolean {\n        return ((this.isMutation() && (this.getBetreuungModel().vorgaengerId || this.getBetreuungModel().betreuungsstatus === TSBetreuungsstatus.VERFUEGT))\n            || (!this.isMutation() && isVerfuegtOrSTV(this.gesuchModelManager.getGesuch().status) && this.getBetreuungModel().betreuungsstatus === TSBetreuungsstatus.VERFUEGT))\n            && this.getBetreuungModel().betreuungsstatus !== TSBetreuungsstatus.WARTEN\n            && this.gesuchModelManager.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus.AKTIV\n            && this.isNewestGesuch\n            && this.gesuchModelManager.getGesuch().gesperrtWegenBeschwerde !== true;\n    }\n\n    public mutationsmeldungSenden(): void {\n        // send mutationsmeldung (dummy copy)\n        if (this.isGesuchValid() && this.mutationsmeldungModel) {\n            this.dvDialog.showDialog(removeDialogTemplate, RemoveDialogController, {\n                title: 'MUTATIONSMELDUNG_CONFIRMATION',\n                deleteText: 'MUTATIONSMELDUNG_BESCHREIBUNG',\n                parentController: undefined,\n                elementID: undefined\n            }).then(() => {   //User confirmed removal\n                this.mitteilungRS.sendbetreuungsmitteilung(this.gesuchModelManager.getGesuch().fall,\n                    this.mutationsmeldungModel).then((response) => {\n\n                    this.form.$setUntouched();\n                    this.form.$setPristine();\n                    // reset values. is needed??????\n                    this.isMutationsmeldungStatus = false;\n                    this.mutationsmeldungModel = undefined;\n                    this.$state.go('gesuch.betreuungen', {gesuchId: this.getGesuchId()});\n                });\n            });\n        }\n    }\n\n    /**\n     * Prueft dass das Objekt existingMutationsMeldung existiert und dass es ein sentDatum hat. Das wird gebraucht,\n     * um zu vermeiden, dass ein leeres Objekt als gueltiges Objekt erkannt wird.\n     * Ausserdem muss die Meldung nicht applied sein und nicht den Status ERLEDIGT haben\n     */\n    public showExistingBetreuungsmitteilungInfoBox(): boolean {\n        return this.existingMutationsMeldung !== undefined && this.existingMutationsMeldung !== null\n            && this.existingMutationsMeldung.sentDatum !== undefined && this.existingMutationsMeldung.sentDatum !== null\n            && this.existingMutationsMeldung.applied !== true && !this.existingMutationsMeldung.isErledigt();\n    }\n\n    public getDatumLastBetreuungsmitteilung(): string {\n        if (this.showExistingBetreuungsmitteilungInfoBox()) {\n            return DateUtil.momentToLocalDateFormat(this.existingMutationsMeldung.sentDatum, 'DD.MM.YYYY');\n        }\n        return '';\n    }\n\n    public getTimeLastBetreuungsmitteilung(): string {\n        if (this.showExistingBetreuungsmitteilungInfoBox()) {\n            return DateUtil.momentToLocalDateTimeFormat(this.existingMutationsMeldung.sentDatum, 'HH:mm');\n        }\n        return '';\n    }\n\n    public openExistingBetreuungsmitteilung(): void {\n        this.$state.go('gesuch.mitteilung', {\n            fallId: this.gesuchModelManager.getGesuch().fall.id,\n            gesuchId: this.gesuchModelManager.getGesuch().id,\n            betreuungId: this.getBetreuungModel().id,\n            mitteilungId: this.existingMutationsMeldung.id\n        });\n    }\n\n    /**\n     * Sucht die neueste Betreuungsmitteilung fuer die aktuelle Betreuung. Da es nur fuer die Rollen\n     * INST und TRAEG relevant ist, wird es nur fuer diese Rollen geholt\n     */\n    private findExistingBetreuungsmitteilung() {\n        if (!this.getBetreuungModel().isNew() && this.authServiceRS.isOneOfRoles(TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) {\n            this.mitteilungRS.getNewestBetreuungsmitteilung(this.getBetreuungModel().id).then((response: TSBetreuungsmitteilung) => {\n                this.existingMutationsMeldung = response;\n            });\n        }\n    }\n}\n"]}]}
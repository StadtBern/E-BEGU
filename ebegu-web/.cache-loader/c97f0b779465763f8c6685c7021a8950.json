{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts","mtime":1518535855216},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * This directive allows a filter and sorting configuration to be saved after leaving the table.\n     * The information will be stored in an angular-service, whi\n     */\n    var DVSTPersistAntraege = /** @class */ (function () {\n        /* @ngInject */\n        function DVSTPersistAntraege(userRS, institutionRS, dVsTPersistService) {\n            var _this = this;\n            this.userRS = userRS;\n            this.institutionRS = institutionRS;\n            this.dVsTPersistService = dVsTPersistService;\n            this.restrict = 'A';\n            this.require = ['^stTable', '^dvAntragList'];\n            this.link = function (scope, element, attrs, ctrlArray) {\n                var nameSpace = attrs.dvStPersistAntraege;\n                var stTableCtrl = ctrlArray[0];\n                var antragListController = ctrlArray[1];\n                //save the table state every time it changes\n                scope.$watch(function () {\n                    return stTableCtrl.tableState();\n                }, function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        // sessionStorage.setItem(nameSpace, JSON.stringify(newValue));\n                        dVsTPersistService.saveData(nameSpace, newValue);\n                    }\n                }, true);\n                // if (sessionStorage.getItem(nameSpace)) {\n                // let savedState = JSON.parse(sessionStorage.getItem(nameSpace));\n                //fetch the table state when the directive is loaded\n                var savedState = dVsTPersistService.loadData(nameSpace);\n                if (savedState) {\n                    if (savedState.search && savedState.search.predicateObject) {\n                        antragListController.selectedAntragTyp = savedState.search.predicateObject.antragTyp;\n                        antragListController.selectedGesuchsperiode = savedState.search.predicateObject.gesuchsperiodeString;\n                        antragListController.selectedAntragStatus = savedState.search.predicateObject.status;\n                        antragListController.selectedBetreuungsangebotTyp = savedState.search.predicateObject.angebote;\n                        _this.setInstitutionFromName(antragListController, savedState.search.predicateObject.institutionen);\n                        antragListController.selectedFallNummer = savedState.search.predicateObject.fallNummer;\n                        antragListController.selectedFamilienName = savedState.search.predicateObject.familienName;\n                        antragListController.selectedKinder = savedState.search.predicateObject.kinder;\n                        antragListController.selectedAenderungsdatum = savedState.search.predicateObject.aenderungsdatum;\n                        antragListController.selectedDokumenteHochgeladen = savedState.search.predicateObject.dokumenteHochgeladen;\n                        antragListController.selectedEingangsdatumSTV = savedState.search.predicateObject.eingangsdatumSTV;\n                        _this.setUserFromName(antragListController, savedState.search.predicateObject.verantwortlicher);\n                    }\n                    var tableState = stTableCtrl.tableState();\n                    angular.extend(tableState, savedState);\n                    stTableCtrl.pipe();\n                }\n            };\n        }\n        /**\n         * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n         * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n         * with need the complete object and not only its Fullname.\n         */\n        DVSTPersistAntraege.prototype.setUserFromName = function (antragListController, verantwortlicherFullname) {\n            if (verantwortlicherFullname && antragListController) {\n                this.userRS.getBenutzerJAorAdmin().then(function (response) {\n                    var userList = angular.copy(response);\n                    if (userList) {\n                        for (var i = 0; i < userList.length; i++) {\n                            if (userList[i] && userList[i].getFullName() === verantwortlicherFullname) {\n                                antragListController.selectedVerantwortlicher = userList[i];\n                                break;\n                            }\n                        }\n                    }\n                });\n            }\n        };\n        /**\n         * Extracts the Institution from the institutionList of the controller using the name that had been saved in the\n         * filter. This is needed because the filter saves the name and not the object.\n         */\n        DVSTPersistAntraege.prototype.setInstitutionFromName = function (antragListController, institution) {\n            if (institution && antragListController) {\n                this.institutionRS.getInstitutionenForCurrentBenutzer().then(function (institutionList) {\n                    if (institutionList) {\n                        for (var i = 0; i < institutionList.length; i++) {\n                            if (institutionList[i].name === institution) {\n                                antragListController.selectedInstitution = institutionList[i];\n                                break;\n                            }\n                        }\n                    }\n                });\n            }\n        };\n        DVSTPersistAntraege.factory = function () {\n            var directive = function (userRS, institutionRS, dVsTPersistService) { return new DVSTPersistAntraege(userRS, institutionRS, dVsTPersistService); };\n            directive.$inject = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n            return directive;\n        };\n        DVSTPersistAntraege.$inject = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n        return DVSTPersistAntraege;\n    }());\n    exports.default = DVSTPersistAntraege;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IAttributes, IAugmentedJQuery, IDirective, IDirectiveFactory, IDirectiveLinkFn, IScope} from 'angular';\nimport {DVAntragListController} from '../../component/dv-antrag-list/dv-antrag-list';\nimport TSUser from '../../../models/TSUser';\nimport UserRS from '../../service/userRS.rest';\nimport {InstitutionRS} from '../../service/institutionRS.rest';\nimport {DVsTPersistService} from '../../service/dVsTPersistService';\n\n/**\n * This directive allows a filter and sorting configuration to be saved after leaving the table.\n * The information will be stored in an angular-service, whi\n */\nexport default class DVSTPersistAntraege implements IDirective {\n    static $inject: string[] = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n\n    restrict = 'A';\n    require = ['^stTable', '^dvAntragList'];\n    link: IDirectiveLinkFn;\n\n    /* @ngInject */\n    constructor(private userRS: UserRS, private institutionRS: InstitutionRS, private dVsTPersistService: DVsTPersistService) {\n        this.link = (scope: IScope, element: IAugmentedJQuery, attrs: IAttributes, ctrlArray: any) => {\n            let nameSpace: string = attrs.dvStPersistAntraege;\n            let stTableCtrl: any = ctrlArray[0];\n            let antragListController: DVAntragListController = ctrlArray[1];\n\n            //save the table state every time it changes\n            scope.$watch(function () {\n                return stTableCtrl.tableState();\n            }, function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    // sessionStorage.setItem(nameSpace, JSON.stringify(newValue));\n                    dVsTPersistService.saveData(nameSpace, newValue);\n                }\n            }, true);\n\n            // if (sessionStorage.getItem(nameSpace)) {\n            // let savedState = JSON.parse(sessionStorage.getItem(nameSpace));\n\n            //fetch the table state when the directive is loaded\n            let savedState = dVsTPersistService.loadData(nameSpace);\n            if (savedState) {\n                if (savedState.search && savedState.search.predicateObject) { //update all objects of the model for the filters\n                    antragListController.selectedAntragTyp = savedState.search.predicateObject.antragTyp;\n                    antragListController.selectedGesuchsperiode = savedState.search.predicateObject.gesuchsperiodeString;\n                    antragListController.selectedAntragStatus = savedState.search.predicateObject.status;\n                    antragListController.selectedBetreuungsangebotTyp = savedState.search.predicateObject.angebote;\n                    this.setInstitutionFromName(antragListController, savedState.search.predicateObject.institutionen);\n                    antragListController.selectedFallNummer = savedState.search.predicateObject.fallNummer;\n                    antragListController.selectedFamilienName = savedState.search.predicateObject.familienName;\n                    antragListController.selectedKinder = savedState.search.predicateObject.kinder;\n                    antragListController.selectedAenderungsdatum = savedState.search.predicateObject.aenderungsdatum;\n                    antragListController.selectedDokumenteHochgeladen = savedState.search.predicateObject.dokumenteHochgeladen;\n                    antragListController.selectedEingangsdatumSTV = savedState.search.predicateObject.eingangsdatumSTV;\n                    this.setUserFromName(antragListController, savedState.search.predicateObject.verantwortlicher);\n                }\n                let tableState = stTableCtrl.tableState();\n\n                angular.extend(tableState, savedState);\n                stTableCtrl.pipe();\n\n            }\n        };\n    }\n\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    private setUserFromName(antragListController: DVAntragListController, verantwortlicherFullname: string): void {\n        if (verantwortlicherFullname && antragListController) {\n            this.userRS.getBenutzerJAorAdmin().then((response: any) => {\n                let userList: TSUser[] = angular.copy(response);\n                if (userList) {\n                    for (let i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherFullname) {\n                            antragListController.selectedVerantwortlicher = userList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Extracts the Institution from the institutionList of the controller using the name that had been saved in the\n     * filter. This is needed because the filter saves the name and not the object.\n     */\n    private setInstitutionFromName(antragListController: DVAntragListController, institution: string): void {\n        if (institution && antragListController) {\n            this.institutionRS.getInstitutionenForCurrentBenutzer().then((institutionList: any) => {\n                if (institutionList) {\n                    for (let i = 0; i < institutionList.length; i++) {\n                        if (institutionList[i].name === institution) {\n                            antragListController.selectedInstitution = institutionList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    static factory(): IDirectiveFactory {\n        const directive = (userRS: any, institutionRS: any, dVsTPersistService: any) => new DVSTPersistAntraege(userRS, institutionRS, dVsTPersistService);\n        directive.$inject = ['UserRS', 'InstitutionRS', 'DVsTPersistService'];\n        return directive;\n    }\n}\n\n"]}]}
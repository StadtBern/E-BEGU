{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts","mtime":1518612532790},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSRole_1 = require(\"../../../models/enums/TSRole\");\n/**\n * This directive allows a filter and sorting configuration to be saved after leaving the table.\n * The information will be stored in an angular-service, whi\n */\nvar DVSTPersistAntraege = /** @class */ (function () {\n    /* @ngInject */\n    function DVSTPersistAntraege(userRS, institutionRS, authServiceRS, dVsTPersistService) {\n        var _this = this;\n        this.userRS = userRS;\n        this.institutionRS = institutionRS;\n        this.authServiceRS = authServiceRS;\n        this.dVsTPersistService = dVsTPersistService;\n        this.restrict = 'A';\n        this.require = ['^stTable', '^dvAntragList'];\n        this.link = function (scope, element, attrs, ctrlArray) {\n            var nameSpace = attrs.dvStPersistAntraege;\n            var stTableCtrl = ctrlArray[0];\n            var antragListController = ctrlArray[1];\n            //save the table state every time it changes\n            scope.$watch(function () {\n                return stTableCtrl.tableState();\n            }, function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    // sessionStorage.setItem(nameSpace, JSON.stringify(newValue));\n                    dVsTPersistService.saveData(nameSpace, newValue);\n                }\n            }, true);\n            // if (sessionStorage.getItem(nameSpace)) {\n            // let savedState = JSON.parse(sessionStorage.getItem(nameSpace));\n            //fetch the table state when the directive is loaded\n            var savedState = dVsTPersistService.loadData(nameSpace);\n            savedState = _this.setCurrentUserAsVerantwortlicher(antragListController, savedState);\n            if (savedState) {\n                if (savedState.search && savedState.search.predicateObject) {\n                    antragListController.selectedAntragTyp = savedState.search.predicateObject.antragTyp;\n                    antragListController.selectedGesuchsperiode = savedState.search.predicateObject.gesuchsperiodeString;\n                    antragListController.selectedAntragStatus = savedState.search.predicateObject.status;\n                    antragListController.selectedBetreuungsangebotTyp = savedState.search.predicateObject.angebote;\n                    _this.setInstitutionFromName(antragListController, savedState.search.predicateObject.institutionen);\n                    antragListController.selectedFallNummer = savedState.search.predicateObject.fallNummer;\n                    antragListController.selectedFamilienName = savedState.search.predicateObject.familienName;\n                    antragListController.selectedKinder = savedState.search.predicateObject.kinder;\n                    antragListController.selectedAenderungsdatum = savedState.search.predicateObject.aenderungsdatum;\n                    antragListController.selectedEingangsdatum = savedState.search.predicateObject.eingangsdatum;\n                    antragListController.selectedDokumenteHochgeladen = savedState.search.predicateObject.dokumenteHochgeladen;\n                    antragListController.selectedEingangsdatumSTV = savedState.search.predicateObject.eingangsdatumSTV;\n                    _this.setVerantwortlicherFromName(antragListController, savedState.search.predicateObject.verantwortlicher);\n                    _this.setVerantwortlicherSCHFromName(antragListController, savedState.search.predicateObject.verantwortlicherSCH);\n                }\n                var tableState = stTableCtrl.tableState();\n                angular.extend(tableState, savedState);\n                stTableCtrl.pipe();\n            }\n        };\n    }\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    DVSTPersistAntraege.prototype.setVerantwortlicherFromName = function (antragListController, verantwortlicherFullname) {\n        if (verantwortlicherFullname && antragListController) {\n            this.userRS.getBenutzerJAorAdmin().then(function (response) {\n                var userList = angular.copy(response);\n                if (userList) {\n                    for (var i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherFullname) {\n                            antragListController.selectedVerantwortlicher = userList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    DVSTPersistAntraege.prototype.setVerantwortlicherSCHFromName = function (antragListController, verantwortlicherSCHFullname) {\n        if (verantwortlicherSCHFullname && antragListController) {\n            this.userRS.getBenutzerSCHorAdminSCH().then(function (response) {\n                var userList = angular.copy(response);\n                if (userList) {\n                    for (var i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherSCHFullname) {\n                            antragListController.selectedVerantwortlicherSCH = userList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Extracts the Institution from the institutionList of the controller using the name that had been saved in the\n     * filter. This is needed because the filter saves the name and not the object.\n     */\n    DVSTPersistAntraege.prototype.setInstitutionFromName = function (antragListController, institution) {\n        if (institution && antragListController) {\n            this.institutionRS.getInstitutionenForCurrentBenutzer().then(function (institutionList) {\n                if (institutionList) {\n                    for (var i = 0; i < institutionList.length; i++) {\n                        if (institutionList[i].name === institution) {\n                            antragListController.selectedInstitution = institutionList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    };\n    DVSTPersistAntraege.factory = function () {\n        var directive = function (userRS, institutionRS, authServiceRS, dVsTPersistService) {\n            return new DVSTPersistAntraege(userRS, institutionRS, authServiceRS, dVsTPersistService);\n        };\n        directive.$inject = ['UserRS', 'InstitutionRS', 'AuthServiceRS', 'DVsTPersistService'];\n        return directive;\n    };\n    /**\n     * Setzt den aktuellen Benutzer als selectedVerantwotlicher wenn:\n     * - es eine pendenzenListe ist: ctrl.pendenz===true\n     * - es noch nicht gesetzt wurde, d.h. nichts war ausgewaehlt\n     */\n    DVSTPersistAntraege.prototype.setCurrentUserAsVerantwortlicher = function (antragListController, savedState) {\n        var savedStateToReturn = angular.copy(savedState);\n        if (antragListController.pendenz) {\n            if (!savedStateToReturn) {\n                savedStateToReturn = { search: { predicateObject: this.extractVerantwortlicherFullName() } };\n            }\n            if (!savedStateToReturn.search.predicateObject) {\n                savedStateToReturn.search.predicateObject = this.extractVerantwortlicherFullName();\n            }\n            if (!savedStateToReturn.search.predicateObject.verantwortlicher) {\n                if (this.authServiceRS.getPrincipal().role === TSRole_1.TSRole.ADMINISTRATOR_SCHULAMT || this.authServiceRS.getPrincipal().role === TSRole_1.TSRole.SCHULAMT) {\n                    savedStateToReturn.search.predicateObject.verantwortlicherSCH = this.authServiceRS.getPrincipal().getFullName();\n                }\n                else {\n                    savedStateToReturn.search.predicateObject.verantwortlicher = this.authServiceRS.getPrincipal().getFullName();\n                }\n            }\n        }\n        return savedStateToReturn;\n    };\n    DVSTPersistAntraege.prototype.extractVerantwortlicherFullName = function () {\n        if (this.authServiceRS.getPrincipal().role === TSRole_1.TSRole.ADMINISTRATOR_SCHULAMT || this.authServiceRS.getPrincipal().role === TSRole_1.TSRole.SCHULAMT) {\n            return { verantwortlicherSCH: this.authServiceRS.getPrincipal().getFullName() };\n        }\n        else {\n            return { verantwortlicher: this.authServiceRS.getPrincipal().getFullName() };\n        }\n    };\n    DVSTPersistAntraege.$inject = ['UserRS', 'InstitutionRS', 'AuthServiceRS', 'DVsTPersistService'];\n    return DVSTPersistAntraege;\n}());\nexports.default = DVSTPersistAntraege;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-st-persist-antraege/dv-st-persist-antraege.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IAttributes, IAugmentedJQuery, IDirective, IDirectiveFactory, IDirectiveLinkFn, IScope} from 'angular';\nimport {DVAntragListController} from '../../component/dv-antrag-list/dv-antrag-list';\nimport TSUser from '../../../models/TSUser';\nimport UserRS from '../../service/userRS.rest';\nimport {InstitutionRS} from '../../service/institutionRS.rest';\nimport {DVsTPersistService} from '../../service/dVsTPersistService';\nimport AuthServiceRS from '../../../authentication/service/AuthServiceRS.rest';\nimport {TSRole} from '../../../models/enums/TSRole';\n\n/**\n * This directive allows a filter and sorting configuration to be saved after leaving the table.\n * The information will be stored in an angular-service, whi\n */\nexport default class DVSTPersistAntraege implements IDirective {\n    static $inject: string[] = ['UserRS', 'InstitutionRS', 'AuthServiceRS', 'DVsTPersistService'];\n\n    restrict = 'A';\n    require = ['^stTable', '^dvAntragList'];\n    link: IDirectiveLinkFn;\n\n    /* @ngInject */\n    constructor(private userRS: UserRS, private institutionRS: InstitutionRS, private authServiceRS: AuthServiceRS,\n                private dVsTPersistService: DVsTPersistService) {\n        this.link = (scope: IScope, element: IAugmentedJQuery, attrs: IAttributes, ctrlArray: any) => {\n            let nameSpace: string = attrs.dvStPersistAntraege;\n            let stTableCtrl: any = ctrlArray[0];\n            let antragListController: DVAntragListController = ctrlArray[1];\n\n\n            //save the table state every time it changes\n            scope.$watch(function () {\n                return stTableCtrl.tableState();\n            }, function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    // sessionStorage.setItem(nameSpace, JSON.stringify(newValue));\n                    dVsTPersistService.saveData(nameSpace, newValue);\n                }\n            }, true);\n\n            // if (sessionStorage.getItem(nameSpace)) {\n            // let savedState = JSON.parse(sessionStorage.getItem(nameSpace));\n\n            //fetch the table state when the directive is loaded\n            let savedState = dVsTPersistService.loadData(nameSpace);\n            savedState = this.setCurrentUserAsVerantwortlicher(antragListController, savedState);\n            if (savedState) {\n                if (savedState.search && savedState.search.predicateObject) { //update all objects of the model for the filters\n                    antragListController.selectedAntragTyp = savedState.search.predicateObject.antragTyp;\n                    antragListController.selectedGesuchsperiode = savedState.search.predicateObject.gesuchsperiodeString;\n                    antragListController.selectedAntragStatus = savedState.search.predicateObject.status;\n                    antragListController.selectedBetreuungsangebotTyp = savedState.search.predicateObject.angebote;\n                    this.setInstitutionFromName(antragListController, savedState.search.predicateObject.institutionen);\n                    antragListController.selectedFallNummer = savedState.search.predicateObject.fallNummer;\n                    antragListController.selectedFamilienName = savedState.search.predicateObject.familienName;\n                    antragListController.selectedKinder = savedState.search.predicateObject.kinder;\n                    antragListController.selectedAenderungsdatum = savedState.search.predicateObject.aenderungsdatum;\n                    antragListController.selectedEingangsdatum = savedState.search.predicateObject.eingangsdatum;\n                    antragListController.selectedDokumenteHochgeladen = savedState.search.predicateObject.dokumenteHochgeladen;\n                    antragListController.selectedEingangsdatumSTV = savedState.search.predicateObject.eingangsdatumSTV;\n                    this.setVerantwortlicherFromName(antragListController, savedState.search.predicateObject.verantwortlicher);\n                    this.setVerantwortlicherSCHFromName(antragListController, savedState.search.predicateObject.verantwortlicherSCH);\n                }\n                let tableState = stTableCtrl.tableState();\n\n                angular.extend(tableState, savedState);\n                stTableCtrl.pipe();\n\n            }\n        };\n    }\n\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    private setVerantwortlicherFromName(antragListController: DVAntragListController, verantwortlicherFullname: string): void {\n        if (verantwortlicherFullname && antragListController) {\n            this.userRS.getBenutzerJAorAdmin().then((response: any) => {\n                let userList: TSUser[] = angular.copy(response);\n                if (userList) {\n                    for (let i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherFullname) {\n                            antragListController.selectedVerantwortlicher = userList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Extracts the user out of her name. This method is needed because the filter saves the user using its name\n     * while the dropdownlist is constructed using the object TSUser. So in order to be able to select the right user\n     * with need the complete object and not only its Fullname.\n     */\n    private setVerantwortlicherSCHFromName(antragListController: DVAntragListController, verantwortlicherSCHFullname: string): void {\n        if (verantwortlicherSCHFullname && antragListController) {\n            this.userRS.getBenutzerSCHorAdminSCH().then((response: any) => {\n                let userList: TSUser[] = angular.copy(response);\n                if (userList) {\n                    for (let i = 0; i < userList.length; i++) {\n                        if (userList[i] && userList[i].getFullName() === verantwortlicherSCHFullname) {\n                            antragListController.selectedVerantwortlicherSCH = userList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Extracts the Institution from the institutionList of the controller using the name that had been saved in the\n     * filter. This is needed because the filter saves the name and not the object.\n     */\n    private setInstitutionFromName(antragListController: DVAntragListController, institution: string): void {\n        if (institution && antragListController) {\n            this.institutionRS.getInstitutionenForCurrentBenutzer().then((institutionList: any) => {\n                if (institutionList) {\n                    for (let i = 0; i < institutionList.length; i++) {\n                        if (institutionList[i].name === institution) {\n                            antragListController.selectedInstitution = institutionList[i];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    static factory(): IDirectiveFactory {\n        const directive = (userRS: any, institutionRS: any, authServiceRS: any, dVsTPersistService: any) =>\n            new DVSTPersistAntraege(userRS, institutionRS, authServiceRS, dVsTPersistService);\n        directive.$inject = ['UserRS', 'InstitutionRS', 'AuthServiceRS', 'DVsTPersistService'];\n        return directive;\n    }\n\n    /**\n     * Setzt den aktuellen Benutzer als selectedVerantwotlicher wenn:\n     * - es eine pendenzenListe ist: ctrl.pendenz===true\n     * - es noch nicht gesetzt wurde, d.h. nichts war ausgewaehlt\n     */\n    private setCurrentUserAsVerantwortlicher(antragListController: DVAntragListController, savedState: any): any {\n        let savedStateToReturn: any = angular.copy(savedState);\n        if (antragListController.pendenz) {\n            if (!savedStateToReturn) {\n                savedStateToReturn = {search: {predicateObject: this.extractVerantwortlicherFullName()}};\n            }\n            if (!savedStateToReturn.search.predicateObject) {\n                savedStateToReturn.search.predicateObject = this.extractVerantwortlicherFullName();\n            }\n            if (!savedStateToReturn.search.predicateObject.verantwortlicher) {\n                if (this.authServiceRS.getPrincipal().role === TSRole.ADMINISTRATOR_SCHULAMT || this.authServiceRS.getPrincipal().role === TSRole.SCHULAMT) {\n                    savedStateToReturn.search.predicateObject.verantwortlicherSCH = this.authServiceRS.getPrincipal().getFullName();\n                } else { //JA\n                    savedStateToReturn.search.predicateObject.verantwortlicher = this.authServiceRS.getPrincipal().getFullName();\n                }\n            }\n        }\n        return savedStateToReturn;\n    }\n\n    private extractVerantwortlicherFullName() {\n        if (this.authServiceRS.getPrincipal().role === TSRole.ADMINISTRATOR_SCHULAMT || this.authServiceRS.getPrincipal().role === TSRole.SCHULAMT) {\n            return {verantwortlicherSCH: this.authServiceRS.getPrincipal().getFullName()};\n        } else { //JA\n            return {verantwortlicher: this.authServiceRS.getPrincipal().getFullName()};\n        }\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/dashboard/gesuchstellerDashboardView.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/dashboard/gesuchstellerDashboardView.ts","mtime":1518009464607},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSAntragStatus_1 = require(\"../../../models/enums/TSAntragStatus\");\nvar TSEingangsart_1 = require(\"../../../models/enums/TSEingangsart\");\nvar TSGesuchBetreuungenStatus_1 = require(\"../../../models/enums/TSGesuchBetreuungenStatus\");\nvar TSRoleUtil_1 = require(\"../../../utils/TSRoleUtil\");\nvar template = require('./gesuchstellerDashboardView.html');\nrequire('./gesuchstellerDashboardView.less');\nvar GesuchstellerDashboardListViewConfig = /** @class */ (function () {\n    function GesuchstellerDashboardListViewConfig() {\n        this.transclude = false;\n        this.template = template;\n        this.controller = GesuchstellerDashboardListViewController;\n        this.controllerAs = 'vm';\n    }\n    return GesuchstellerDashboardListViewConfig;\n}());\nexports.GesuchstellerDashboardListViewConfig = GesuchstellerDashboardListViewConfig;\nvar GesuchstellerDashboardListViewController = /** @class */ (function () {\n    function GesuchstellerDashboardListViewController($state, $log, authServiceRS, searchRS, ebeguUtil, gesuchsperiodeRS, fallRS, $translate, mitteilungRS, gesuchRS) {\n        this.$state = $state;\n        this.$log = $log;\n        this.authServiceRS = authServiceRS;\n        this.searchRS = searchRS;\n        this.ebeguUtil = ebeguUtil;\n        this.gesuchsperiodeRS = gesuchsperiodeRS;\n        this.fallRS = fallRS;\n        this.$translate = $translate;\n        this.mitteilungRS = mitteilungRS;\n        this.gesuchRS = gesuchRS;\n        this.antragList = [];\n        this.totalResultCount = '-';\n        this.mapOfNewestAntraege = {}; // In dieser Map wird pro GP die ID des neuesten Gesuchs gespeichert\n    }\n    GesuchstellerDashboardListViewController.prototype.$onInit = function () {\n        this.initViewModel();\n    };\n    GesuchstellerDashboardListViewController.prototype.initViewModel = function () {\n        var _this = this;\n        this.updateAntragList().then(function () {\n            _this.getAmountNewMitteilungen();\n            _this.updateActiveGesuchsperiodenList();\n        });\n    };\n    GesuchstellerDashboardListViewController.prototype.updateAntragList = function () {\n        var _this = this;\n        return this.fallRS.findFallByCurrentBenutzerAsBesitzer().then(function (existingFall) {\n            if (existingFall) {\n                _this.fallId = existingFall.id;\n                return _this.searchRS.getAntraegeGesuchstellerList().then(function (response) {\n                    _this.antragList = angular.copy(response);\n                    return _this.antragList;\n                });\n            }\n            else {\n                return _this.fallRS.createFallForCurrentBenutzerAsBesitzer().then(function (createdFall) {\n                    if (createdFall) {\n                        _this.fallId = createdFall.id;\n                    }\n                    return _this.antragList;\n                });\n            }\n        });\n    };\n    GesuchstellerDashboardListViewController.prototype.getAmountNewMitteilungen = function () {\n        var _this = this;\n        this.mitteilungRS.getAmountNewMitteilungenForCurrentRolle(this.fallId).then(function (response) {\n            _this.amountNewMitteilungen = response;\n        });\n    };\n    GesuchstellerDashboardListViewController.prototype.updateActiveGesuchsperiodenList = function () {\n        var _this = this;\n        this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then(function (response) {\n            _this._activeGesuchsperiodenList = angular.copy(response);\n            var _loop_1 = function (gp) {\n                _this.gesuchRS.getIdOfNewestGesuch(gp.id, _this.fallId).then(function (response) {\n                    _this.mapOfNewestAntraege[gp.id] = response;\n                });\n            };\n            // Jetzt sind sowohl die Gesuchsperioden wie die Gesuche des Falles geladen. Wir merken uns das jeweils neueste Gesuch pro Periode\n            for (var _i = 0, _a = _this._activeGesuchsperiodenList; _i < _a.length; _i++) {\n                var gp = _a[_i];\n                _loop_1(gp);\n            }\n        });\n    };\n    GesuchstellerDashboardListViewController.prototype.getActiveGesuchsperiodenList = function () {\n        return this._activeGesuchsperiodenList;\n    };\n    GesuchstellerDashboardListViewController.prototype.goToMitteilungenOeffen = function () {\n        this.$state.go('mitteilungen', {\n            fallId: this.fallId\n        });\n    };\n    GesuchstellerDashboardListViewController.prototype.getAntragList = function () {\n        return this.antragList;\n    };\n    GesuchstellerDashboardListViewController.prototype.displayAnsehenButton = function (periode) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    };\n    GesuchstellerDashboardListViewController.prototype.getNumberMitteilungen = function () {\n        return this.amountNewMitteilungen;\n    };\n    GesuchstellerDashboardListViewController.prototype.openAntrag = function (periode, ansehen) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status || ansehen) {\n                // Noch nicht freigegeben\n                this.$state.go('gesuch.fallcreation', { createNew: false, gesuchId: antrag.antragId });\n            }\n            else if (!TSAntragStatus_1.isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                // Alles ausser verfuegt und InBearbeitung\n                this.$state.go('gesuch.dokumente', { createNew: false, gesuchId: antrag.antragId });\n            }\n            else {\n                // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                // Es kann nur noch eine Mutation gemacht werden\n                this.$state.go('gesuch.mutation', {\n                    createMutation: true,\n                    eingangsart: TSEingangsart_1.TSEingangsart.ONLINE,\n                    gesuchId: antrag.antragId,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            }\n        }\n        else {\n            // Noch kein Antrag für die Gesuchsperiode vorhanden\n            if (this.antragList && this.antragList.length > 0) {\n                // Aber schon mindestens einer für eine frühere Periode\n                this.$state.go('gesuch.erneuerung', {\n                    createErneuerung: true,\n                    gesuchId: this.antragList[0].antragId,\n                    eingangsart: TSEingangsart_1.TSEingangsart.ONLINE,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            }\n            else {\n                // Dies ist das erste Gesuch\n                this.$state.go('gesuch.fallcreation', {\n                    createNew: true,\n                    eingangsart: TSEingangsart_1.TSEingangsart.ONLINE,\n                    gesuchId: null,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            }\n        }\n    };\n    GesuchstellerDashboardListViewController.prototype.createTagesschule = function (periode) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            this.$state.go('createAngebot', { type: 'TS', gesuchId: antrag.antragId });\n        }\n        else {\n            console.error('Fehler: kein Gesuch gefunden für Gesuchsperiode in createTagesschule');\n        }\n    };\n    GesuchstellerDashboardListViewController.prototype.createFerieninsel = function (periode) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            this.$state.go('createAngebot', { type: 'FI', gesuchId: antrag.antragId });\n        }\n        else {\n            console.error('Fehler: kein Gesuch gefunden für Gesuchsperiode in createFerieninsel');\n        }\n    };\n    GesuchstellerDashboardListViewController.prototype.showAnmeldungCreate = function (periode) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        return periode.hasTagesschulenAnmeldung() && !!antrag &&\n            antrag.status !== TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS &&\n            antrag.status !== TSAntragStatus_1.TSAntragStatus.FREIGABEQUITTUNG\n            && this.isNeuestAntragOfGesuchsperiode(periode, antrag);\n    };\n    GesuchstellerDashboardListViewController.prototype.getButtonText = function (periode) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                // Noch nicht freigegeben -> Text BEARBEITEN\n                return this.$translate.instant('GS_BEARBEITEN');\n            }\n            else if (!TSAntragStatus_1.isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                // Alles ausser verfuegt und InBearbeitung -> Text DOKUMENTE HOCHLADEN\n                return this.$translate.instant('GS_DOKUMENTE_HOCHLADEN');\n            }\n            else if (this.isNeuestAntragOfGesuchsperiode(periode, antrag)) {\n                // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                // Es kann nur noch eine Mutation gemacht werden -> Text MUTIEREN\n                return this.$translate.instant('GS_MUTIEREN');\n            }\n        }\n        else {\n            // Noch kein Antrag vorhanden -> Text GESUCH BEANTRAGEN\n            // this.$state.go('gesuch.fallcreation', {createNew: true, gesuchId: null});\n            return this.$translate.instant('GS_BEANTRAGEN');\n        }\n        return undefined;\n    };\n    GesuchstellerDashboardListViewController.prototype.editAntrag = function (antrag) {\n        if (antrag) {\n            if (TSAntragStatus_1.isAnyStatusOfVerfuegt(antrag.status)) {\n                this.$state.go('gesuch.verfuegen', { createNew: false, gesuchId: antrag.antragId });\n            }\n            else {\n                this.$state.go('gesuch.fallcreation', { createNew: false, gesuchId: antrag.antragId });\n            }\n        }\n    };\n    GesuchstellerDashboardListViewController.prototype.getAntragForGesuchsperiode = function (periode) {\n        // Die Antraege sind nach Laufnummer sortiert, d.h. der erste einer Periode ist immer der aktuellste\n        if (this.antragList) {\n            for (var _i = 0, _a = this.antragList; _i < _a.length; _i++) {\n                var antrag = _a[_i];\n                if (antrag.gesuchsperiodeGueltigAb.year() === periode.gueltigkeit.gueltigAb.year()) {\n                    return antrag;\n                }\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Status muss speziell uebersetzt werden damit Gesuchsteller nur \"In Bearbeitung\" sieht und nicht in \"Bearbeitung Gesuchsteller\"\n     */\n    GesuchstellerDashboardListViewController.prototype.translateStatus = function (antrag) {\n        var status = antrag.status;\n        var isUserGesuchsteller = this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles());\n        if (status === TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS && isUserGesuchsteller) {\n            if (TSGesuchBetreuungenStatus_1.TSGesuchBetreuungenStatus.ABGEWIESEN === antrag.gesuchBetreuungenStatus) {\n                return this.ebeguUtil.translateString(TSAntragStatus_1.TSAntragStatus[TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN]);\n            }\n            else if (TSGesuchBetreuungenStatus_1.TSGesuchBetreuungenStatus.WARTEN === antrag.gesuchBetreuungenStatus) {\n                return this.ebeguUtil.translateString(TSAntragStatus_1.TSAntragStatus[TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_WARTEN]);\n            }\n            return this.ebeguUtil.translateString(TSAntragStatus_1.IN_BEARBEITUNG_BASE_NAME);\n        }\n        if ((status === TSAntragStatus_1.TSAntragStatus.NUR_SCHULAMT)\n            && isUserGesuchsteller) {\n            return this.ebeguUtil.translateString('ABGESCHLOSSEN');\n        }\n        return this.ebeguUtil.translateString(TSAntragStatus_1.TSAntragStatus[status]);\n    };\n    /**\n     * JA und Mischgesuche -> verantwortlicher\n     * SCHGesuche -> verantwortlicherSCH (oder \"Schulamt\" wenn kein Verantwortlicher vorhanden\n     */\n    GesuchstellerDashboardListViewController.prototype.getHauptVerantwortlicherFullName = function (antrag) {\n        if (antrag) {\n            if (antrag.verantwortlicher) {\n                return antrag.verantwortlicher;\n            }\n            if (antrag.verantwortlicherSCH) {\n                return antrag.verantwortlicherSCH;\n            }\n            if (antrag.status === TSAntragStatus_1.TSAntragStatus.NUR_SCHULAMT) {\n                return this.ebeguUtil.translateString('NUR_SCHULAMT');\n            }\n        }\n        return '';\n    };\n    GesuchstellerDashboardListViewController.prototype.gesperrtWegenMutation = function (periode) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        return !!antrag && !this.isNeuestAntragOfGesuchsperiode(periode, antrag);\n    };\n    GesuchstellerDashboardListViewController.prototype.hasOnlyFerieninsel = function (periode) {\n        var antrag = this.getAntragForGesuchsperiode(periode);\n        return !!antrag && antrag.hasOnlyFerieninsel();\n    };\n    GesuchstellerDashboardListViewController.prototype.isNeuestAntragOfGesuchsperiode = function (periode, antrag) {\n        return antrag.antragId === this.mapOfNewestAntraege[periode.id];\n    };\n    GesuchstellerDashboardListViewController.$inject = ['$state', '$log', 'AuthServiceRS', 'SearchRS', 'EbeguUtil', 'GesuchsperiodeRS',\n        'FallRS', '$translate', 'MitteilungRS', 'GesuchRS'];\n    return GesuchstellerDashboardListViewController;\n}());\nexports.GesuchstellerDashboardListViewController = GesuchstellerDashboardListViewController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/dashboard/gesuchstellerDashboardView.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/dashboard/gesuchstellerDashboardView.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions} from 'angular';\nimport {IStateService} from 'angular-ui-router';\nimport AuthServiceRS from '../../../authentication/service/AuthServiceRS.rest';\nimport GesuchsperiodeRS from '../../../core/service/gesuchsperiodeRS.rest';\nimport MitteilungRS from '../../../core/service/mitteilungRS.rest';\nimport FallRS from '../../../gesuch/service/fallRS.rest';\nimport GesuchRS from '../../../gesuch/service/gesuchRS.rest';\nimport SearchRS from '../../../gesuch/service/searchRS.rest';\nimport {IN_BEARBEITUNG_BASE_NAME, isAnyStatusOfVerfuegt, TSAntragStatus} from '../../../models/enums/TSAntragStatus';\nimport {TSEingangsart} from '../../../models/enums/TSEingangsart';\nimport {TSGesuchBetreuungenStatus} from '../../../models/enums/TSGesuchBetreuungenStatus';\nimport TSAntragDTO from '../../../models/TSAntragDTO';\nimport TSFall from '../../../models/TSFall';\nimport TSGesuchsperiode from '../../../models/TSGesuchsperiode';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport {TSRoleUtil} from '../../../utils/TSRoleUtil';\nimport ILogService = angular.ILogService;\nimport IPromise = angular.IPromise;\nimport ITranslateService = angular.translate.ITranslateService;\n\nlet template = require('./gesuchstellerDashboardView.html');\nrequire('./gesuchstellerDashboardView.less');\n\nexport class GesuchstellerDashboardListViewConfig implements IComponentOptions {\n    transclude = false;\n    template = template;\n    controller = GesuchstellerDashboardListViewController;\n    controllerAs = 'vm';\n}\n\nexport class GesuchstellerDashboardListViewController {\n\n    private antragList: Array<TSAntragDTO> = [];\n    private _activeGesuchsperiodenList: Array<TSGesuchsperiode>;\n    fallId: string;\n    totalResultCount: string = '-';\n    amountNewMitteilungen: number;\n    mapOfNewestAntraege: {[key: string]: string} = {}; // In dieser Map wird pro GP die ID des neuesten Gesuchs gespeichert\n\n    static $inject: string[] = ['$state', '$log', 'AuthServiceRS', 'SearchRS', 'EbeguUtil', 'GesuchsperiodeRS',\n        'FallRS', '$translate', 'MitteilungRS', 'GesuchRS'];\n\n    constructor(private $state: IStateService, private $log: ILogService,\n                private authServiceRS: AuthServiceRS, private searchRS: SearchRS, private ebeguUtil: EbeguUtil,\n                private gesuchsperiodeRS: GesuchsperiodeRS, private fallRS: FallRS, private $translate: ITranslateService,\n                private mitteilungRS: MitteilungRS, private gesuchRS: GesuchRS) {\n    }\n\n    $onInit() {\n        this.initViewModel();\n    }\n\n    private initViewModel() {\n        this.updateAntragList().then(() => {\n            this.getAmountNewMitteilungen();\n            this.updateActiveGesuchsperiodenList();\n        });\n    }\n\n    private updateAntragList(): IPromise<any> {\n        return this.fallRS.findFallByCurrentBenutzerAsBesitzer().then((existingFall: TSFall) => {\n            if (existingFall) {\n                this.fallId = existingFall.id;\n                return this.searchRS.getAntraegeGesuchstellerList().then((response: any) => {\n                    this.antragList = angular.copy(response);\n                    return this.antragList;\n                });\n            } else { //fall es fuer den GS noch keine Fall gibt, erstellen wir einen\n                return this.fallRS.createFallForCurrentBenutzerAsBesitzer().then((createdFall: TSFall) => {\n                    if (createdFall) {\n                        this.fallId = createdFall.id;\n                    }\n                    return this.antragList;\n                });\n            }\n        });\n    }\n\n    private getAmountNewMitteilungen(): void {\n        this.mitteilungRS.getAmountNewMitteilungenForCurrentRolle(this.fallId).then((response: number) => {\n            this.amountNewMitteilungen = response;\n        });\n    }\n\n    private updateActiveGesuchsperiodenList(): void {\n        this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then((response: TSGesuchsperiode[]) => {\n            this._activeGesuchsperiodenList = angular.copy(response);\n            // Jetzt sind sowohl die Gesuchsperioden wie die Gesuche des Falles geladen. Wir merken uns das jeweils neueste Gesuch pro Periode\n            for (let gp of this._activeGesuchsperiodenList) {\n                this.gesuchRS.getIdOfNewestGesuch(gp.id, this.fallId).then(response => {\n                    this.mapOfNewestAntraege[gp.id] = response;\n                });\n            }\n        });\n    }\n\n    public getActiveGesuchsperiodenList(): Array<TSGesuchsperiode> {\n        return this._activeGesuchsperiodenList;\n    }\n\n    public goToMitteilungenOeffen() {\n        this.$state.go('mitteilungen', {\n            fallId: this.fallId\n        });\n    }\n\n    public getAntragList(): Array<TSAntragDTO> {\n        return this.antragList;\n    }\n\n    public displayAnsehenButton(periode: TSGesuchsperiode): boolean {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public getNumberMitteilungen(): number {\n        return this.amountNewMitteilungen;\n    }\n\n    public openAntrag(periode: TSGesuchsperiode, ansehen: boolean): void {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status || ansehen) {\n                // Noch nicht freigegeben\n                this.$state.go('gesuch.fallcreation', {createNew: false, gesuchId: antrag.antragId});\n            } else if (!isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                // Alles ausser verfuegt und InBearbeitung\n                this.$state.go('gesuch.dokumente', {createNew: false, gesuchId: antrag.antragId});\n            } else {\n                // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                // Es kann nur noch eine Mutation gemacht werden\n                this.$state.go('gesuch.mutation', {\n                    createMutation: true,\n                    eingangsart: TSEingangsart.ONLINE,\n                    gesuchId: antrag.antragId,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            }\n        } else {\n            // Noch kein Antrag für die Gesuchsperiode vorhanden\n            if (this.antragList && this.antragList.length > 0) {\n                // Aber schon mindestens einer für eine frühere Periode\n                this.$state.go('gesuch.erneuerung', {\n                    createErneuerung: true,\n                    gesuchId: this.antragList[0].antragId,\n                    eingangsart: TSEingangsart.ONLINE,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            } else {\n                // Dies ist das erste Gesuch\n                this.$state.go('gesuch.fallcreation', {\n                    createNew: true,\n                    eingangsart: TSEingangsart.ONLINE,\n                    gesuchId: null,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            }\n        }\n    }\n\n    public createTagesschule(periode: TSGesuchsperiode): void {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n\n        if (antrag) {\n            this.$state.go('createAngebot', {type: 'TS', gesuchId: antrag.antragId});\n        } else {\n            console.error('Fehler: kein Gesuch gefunden für Gesuchsperiode in createTagesschule');\n        }\n    }\n\n    public createFerieninsel(periode: TSGesuchsperiode): void {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n\n        if (antrag) {\n            this.$state.go('createAngebot', {type: 'FI', gesuchId: antrag.antragId});\n        } else {\n            console.error('Fehler: kein Gesuch gefunden für Gesuchsperiode in createFerieninsel');\n        }\n    }\n\n    public showAnmeldungCreate(periode: TSGesuchsperiode): boolean {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        return periode.hasTagesschulenAnmeldung() && !!antrag &&\n            antrag.status !== TSAntragStatus.IN_BEARBEITUNG_GS &&\n            antrag.status !== TSAntragStatus.FREIGABEQUITTUNG\n            && this.isNeuestAntragOfGesuchsperiode(periode, antrag);\n    }\n\n    public getButtonText(periode: TSGesuchsperiode): string {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                // Noch nicht freigegeben -> Text BEARBEITEN\n                return this.$translate.instant('GS_BEARBEITEN');\n            } else if (!isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                // Alles ausser verfuegt und InBearbeitung -> Text DOKUMENTE HOCHLADEN\n                return this.$translate.instant('GS_DOKUMENTE_HOCHLADEN');\n            } else if (this.isNeuestAntragOfGesuchsperiode(periode, antrag)) {\n                // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                // Es kann nur noch eine Mutation gemacht werden -> Text MUTIEREN\n                return this.$translate.instant('GS_MUTIEREN');\n            }\n        } else {\n            // Noch kein Antrag vorhanden -> Text GESUCH BEANTRAGEN\n            // this.$state.go('gesuch.fallcreation', {createNew: true, gesuchId: null});\n            return this.$translate.instant('GS_BEANTRAGEN');\n        }\n        return undefined;\n    }\n\n    public editAntrag(antrag: TSAntragDTO): void {\n        if (antrag) {\n            if (isAnyStatusOfVerfuegt(antrag.status)) {\n                this.$state.go('gesuch.verfuegen', {createNew: false, gesuchId: antrag.antragId});\n            } else {\n                this.$state.go('gesuch.fallcreation', {createNew: false, gesuchId: antrag.antragId});\n            }\n        }\n    }\n\n    private getAntragForGesuchsperiode(periode: TSGesuchsperiode): TSAntragDTO {\n        // Die Antraege sind nach Laufnummer sortiert, d.h. der erste einer Periode ist immer der aktuellste\n        if (this.antragList) {\n            for (let antrag of this.antragList) {\n                if (antrag.gesuchsperiodeGueltigAb.year() === periode.gueltigkeit.gueltigAb.year()) {\n                    return antrag;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Status muss speziell uebersetzt werden damit Gesuchsteller nur \"In Bearbeitung\" sieht und nicht in \"Bearbeitung Gesuchsteller\"\n     */\n    public translateStatus(antrag: TSAntragDTO) {\n        let status: TSAntragStatus = antrag.status;\n        let isUserGesuchsteller: boolean = this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles());\n        if (status === TSAntragStatus.IN_BEARBEITUNG_GS && isUserGesuchsteller) {\n            if (TSGesuchBetreuungenStatus.ABGEWIESEN === antrag.gesuchBetreuungenStatus) {\n                return this.ebeguUtil.translateString(TSAntragStatus[TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN]);\n            } else if (TSGesuchBetreuungenStatus.WARTEN === antrag.gesuchBetreuungenStatus) {\n                return this.ebeguUtil.translateString(TSAntragStatus[TSAntragStatus.PLATZBESTAETIGUNG_WARTEN]);\n            }\n            return this.ebeguUtil.translateString(IN_BEARBEITUNG_BASE_NAME);\n        }\n        if ((status === TSAntragStatus.NUR_SCHULAMT)\n            && isUserGesuchsteller) {\n            return this.ebeguUtil.translateString('ABGESCHLOSSEN');\n        }\n        return this.ebeguUtil.translateString(TSAntragStatus[status]);\n    }\n\n    /**\n     * JA und Mischgesuche -> verantwortlicher\n     * SCHGesuche -> verantwortlicherSCH (oder \"Schulamt\" wenn kein Verantwortlicher vorhanden\n     */\n    public getHauptVerantwortlicherFullName(antrag: TSAntragDTO): string {\n        if (antrag) {\n            if (antrag.verantwortlicher) {\n                return antrag.verantwortlicher;\n            }\n            if (antrag.verantwortlicherSCH) {\n                return antrag.verantwortlicherSCH;\n            }\n            if (antrag.status === TSAntragStatus.NUR_SCHULAMT) { //legacy for old Faelle where verantwortlicherSCH didn't exist\n                return this.ebeguUtil.translateString('NUR_SCHULAMT');\n            }\n        }\n        return '';\n    }\n\n    public gesperrtWegenMutation(periode: TSGesuchsperiode) {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        return !!antrag && !this.isNeuestAntragOfGesuchsperiode(periode, antrag);\n    }\n\n    public hasOnlyFerieninsel(periode: TSGesuchsperiode) {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        return !!antrag && antrag.hasOnlyFerieninsel();\n    }\n\n    private isNeuestAntragOfGesuchsperiode(periode: TSGesuchsperiode, antrag: TSAntragDTO): boolean {\n        return antrag.antragId === this.mapOfNewestAntraege[periode.id];\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/ErrorService.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/ErrorService.ts","mtime":1512484412007},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSErrorEvent_1 = require(\"../../../models/enums/TSErrorEvent\");\nvar TSExceptionReport_1 = require(\"../../../models/TSExceptionReport\");\nvar TSErrorLevel_1 = require(\"../../../models/enums/TSErrorLevel\");\nvar TSErrorType_1 = require(\"../../../models/enums/TSErrorType\");\nvar ErrorService = /** @class */ (function () {\n    /* @ngInject */\n    function ErrorService($rootScope) {\n        this.$rootScope = $rootScope;\n        this.errors = [];\n    }\n    /**\n     * @returns {Array|DvbError}\n     */\n    ErrorService.prototype.getErrors = function () {\n        return angular.copy(this.errors);\n    };\n    /**\n     * Clears all stored errors\n     */\n    ErrorService.prototype.clearAll = function () {\n        this.errors = [];\n        this.$rootScope.$broadcast(TSErrorEvent_1.TSMessageEvent[TSErrorEvent_1.TSMessageEvent.CLEAR]);\n    };\n    /** clear specific error\n     * @param {string} msgKey\n     */\n    ErrorService.prototype.clearError = function (msgKey) {\n        if (typeof msgKey !== 'string') {\n            return;\n        }\n        var cleared = this.errors.filter(function (e) {\n            return e.msgKey !== msgKey;\n        });\n        if (cleared.length !== this.errors.length) {\n            this.errors = cleared;\n            this.$rootScope.$broadcast(TSErrorEvent_1.TSMessageEvent[TSErrorEvent_1.TSMessageEvent.ERROR_UPDATE], this.errors);\n        }\n    };\n    /**\n     * This can be used to add a client-siede global error\n     * @param {string} msgKey translation key\n     * @param {Object} [args] message parameters\n     */\n    ErrorService.prototype.addValidationError = function (msgKey, args) {\n        var err = TSExceptionReport_1.default.createClientSideError(TSErrorLevel_1.TSErrorLevel.SEVERE, msgKey, args);\n        this.addDvbError(err);\n    };\n    ErrorService.prototype.containsError = function (dvbError) {\n        return this.errors.filter(function (e) {\n            return e.msgKey === dvbError.msgKey;\n        }).length > 0;\n    };\n    ErrorService.prototype.addDvbError = function (dvbError) {\n        if (dvbError && dvbError.isValid()) {\n            if (!this.containsError(dvbError)) {\n                this.errors.push(dvbError);\n                var udateEvent = (dvbError.severity === TSErrorLevel_1.TSErrorLevel.INFO) ? TSErrorEvent_1.TSMessageEvent.INFO_UPDATE : TSErrorEvent_1.TSMessageEvent.ERROR_UPDATE;\n                this.$rootScope.$broadcast(TSErrorEvent_1.TSMessageEvent[udateEvent], this.errors);\n            }\n        }\n        else {\n            console.log('could not display received TSExceptionReport ' + dvbError);\n        }\n    };\n    ErrorService.prototype.addMesageAsError = function (msg) {\n        var error = new TSExceptionReport_1.default(TSErrorType_1.TSErrorType.INTERNAL, TSErrorLevel_1.TSErrorLevel.SEVERE, msg, null);\n        this.addDvbError(error);\n    };\n    ErrorService.prototype.addMesageAsInfo = function (msg) {\n        var error = new TSExceptionReport_1.default(TSErrorType_1.TSErrorType.INTERNAL, TSErrorLevel_1.TSErrorLevel.INFO, msg, null);\n        this.addDvbError(error);\n    };\n    /**\n     * @param {boolean} isValid when FALSE a new validationError is added. Otherwise the validationError is cleared\n     * @param {string} msgKey\n     * @param {Object} [args]\n     */\n    ErrorService.prototype.handleValidationError = function (isValid, msgKey, args) {\n        // noinspection PointlessBooleanExpressionJS\n        if (!!isValid) {\n            this.clearError(msgKey);\n        }\n        else {\n            this.addValidationError(msgKey, args);\n        }\n    };\n    /**\n     * @param {DvbError} dvbError adds a DvbError to the errors\n     */\n    ErrorService.prototype.handleError = function (dvbError) {\n        this.addDvbError(dvbError);\n    };\n    /**\n     * @param {DvbError} dvbErrors adds all Errors to the errors service\n     */\n    ErrorService.prototype.handleErrors = function (dvbErrors) {\n        if (dvbErrors) {\n            for (var _i = 0, dvbErrors_1 = dvbErrors; _i < dvbErrors_1.length; _i++) {\n                var err = dvbErrors_1[_i];\n                this.addDvbError(err);\n            }\n        }\n    };\n    ErrorService.$inject = ['$rootScope'];\n    return ErrorService;\n}());\nexports.default = ErrorService;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/ErrorService.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/ErrorService.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport IRootScopeService = angular.IRootScopeService;\nimport {TSMessageEvent} from '../../../models/enums/TSErrorEvent';\nimport TSExceptionReport from '../../../models/TSExceptionReport';\nimport {TSErrorLevel} from '../../../models/enums/TSErrorLevel';\nimport {TSErrorType} from '../../../models/enums/TSErrorType';\n\nexport default class ErrorService {\n\n    errors: Array<TSExceptionReport> = [];\n\n\n    static $inject = ['$rootScope'];\n    /* @ngInject */\n    constructor(private $rootScope: IRootScopeService) {\n    }\n\n\n    /**\n     * @returns {Array|DvbError}\n     */\n    getErrors(): Array<TSExceptionReport> {\n        return angular.copy(this.errors);\n    }\n\n    /**\n     * Clears all stored errors\n     */\n    clearAll() {\n        this.errors = [];\n        this.$rootScope.$broadcast(TSMessageEvent[TSMessageEvent.CLEAR]);\n    }\n\n    /** clear specific error\n     * @param {string} msgKey\n     */\n    clearError(msgKey: string) {\n        if (typeof msgKey !== 'string') {\n            return;\n        }\n\n        let cleared = this.errors.filter(function (e: TSExceptionReport) {\n            return e.msgKey !== msgKey;\n        });\n\n        if (cleared.length !== this.errors.length) {\n            this.errors = cleared;\n            this.$rootScope.$broadcast(TSMessageEvent[TSMessageEvent.ERROR_UPDATE], this.errors);\n        }\n    }\n\n    /**\n     * This can be used to add a client-siede global error\n     * @param {string} msgKey translation key\n     * @param {Object} [args] message parameters\n     */\n    addValidationError(msgKey: string, args?: any) {\n        let err: TSExceptionReport = TSExceptionReport.createClientSideError(TSErrorLevel.SEVERE, msgKey, args);\n        this.addDvbError(err);\n    }\n\n    containsError(dvbError: TSExceptionReport) {\n        return this.errors.filter(function (e: TSExceptionReport) {\n                return e.msgKey === dvbError.msgKey;\n            }).length > 0;\n    }\n\n    addDvbError(dvbError: TSExceptionReport) {\n        if (dvbError && dvbError.isValid()) {\n            if (!this.containsError(dvbError)) {\n                this.errors.push(dvbError);\n                let udateEvent: TSMessageEvent = (dvbError.severity === TSErrorLevel.INFO ) ? TSMessageEvent.INFO_UPDATE : TSMessageEvent.ERROR_UPDATE;\n                this.$rootScope.$broadcast(TSMessageEvent[udateEvent], this.errors);\n            }\n        } else {\n            console.log('could not display received TSExceptionReport ' + dvbError);\n        }\n    }\n\n    addMesageAsError(msg: string) {\n        let error: TSExceptionReport = new TSExceptionReport(TSErrorType.INTERNAL, TSErrorLevel.SEVERE, msg, null);\n        this.addDvbError(error);\n\n    }\n\n    addMesageAsInfo(msg: string) {\n        let error: TSExceptionReport = new TSExceptionReport(TSErrorType.INTERNAL, TSErrorLevel.INFO, msg, null);\n        this.addDvbError(error);\n    }\n\n    /**\n     * @param {boolean} isValid when FALSE a new validationError is added. Otherwise the validationError is cleared\n     * @param {string} msgKey\n     * @param {Object} [args]\n     */\n    handleValidationError(isValid: boolean, msgKey: string, args?: any) {\n        // noinspection PointlessBooleanExpressionJS\n        if (!!isValid) {\n            this.clearError(msgKey);\n        } else {\n            this.addValidationError(msgKey, args);\n        }\n    }\n\n    /**\n     * @param {DvbError} dvbError adds a DvbError to the errors\n     */\n    handleError(dvbError: TSExceptionReport) {\n        this.addDvbError(dvbError);\n    }\n\n    /**\n     * @param {DvbError} dvbErrors adds all Errors to the errors service\n     */\n    handleErrors(dvbErrors: Array<TSExceptionReport>) {\n        if (dvbErrors) {\n            for (let err of dvbErrors) {\n                this.addDvbError(err);\n            }\n        }\n\n    }\n}\n"]}]}
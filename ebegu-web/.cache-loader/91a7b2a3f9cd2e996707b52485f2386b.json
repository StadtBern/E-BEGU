{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/service/antragStatusHistoryRS.rest.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/antragStatusHistoryRS.rest.ts","mtime":1512484412007},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSAntragStatusHistory_1 = require(\"../../models/TSAntragStatusHistory\");\nvar AntragStatusHistoryRS = /** @class */ (function () {\n    /* @ngInject */\n    function AntragStatusHistoryRS($http, REST_API, ebeguRestUtil, $log, authServiceRS) {\n        this.authServiceRS = authServiceRS;\n        this.serviceURL = REST_API + 'antragStatusHistory';\n        this.http = $http;\n        this.ebeguRestUtil = ebeguRestUtil;\n        this.log = $log;\n    }\n    AntragStatusHistoryRS.prototype.getServiceName = function () {\n        return 'AntragStatusHistoryRS';\n    };\n    Object.defineProperty(AntragStatusHistoryRS.prototype, \"lastChange\", {\n        get: function () {\n            return this._lastChange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * laedt und merkt sich den letzten Statusuebergang, kann mit #lastChange() ausgelesen werden\n     */\n    AntragStatusHistoryRS.prototype.loadLastStatusChange = function (gesuch) {\n        var _this = this;\n        if (gesuch && gesuch.id) {\n            return this.http.get(this.serviceURL + '/' + encodeURIComponent(gesuch.id))\n                .then(function (response) {\n                _this.log.debug('PARSING AntragStatusHistory REST object ', response.data);\n                _this._lastChange = _this.ebeguRestUtil.parseAntragStatusHistory(new TSAntragStatusHistory_1.default(), response.data);\n                return _this._lastChange;\n            });\n        }\n        else {\n            this._lastChange = undefined;\n        }\n        return undefined;\n    };\n    AntragStatusHistoryRS.prototype.loadAllAntragStatusHistoryByGesuchsperiode = function (fall, gesuchsperiode) {\n        var _this = this;\n        if (gesuchsperiode && gesuchsperiode.id && fall && fall.id) {\n            return this.http.get(this.serviceURL + '/verlauf/' + encodeURIComponent(gesuchsperiode.id) + '/' + encodeURIComponent(fall.id))\n                .then(function (response) {\n                _this.log.debug('PARSING AntragStatusHistory REST object ', response.data);\n                return _this.ebeguRestUtil.parseAntragStatusHistoryCollection(response.data);\n            });\n        }\n        return undefined;\n    };\n    /**\n     * Gibt den FullName des Benutzers zurueck, der den Gesuchsstatus am letzten geaendert hat. Sollte das Gesuch noch nicht\n     * gespeichert sein (fallCreation), wird der FullName des eingeloggten Benutzers zurueckgegeben\n     * @returns {any}\n     */\n    AntragStatusHistoryRS.prototype.getUserFullname = function () {\n        if (this.lastChange && this.lastChange.benutzer) {\n            return this.lastChange.benutzer.getFullName();\n        }\n        else {\n            if (this.authServiceRS && this.authServiceRS.getPrincipal()) {\n                return this.authServiceRS.getPrincipal().getFullName();\n            }\n        }\n        return '';\n    };\n    AntragStatusHistoryRS.$inject = ['$http', 'REST_API', 'EbeguRestUtil', '$log', 'AuthServiceRS'];\n    return AntragStatusHistoryRS;\n}());\nexports.default = AntragStatusHistoryRS;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/antragStatusHistoryRS.rest.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/service/antragStatusHistoryRS.rest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport EbeguRestUtil from '../../utils/EbeguRestUtil';\nimport {IHttpService, ILogService, IPromise} from 'angular';\nimport TSAntragStatusHistory from '../../models/TSAntragStatusHistory';\nimport TSGesuch from '../../models/TSGesuch';\nimport AuthServiceRS from '../../authentication/service/AuthServiceRS.rest';\nimport TSGesuchsperiode from '../../models/TSGesuchsperiode';\nimport TSFall from '../../models/TSFall';\n\nexport default class AntragStatusHistoryRS {\n\n    serviceURL: string;\n    http: IHttpService;\n    ebeguRestUtil: EbeguRestUtil;\n    log: ILogService;\n\n    private _lastChange: TSAntragStatusHistory;\n\n\n    static $inject = ['$http', 'REST_API', 'EbeguRestUtil', '$log', 'AuthServiceRS'];\n    /* @ngInject */\n    constructor($http: IHttpService, REST_API: string, ebeguRestUtil: EbeguRestUtil, $log: ILogService,\n                private authServiceRS: AuthServiceRS) {\n        this.serviceURL = REST_API + 'antragStatusHistory';\n        this.http = $http;\n        this.ebeguRestUtil = ebeguRestUtil;\n        this.log = $log;\n    }\n\n    public getServiceName(): string {\n        return 'AntragStatusHistoryRS';\n    }\n\n    get lastChange(): TSAntragStatusHistory {\n        return this._lastChange;\n    }\n\n    /**\n     * laedt und merkt sich den letzten Statusuebergang, kann mit #lastChange() ausgelesen werden\n     */\n    public loadLastStatusChange(gesuch: TSGesuch): IPromise<TSAntragStatusHistory> {\n        if (gesuch && gesuch.id) {\n            return this.http.get(this.serviceURL + '/' + encodeURIComponent(gesuch.id))\n                .then((response: any) => {\n                    this.log.debug('PARSING AntragStatusHistory REST object ', response.data);\n                    this._lastChange = this.ebeguRestUtil.parseAntragStatusHistory(new TSAntragStatusHistory(), response.data);\n                    return this._lastChange;\n                });\n        } else {\n            this._lastChange = undefined;\n        }\n        return undefined;\n    }\n\n    public loadAllAntragStatusHistoryByGesuchsperiode(fall: TSFall, gesuchsperiode: TSGesuchsperiode): IPromise<Array<TSAntragStatusHistory>> {\n        if (gesuchsperiode && gesuchsperiode.id && fall && fall.id) {\n            return this.http.get(this.serviceURL + '/verlauf/' + encodeURIComponent(gesuchsperiode.id) + '/' + encodeURIComponent(fall.id))\n                .then((response: any) => {\n                    this.log.debug('PARSING AntragStatusHistory REST object ', response.data);\n                    return this.ebeguRestUtil.parseAntragStatusHistoryCollection(response.data);\n                });\n        }\n        return undefined;\n    }\n\n    /**\n     * Gibt den FullName des Benutzers zurueck, der den Gesuchsstatus am letzten geaendert hat. Sollte das Gesuch noch nicht\n     * gespeichert sein (fallCreation), wird der FullName des eingeloggten Benutzers zurueckgegeben\n     * @returns {any}\n     */\n    public getUserFullname(): string {\n        if (this.lastChange && this.lastChange.benutzer) {\n            return this.lastChange.benutzer.getFullName();\n        } else {\n            if (this.authServiceRS && this.authServiceRS.getPrincipal()) {\n                return this.authServiceRS.getPrincipal().getFullName();\n            }\n        }\n        return '';\n    }\n\n}\n"]}]}
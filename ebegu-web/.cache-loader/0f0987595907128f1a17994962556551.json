{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts","mtime":1518612642528},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSGesuch_1 = require(\"../../../models/TSGesuch\");\nvar TSAntragStatus_1 = require(\"../../../models/enums/TSAntragStatus\");\nvar TSRoleUtil_1 = require(\"../../../utils/TSRoleUtil\");\nvar TSEingangsart_1 = require(\"../../../models/enums/TSEingangsart\");\nvar TSMitteilungEvent_1 = require(\"../../../models/enums/TSMitteilungEvent\");\nvar TSRole_1 = require(\"../../../models/enums/TSRole\");\nvar TSGesuchsperiodeStatus_1 = require(\"../../../models/enums/TSGesuchsperiodeStatus\");\nvar RemoveDialogController_1 = require(\"../../dialog/RemoveDialogController\");\nvar ShowTooltipController_1 = require(\"../../dialog/ShowTooltipController\");\nvar templateX = require('./gesuchToolbar.html');\nvar templateGS = require('./gesuchToolbarGesuchsteller.html');\nvar showKontaktTemplate = require('../../../gesuch/dialog/showKontaktTemplate.html');\nvar removeDialogTempl = require('../../dialog/removeDialogTemplate.html');\nrequire('./gesuchToolbar.less');\nvar GesuchToolbarComponentConfig = /** @class */ (function () {\n    function GesuchToolbarComponentConfig() {\n        this.transclude = false;\n        this.bindings = {\n            gesuchid: '@',\n            fallid: '@',\n            isDashboardScreen: '@',\n            hideActionButtons: '@',\n            forceLoadingFromFall: '@'\n        };\n        this.template = templateX;\n        this.controller = GesuchToolbarController;\n        this.controllerAs = 'vmx';\n    }\n    return GesuchToolbarComponentConfig;\n}());\nexports.GesuchToolbarComponentConfig = GesuchToolbarComponentConfig;\nvar GesuchToolbarGesuchstellerComponentConfig = /** @class */ (function () {\n    function GesuchToolbarGesuchstellerComponentConfig() {\n        this.transclude = false;\n        this.bindings = {\n            gesuchid: '@',\n            fallid: '@',\n            isDashboardScreen: '@',\n            hideActionButtons: '@',\n            forceLoadingFromFall: '@'\n        };\n        this.template = templateGS;\n        this.controller = GesuchToolbarController;\n        // Darf, wie es scheint nicht 'vm' heissen, sonst werden im gesuchToolBarGesuchsteller.html keine Funktionen gefunden. Bug?!\n        this.controllerAs = 'vmgs';\n    }\n    return GesuchToolbarGesuchstellerComponentConfig;\n}());\nexports.GesuchToolbarGesuchstellerComponentConfig = GesuchToolbarGesuchstellerComponentConfig;\nvar GesuchToolbarController = /** @class */ (function () {\n    function GesuchToolbarController(ebeguUtil, gesuchRS, $state, $scope, gesuchModelManager, authServiceRS, $mdSidenav, $log, gesuchsperiodeRS, fallRS, dvDialog, unsavedWarningSharedService, mitteilungRS) {\n        this.ebeguUtil = ebeguUtil;\n        this.gesuchRS = gesuchRS;\n        this.$state = $state;\n        this.$scope = $scope;\n        this.gesuchModelManager = gesuchModelManager;\n        this.authServiceRS = authServiceRS;\n        this.$mdSidenav = $mdSidenav;\n        this.$log = $log;\n        this.gesuchsperiodeRS = gesuchsperiodeRS;\n        this.fallRS = fallRS;\n        this.dvDialog = dvDialog;\n        this.unsavedWarningSharedService = unsavedWarningSharedService;\n        this.mitteilungRS = mitteilungRS;\n        this.gesuchsperiodeList = {};\n        this.gesuchNavigationList = {}; //mapped z.B. '2006 / 2007' auf ein array mit den Namen der Antraege\n        this.antragTypList = {};\n        this.mutierenPossibleForCurrentAntrag = false;\n        this.erneuernPossibleForCurrentAntrag = false;\n        this.amountNewMitteilungenGS = 0;\n    }\n    GesuchToolbarController.prototype.$onInit = function () {\n        var _this = this;\n        this.updateAntragDTOList();\n        //add watchers\n        this.addWatchers(this.$scope);\n        this.TSRoleUtil = TSRoleUtil_1.TSRoleUtil;\n        this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then(function (response) {\n            // Die neueste ist zuoberst\n            _this.neuesteGesuchsperiode = response[0];\n        });\n    };\n    GesuchToolbarController.prototype.updateAmountNewMitteilungenGS = function (fallid) {\n        var _this = this;\n        this.mitteilungRS.getAmountNewMitteilungenForCurrentRolle(fallid).then(function (response) {\n            _this.amountNewMitteilungenGS = response;\n        });\n    };\n    GesuchToolbarController.prototype.getAmountNewMitteilungenGS = function () {\n        return '(' + this.amountNewMitteilungenGS + ')';\n    };\n    GesuchToolbarController.prototype.toggleSidenav = function (componentId) {\n        this.$mdSidenav(componentId).toggle();\n    };\n    GesuchToolbarController.prototype.closeSidenav = function (componentId) {\n        this.$mdSidenav(componentId).close();\n    };\n    GesuchToolbarController.prototype.logout = function () {\n        this.$state.go('login', { type: 'logout' });\n    };\n    GesuchToolbarController.prototype.addWatchers = function ($scope) {\n        var _this = this;\n        // needed because of test is not able to inject $scope!\n        if ($scope) {\n            //watcher fuer gesuch id change\n            $scope.$watch(function () {\n                return _this.gesuchid;\n            }, function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    if (_this.gesuchid) {\n                        _this.updateAntragDTOList();\n                    }\n                    else {\n                        _this.antragTypList = {};\n                        _this.gesuchNavigationList = {};\n                        _this.gesuchsperiodeList = {};\n                        _this.antragList = [];\n                        _this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                        _this.antragErneuernPossible();\n                    }\n                }\n            });\n            //watcher fuer status change\n            if (this.gesuchModelManager && this.getGesuch()) {\n                $scope.$watch(function () {\n                    return _this.getGesuch().status;\n                }, function (newValue, oldValue) {\n                    if ((newValue !== oldValue) && (TSAntragStatus_1.isAnyStatusOfVerfuegt(newValue))) {\n                        _this.updateAntragDTOList();\n                    }\n                });\n            }\n            //watcher fuer fall id change\n            $scope.$watch(function () {\n                return _this.fallid;\n            }, function (newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    if (_this.fallid) {\n                        _this.updateAntragDTOList();\n                        _this.updateAmountNewMitteilungenGS(_this.fallid);\n                    }\n                    else {\n                        // Fall-ID hat auf undefined gewechselt -> Fall zuruecksetzen\n                        _this.fall = undefined;\n                        _this.antragTypList = {};\n                        _this.gesuchNavigationList = {};\n                        _this.gesuchsperiodeList = {};\n                        _this.antragList = [];\n                        _this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                        _this.antragErneuernPossible();\n                    }\n                }\n            });\n            // Wenn eine Mutationsmitteilung uebernommen wird und deshalb eine neue Mutation erstellt wird, muss\n            // die toolbar aktualisisert werden, damit diese Mutation auf der Liste erscheint\n            $scope.$on(TSMitteilungEvent_1.TSMitteilungEvent[TSMitteilungEvent_1.TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], function () {\n                _this.updateAntragDTOList();\n            });\n        }\n    };\n    GesuchToolbarController.prototype.showGesuchPeriodeNavigationMenu = function () {\n        return !this.isDashboardScreen && !angular.equals(this.gesuchsperiodeList, {})\n            && !this.authServiceRS.isRole(TSRole_1.TSRole.STEUERAMT);\n    };\n    /**\n     * Die Liste wird nicht angezeigt wenn sie leer ist oder wenn der Benutzer sich auf dem Dashboard befindet\n     */\n    GesuchToolbarController.prototype.showAntragTypListNavigationMenu = function () {\n        return !this.isDashboardScreen && !angular.equals(this.antragTypList, {})\n            && !this.authServiceRS.isRole(TSRole_1.TSRole.STEUERAMT);\n    };\n    GesuchToolbarController.prototype.showKontaktMenu = function () {\n        if (this.getGesuch() && this.getGesuch().gesuchsteller1) {\n            return true;\n        }\n        return false;\n    };\n    GesuchToolbarController.prototype.updateAntragDTOList = function () {\n        var _this = this;\n        this.updateFall();\n        if (!this.forceLoadingFromFall && this.getGesuch() && this.getGesuch().id) {\n            this.gesuchRS.getAllAntragDTOForFall(this.getGesuch().fall.id).then(function (response) {\n                _this.antragList = angular.copy(response);\n                _this.updateGesuchperiodeList();\n                _this.updateGesuchNavigationList();\n                _this.updateAntragTypList();\n                _this.antragMutierenPossible();\n                _this.antragErneuernPossible();\n            });\n        }\n        else if (this.fallid) {\n            this.gesuchRS.getAllAntragDTOForFall(this.fallid).then(function (response) {\n                _this.antragList = angular.copy(response);\n                if (response && response.length > 0) {\n                    var newest_1 = _this.getNewest(_this.antragList);\n                    _this.gesuchRS.findGesuch(newest_1.antragId).then(function (response) {\n                        if (!response) {\n                            _this.$log.warn('Could not find gesuch for id ' + newest_1.antragId);\n                        }\n                        _this.gesuchModelManager.setGesuch(angular.copy(response));\n                        _this.updateGesuchperiodeList();\n                        _this.updateGesuchNavigationList();\n                        _this.updateAntragTypList();\n                        _this.antragMutierenPossible();\n                        _this.antragErneuernPossible();\n                    });\n                }\n                else {\n                    // Wenn das Gesuch noch neu ist, sind wir noch ungespeichert auf der FallCreation-Seite\n                    // In diesem Fall durfen wir das Gesuch nicht zuruecksetzen\n                    if (!_this.gesuchModelManager.getGesuch() || !_this.gesuchModelManager.getGesuch().isNew()) {\n                        // in this case there is no Gesuch for this fall, so we remove all content\n                        _this.gesuchModelManager.setGesuch(new TSGesuch_1.default());\n                        _this.resetNavigationParameters();\n                    }\n                }\n            });\n            this.updateAmountNewMitteilungenGS(this.fallid);\n        }\n        else {\n            this.resetNavigationParameters();\n        }\n        this.forceLoadingFromFall = false; // reset it because it's not needed any more\n    };\n    GesuchToolbarController.prototype.resetNavigationParameters = function () {\n        this.gesuchsperiodeList = {};\n        this.gesuchNavigationList = {};\n        this.antragTypList = {};\n        this.antragMutierenPossible();\n        this.antragErneuernPossible();\n    };\n    GesuchToolbarController.prototype.updateGesuchperiodeList = function () {\n        this.gesuchsperiodeList = {};\n        for (var i = 0; i < this.antragList.length; i++) {\n            var gs = this.antragList[i].gesuchsperiodeString;\n            if (!this.gesuchsperiodeList[gs]) {\n                this.gesuchsperiodeList[gs] = [];\n            }\n            this.gesuchsperiodeList[gs].push(this.antragList[i]);\n        }\n    };\n    GesuchToolbarController.prototype.updateGesuchNavigationList = function () {\n        this.gesuchNavigationList = {}; // clear\n        for (var i = 0; i < this.antragList.length; i++) {\n            var gs = this.antragList[i].gesuchsperiodeString;\n            var antrag = this.antragList[i];\n            if (!this.gesuchNavigationList[gs]) {\n                this.gesuchNavigationList[gs] = [];\n            }\n            this.gesuchNavigationList[gs].push(this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer));\n        }\n    };\n    GesuchToolbarController.prototype.updateAntragTypList = function () {\n        this.antragTypList = {}; //clear\n        for (var i = 0; i < this.antragList.length; i++) {\n            var antrag = this.antragList[i];\n            if (this.getGesuch().gesuchsperiode.gueltigkeit.gueltigAb.isSame(antrag.gesuchsperiodeGueltigAb)) {\n                var txt = this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n                this.antragTypList[txt] = antrag;\n            }\n        }\n    };\n    GesuchToolbarController.prototype.getKeys = function (map) {\n        var keys = [];\n        for (var key in map) {\n            if (map.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    /**\n     * Tries to get the \"gesuchName\" out of the gesuch contained in the gesuchModelManager. If this doesn't\n     * succeed it gets the \"gesuchName\" out of the fall\n     */\n    GesuchToolbarController.prototype.getGesuchName = function () {\n        var gesuchName = this.gesuchModelManager.getGesuchName();\n        if (!gesuchName || gesuchName.length <= 0) {\n            gesuchName = this.ebeguUtil.getGesuchNameFromFall(this.fall);\n        }\n        return gesuchName;\n    };\n    GesuchToolbarController.prototype.getGesuch = function () {\n        return this.gesuchModelManager.getGesuch();\n    };\n    GesuchToolbarController.prototype.getCurrentGesuchsperiode = function () {\n        if (this.getGesuch() && this.getGesuch().gesuchsperiode) {\n            return this.getGesuchsperiodeAsString(this.getGesuch().gesuchsperiode);\n        }\n        else {\n            return '';\n        }\n    };\n    GesuchToolbarController.prototype.getAntragTyp = function () {\n        if (this.getGesuch()) {\n            return this.ebeguUtil.getAntragTextDateAsString(this.getGesuch().typ, this.getGesuch().eingangsdatum, this.getGesuch().laufnummer);\n        }\n        else {\n            return '';\n        }\n    };\n    GesuchToolbarController.prototype.getGesuchsperiodeAsString = function (tsGesuchsperiode) {\n        return tsGesuchsperiode.gesuchsperiodeString;\n    };\n    GesuchToolbarController.prototype.setGesuchsperiode = function (gesuchsperiodeKey) {\n        var selectedGesuche = this.gesuchsperiodeList[gesuchsperiodeKey];\n        var selectedGesuch = this.getNewest(selectedGesuche);\n        this.goToOpenGesuch(selectedGesuch.antragId);\n    };\n    GesuchToolbarController.prototype.getNewest = function (arrayTSAntragDTO) {\n        var newest = arrayTSAntragDTO[0];\n        for (var i = 0; i < arrayTSAntragDTO.length; i++) {\n            // Wenn eines noch gar kein Eingangsdatum hat ist es sicher das neueste\n            if (!arrayTSAntragDTO[i].eingangsdatum) {\n                return arrayTSAntragDTO[i];\n            }\n            if (arrayTSAntragDTO[i].eingangsdatum.isAfter(newest.eingangsdatum)) {\n                newest = arrayTSAntragDTO[i];\n            }\n        }\n        return newest;\n    };\n    /**\n     * Institutionen werden zum Screen Betreuungen geleitet, waehrend alle anderen Benutzer zu fallCreation gehen\n     */\n    GesuchToolbarController.prototype.goToOpenGesuch = function (gesuchId) {\n        if (gesuchId) {\n            if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) {\n                this.$state.go('gesuch.betreuungen', { gesuchId: gesuchId });\n            }\n            else if (this.authServiceRS.isRole(TSRole_1.TSRole.STEUERAMT)) {\n                this.$state.go('gesuch.familiensituation', { gesuchId: gesuchId });\n            }\n            else {\n                this.$state.go('gesuch.fallcreation', {\n                    createNew: false, gesuchId: gesuchId\n                });\n            }\n        }\n    };\n    GesuchToolbarController.prototype.setAntragTypDatum = function (antragTypDatumKey) {\n        var selectedAntragTypGesuch = this.antragTypList[antragTypDatumKey];\n        this.goToOpenGesuch(selectedAntragTypGesuch.antragId);\n    };\n    GesuchToolbarController.prototype.setAntragTypDatumMobile = function (gesuchperiodeKey, antragTypDatumKey) {\n        var tmpAntragList = {};\n        for (var i = 0; i < this.antragList.length; i++) {\n            var antrag = this.antragList[i];\n            if (this.gesuchsperiodeList[gesuchperiodeKey][0].gesuchsperiodeGueltigAb.isSame(antrag.gesuchsperiodeGueltigAb)) {\n                var txt = this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n                tmpAntragList[txt] = antrag;\n            }\n        }\n        var selectedAntragTypGesuch = tmpAntragList[antragTypDatumKey];\n        this.goToOpenGesuch(selectedAntragTypGesuch.antragId);\n    };\n    GesuchToolbarController.prototype.showButtonMutieren = function () {\n        if (this.hideActionButtons) {\n            return false;\n        }\n        if (this.getGesuch()) {\n            if (this.getGesuch().isNew()) {\n                return false;\n            }\n            // Wenn die Gesuchsperiode geschlossen ist, kann sowieso keine Mutation mehr gemacht werden\n            if (this.getGesuch().gesuchsperiode && this.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus_1.TSGesuchsperiodeStatus.GESCHLOSSEN) {\n                return false;\n            }\n        }\n        return this.mutierenPossibleForCurrentAntrag;\n    };\n    GesuchToolbarController.prototype.antragMutierenPossible = function () {\n        if (this.antragList && this.antragList.length !== 0) {\n            var mutierenGesperrt = false;\n            for (var i = 0; i < this.antragList.length; i++) {\n                var antragItem = this.antragList[i];\n                // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                if (antragItem.gesuchsperiodeString === this.getCurrentGesuchsperiode()) {\n                    // Falls wir ein Gesuch finden das nicht verfuegt ist oder eine Beschwerde hängig ist, darf nicht mutiert werden\n                    if (antragItem.verfuegt === false || antragItem.beschwerdeHaengig === true) {\n                        mutierenGesperrt = true;\n                        break;\n                    }\n                }\n            }\n            this.mutierenPossibleForCurrentAntrag = !mutierenGesperrt;\n        }\n        else {\n            this.mutierenPossibleForCurrentAntrag = false;\n        }\n    };\n    GesuchToolbarController.prototype.antragMutieren = function () {\n        this.mutierenPossibleForCurrentAntrag = false;\n        var eingangsart;\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            eingangsart = TSEingangsart_1.TSEingangsart.ONLINE;\n        }\n        else {\n            eingangsart = TSEingangsart_1.TSEingangsart.PAPIER;\n        }\n        this.$state.go('gesuch.mutation', {\n            createMutation: true,\n            gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n            fallId: this.getGesuch().fall.id,\n            eingangsart: eingangsart,\n            gesuchsperiodeId: this.getGesuch().gesuchsperiode.id\n        });\n    };\n    GesuchToolbarController.prototype.antragErneuernPossible = function () {\n        if (this.antragList && this.antragList.length !== 0) {\n            var erneuernGesperrt = false;\n            for (var i = 0; i < this.antragList.length; i++) {\n                var antragItem = this.antragList[i];\n                // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                if (antragItem.gesuchsperiodeString === this.getGesuchsperiodeAsString(this.neuesteGesuchsperiode)) {\n                    // Es gibt schon (mindestens 1) Gesuch für die neueste Periode\n                    erneuernGesperrt = true;\n                    break;\n                }\n            }\n            this.erneuernPossibleForCurrentAntrag = !erneuernGesperrt;\n        }\n        else {\n            this.erneuernPossibleForCurrentAntrag = false;\n        }\n    };\n    GesuchToolbarController.prototype.antragErneuern = function () {\n        this.erneuernPossibleForCurrentAntrag = false;\n        var eingangsart;\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            eingangsart = TSEingangsart_1.TSEingangsart.ONLINE;\n        }\n        else {\n            eingangsart = TSEingangsart_1.TSEingangsart.PAPIER;\n        }\n        this.$state.go('gesuch.erneuerung', {\n            createErneuerung: true,\n            gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n            eingangsart: eingangsart,\n            gesuchsperiodeId: this.neuesteGesuchsperiode.id,\n            fallId: this.fallid\n        });\n    };\n    GesuchToolbarController.prototype.getGesuchIdFuerMutationOrErneuerung = function () {\n        // GesuchId ermitteln fuer Mutation ermitteln: Falls wir auf der Verlauf-View sind, nehmen wir einfach\n        // irgendeines der Liste (es wird auf dem Server sichergestellt, dass die Mutation ab dem neuesten Gesuch\n        // der Periode gemacht wird), wichtig ist nur, dass es sich um die richtige Gesuchsperiode handelt.\n        if (this.gesuchid) {\n            return this.gesuchid;\n        }\n        else {\n            if (this.getGesuch()) {\n                return this.getGesuch().id;\n            }\n        }\n        return undefined;\n    };\n    GesuchToolbarController.prototype.hasBesitzer = function () {\n        return this.fall && this.fall.besitzer !== null && this.fall.besitzer !== undefined;\n    };\n    GesuchToolbarController.prototype.getBesitzer = function () {\n        if (this.fall) {\n            return this.fall.besitzer.getFullName();\n        }\n        return '';\n    };\n    GesuchToolbarController.prototype.openMitteilungen = function () {\n        this.$state.go('mitteilungen', {\n            fallId: this.fallid\n        });\n    };\n    GesuchToolbarController.prototype.showVerlauf = function () {\n        return this.getGesuch() !== null && this.getGesuch() !== undefined && !this.getGesuch().isNew();\n    };\n    GesuchToolbarController.prototype.openVerlauf = function () {\n        this.$state.go('verlauf', {\n            gesuchId: this.getGesuch().id\n        });\n    };\n    GesuchToolbarController.prototype.showGesuchLoeschen = function () {\n        if (!this.getGesuch() || this.getGesuch().isNew()) {\n            return false;\n        }\n        if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            // GS darf nur vor der Freigabe loeschen\n            if (this.hideActionButtons || this.isDashboardScreen || TSAntragStatus_1.isAtLeastFreigegebenOrFreigabequittung(this.getGesuch().status)) {\n                return false;\n            }\n        }\n        else {\n            // JA: Darf nicht verfuegen oder verfuegt sein und muss Papier sein\n            if (TSAntragStatus_1.isStatusVerfuegenVerfuegt(this.getGesuch().status) || this.getGesuch().eingangsart === TSEingangsart_1.TSEingangsart.ONLINE) {\n                return false;\n            }\n        }\n        return true;\n    };\n    GesuchToolbarController.prototype.gesuchLoeschen = function () {\n        var _this = this;\n        return this.dvDialog.showDialog(removeDialogTempl, RemoveDialogController_1.RemoveDialogController, {\n            title: 'CONFIRM_GESUCH_LOESCHEN',\n            deleteText: 'BESCHREIBUNG_GESUCH_LOESCHEN',\n            parentController: this,\n            elementID: 'gesuchLoeschenButton'\n        }).then(function () {\n            _this.setAllFormsPristine();\n            if (_this.authServiceRS.isOneOfRoles(_this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                _this.gesuchRS.removeGesuchstellerAntrag(_this.getGesuch().id).then(function (result) {\n                    _this.gesuchModelManager.setGesuch(new TSGesuch_1.default());\n                    _this.resetNavigationParameters();\n                    _this.$state.go('gesuchstellerDashboard');\n                });\n            }\n            else {\n                _this.gesuchRS.removePapiergesuch(_this.getGesuch().id).then(function (result) {\n                    if (_this.antragList.length > 1) {\n                        var navObj = {\n                            createNew: false,\n                            gesuchId: _this.antragList[0].antragId\n                        };\n                        _this.$state.go('gesuch.fallcreation', navObj);\n                    }\n                    else {\n                        _this.$state.go('pendenzen');\n                    }\n                });\n            }\n        });\n    };\n    GesuchToolbarController.prototype.setAllFormsPristine = function () {\n        var forms = this.unsavedWarningSharedService.allForms();\n        for (var index = 0; index < forms.length; index++) {\n            var form = forms[index];\n            form.$setPristine();\n            form.$setUntouched();\n        }\n    };\n    GesuchToolbarController.prototype.openAlleVerfuegungen = function () {\n        this.$state.go('alleVerfuegungen', {\n            fallId: this.fallid\n        });\n    };\n    GesuchToolbarController.prototype.updateFall = function () {\n        var _this = this;\n        if (this.fallid) {\n            this.fallRS.findFall(this.fallid).then(function (response) {\n                if (response) {\n                    _this.fall = response;\n                }\n            });\n        }\n    };\n    GesuchToolbarController.prototype.showKontakt = function () {\n        var text;\n        if (this.fall.isHauptverantwortlicherSchulamt()) {\n            text = '<span>Schulamt</span><br>'\n                + '<span>Effingerstrasse 21</span><br>'\n                + '<span>3008 Bern</span><br>'\n                + '<a href=\"tel:0313216460\"><span>031 321 64 60</span></a><br>'\n                + '<a href=\"mailto:schulamt@bern.ch\"><span>schulamt@bern.ch</span></a>';\n        }\n        else {\n            text = '<span>Jugendamt</span><br>'\n                + '<span>Effingerstrasse 21</span><br>'\n                + '<span>3008 Bern</span><br>'\n                + '<a href=\"tel:0313215115\"><span>031 321 51 15</span></a><br>'\n                + '<a href=\"mailto:kinderbetreuung@bern.ch\"><span>kinderbetreuung@bern.ch</span></a>';\n        }\n        this.dvDialog.showDialog(showKontaktTemplate, ShowTooltipController_1.ShowTooltipController, {\n            title: '',\n            text: text,\n            parentController: this\n        });\n    };\n    /**\n     * Sets the focus back to the Kontakt icon.\n     */\n    GesuchToolbarController.prototype.setFocusBack = function (elementID) {\n        angular.element('#kontaktButton').first().focus();\n    };\n    GesuchToolbarController.$inject = ['EbeguUtil', 'GesuchRS', '$state',\n        '$scope', 'GesuchModelManager', 'AuthServiceRS', '$mdSidenav', '$log', 'GesuchsperiodeRS',\n        'FallRS', 'DvDialog', 'unsavedWarningSharedService', 'MitteilungRS'];\n    return GesuchToolbarController;\n}());\nexports.GesuchToolbarController = GesuchToolbarController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions, IFormController, ILogService} from 'angular';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport TSGesuchsperiode from '../../../models/TSGesuchsperiode';\nimport TSGesuch from '../../../models/TSGesuch';\nimport GesuchRS from '../../service/gesuchRS.rest';\nimport {IStateService} from 'angular-ui-router';\nimport TSAntragDTO from '../../../models/TSAntragDTO';\nimport GesuchModelManager from '../../service/gesuchModelManager';\nimport {isAnyStatusOfVerfuegt, isAtLeastFreigegebenOrFreigabequittung, isStatusVerfuegenVerfuegt} from '../../../models/enums/TSAntragStatus';\nimport {TSRoleUtil} from '../../../utils/TSRoleUtil';\nimport AuthServiceRS from '../../../authentication/service/AuthServiceRS.rest';\nimport {TSEingangsart} from '../../../models/enums/TSEingangsart';\nimport {TSMitteilungEvent} from '../../../models/enums/TSMitteilungEvent';\nimport {TSRole} from '../../../models/enums/TSRole';\nimport GesuchsperiodeRS from '../../../core/service/gesuchsperiodeRS.rest';\nimport {TSGesuchsperiodeStatus} from '../../../models/enums/TSGesuchsperiodeStatus';\nimport FallRS from '../../service/fallRS.rest';\nimport TSFall from '../../../models/TSFall';\nimport {DvDialog} from '../../../core/directive/dv-dialog/dv-dialog';\nimport {RemoveDialogController} from '../../dialog/RemoveDialogController';\n\nimport {ShowTooltipController} from '../../dialog/ShowTooltipController';\nimport {IDVFocusableController} from '../../../core/component/IDVFocusableController';\nimport MitteilungRS from '../../../core/service/mitteilungRS.rest';\nimport IPromise = angular.IPromise;\nimport IScope = angular.IScope;\n\nlet templateX = require('./gesuchToolbar.html');\nlet templateGS = require('./gesuchToolbarGesuchsteller.html');\nlet showKontaktTemplate = require('../../../gesuch/dialog/showKontaktTemplate.html');\nlet removeDialogTempl = require('../../dialog/removeDialogTemplate.html');\nrequire('./gesuchToolbar.less');\n\nexport class GesuchToolbarComponentConfig implements IComponentOptions {\n    transclude = false;\n    bindings: any = {\n        gesuchid: '@',\n        fallid: '@',\n        isDashboardScreen: '@',\n        hideActionButtons: '@',\n        forceLoadingFromFall: '@'\n    };\n\n    template = templateX;\n    controller = GesuchToolbarController;\n    controllerAs = 'vmx';\n}\n\nexport class GesuchToolbarGesuchstellerComponentConfig implements IComponentOptions {\n    transclude = false;\n    bindings: any = {\n        gesuchid: '@',\n        fallid: '@',\n        isDashboardScreen: '@',\n        hideActionButtons: '@',\n        forceLoadingFromFall: '@'\n    };\n    template = templateGS;\n    controller = GesuchToolbarController;\n    // Darf, wie es scheint nicht 'vm' heissen, sonst werden im gesuchToolBarGesuchsteller.html keine Funktionen gefunden. Bug?!\n    controllerAs = 'vmgs';\n}\n\nexport class GesuchToolbarController implements IDVFocusableController {\n\n    antragList: Array<TSAntragDTO>;\n    gesuchid: string;\n    fallid: string;\n    isDashboardScreen: boolean;\n    hideActionButtons: boolean;\n    TSRoleUtil: any;\n    forceLoadingFromFall: boolean;\n    fall: TSFall;\n\n    gesuchsperiodeList: { [key: string]: Array<TSAntragDTO> } = {};\n    gesuchNavigationList: { [key: string]: Array<string> } = {};   //mapped z.B. '2006 / 2007' auf ein array mit den Namen der Antraege\n    antragTypList: { [key: string]: TSAntragDTO } = {};\n    mutierenPossibleForCurrentAntrag: boolean = false;\n    erneuernPossibleForCurrentAntrag: boolean = false;\n    neuesteGesuchsperiode: TSGesuchsperiode;\n    amountNewMitteilungenGS: number = 0;\n\n    static $inject = ['EbeguUtil', 'GesuchRS', '$state',\n        '$scope', 'GesuchModelManager', 'AuthServiceRS', '$mdSidenav', '$log', 'GesuchsperiodeRS',\n        'FallRS', 'DvDialog', 'unsavedWarningSharedService', 'MitteilungRS'];\n\n    constructor(private ebeguUtil: EbeguUtil,\n                private gesuchRS: GesuchRS,\n                private $state: IStateService, private $scope: IScope,\n                private gesuchModelManager: GesuchModelManager,\n                private authServiceRS: AuthServiceRS,\n                private $mdSidenav: ng.material.ISidenavService,\n                private $log: ILogService,\n                private gesuchsperiodeRS: GesuchsperiodeRS,\n                private fallRS: FallRS,\n                private dvDialog: DvDialog,\n                private unsavedWarningSharedService: any,\n                private mitteilungRS: MitteilungRS) {\n\n    }\n\n    $onInit() {\n        this.updateAntragDTOList();\n        //add watchers\n        this.addWatchers(this.$scope);\n        this.TSRoleUtil = TSRoleUtil;\n        this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then((response: TSGesuchsperiode[]) => {\n            // Die neueste ist zuoberst\n            this.neuesteGesuchsperiode = response[0];\n        });\n    }\n\n    private updateAmountNewMitteilungenGS(fallid: string): void {\n        this.mitteilungRS.getAmountNewMitteilungenForCurrentRolle(fallid).then((response: number) => {\n            this.amountNewMitteilungenGS = response;\n        });\n    }\n\n    public getAmountNewMitteilungenGS(): string {\n\n        return '(' + this.amountNewMitteilungenGS + ')';\n    }\n\n    public toggleSidenav(componentId: string): void {\n        this.$mdSidenav(componentId).toggle();\n    }\n\n    public closeSidenav(componentId: string): void {\n        this.$mdSidenav(componentId).close();\n    }\n\n    public logout(): void {\n        this.$state.go('login', {type: 'logout'});\n    }\n\n    private addWatchers($scope: angular.IScope) {\n        // needed because of test is not able to inject $scope!\n        if ($scope) {\n            //watcher fuer gesuch id change\n            $scope.$watch(() => {\n                return this.gesuchid;\n            }, (newValue, oldValue) => {\n                if (newValue !== oldValue) {\n                    if (this.gesuchid) {\n                        this.updateAntragDTOList();\n                    } else {\n                        this.antragTypList = {};\n                        this.gesuchNavigationList = {};\n                        this.gesuchsperiodeList = {};\n                        this.antragList = [];\n                        this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                        this.antragErneuernPossible();\n                    }\n                }\n            });\n            //watcher fuer status change\n            if (this.gesuchModelManager && this.getGesuch()) {\n                $scope.$watch(() => {\n                    return this.getGesuch().status;\n                }, (newValue, oldValue) => {\n                    if ((newValue !== oldValue) && (isAnyStatusOfVerfuegt(newValue))) {\n                        this.updateAntragDTOList();\n                    }\n                });\n            }\n            //watcher fuer fall id change\n            $scope.$watch(() => {\n                return this.fallid;\n            }, (newValue, oldValue) => {\n                if (newValue !== oldValue) {\n                    if (this.fallid) {\n                        this.updateAntragDTOList();\n                        this.updateAmountNewMitteilungenGS(this.fallid);\n                    } else {\n                        // Fall-ID hat auf undefined gewechselt -> Fall zuruecksetzen\n                        this.fall = undefined;\n                        this.antragTypList = {};\n                        this.gesuchNavigationList = {};\n                        this.gesuchsperiodeList = {};\n                        this.antragList = [];\n                        this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                        this.antragErneuernPossible();\n                    }\n                }\n            });\n            // Wenn eine Mutationsmitteilung uebernommen wird und deshalb eine neue Mutation erstellt wird, muss\n            // die toolbar aktualisisert werden, damit diese Mutation auf der Liste erscheint\n            $scope.$on(TSMitteilungEvent[TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], () => {\n                this.updateAntragDTOList();\n            });\n        }\n    }\n\n    public showGesuchPeriodeNavigationMenu(): boolean {\n        return !this.isDashboardScreen && !angular.equals(this.gesuchsperiodeList, {})\n            && !this.authServiceRS.isRole(TSRole.STEUERAMT);\n    }\n\n    /**\n     * Die Liste wird nicht angezeigt wenn sie leer ist oder wenn der Benutzer sich auf dem Dashboard befindet\n     */\n    public showAntragTypListNavigationMenu(): boolean {\n        return !this.isDashboardScreen && !angular.equals(this.antragTypList, {})\n            && !this.authServiceRS.isRole(TSRole.STEUERAMT);\n    }\n\n    public showKontaktMenu(): boolean {\n        if (this.getGesuch() && this.getGesuch().gesuchsteller1) {\n            return true;\n        }\n        return false;\n    }\n\n    public updateAntragDTOList(): void {\n        this.updateFall();\n        if (!this.forceLoadingFromFall && this.getGesuch() && this.getGesuch().id) {\n            this.gesuchRS.getAllAntragDTOForFall(this.getGesuch().fall.id).then((response) => {\n                this.antragList = angular.copy(response);\n                this.updateGesuchperiodeList();\n                this.updateGesuchNavigationList();\n                this.updateAntragTypList();\n                this.antragMutierenPossible();\n                this.antragErneuernPossible();\n            });\n        } else if (this.fallid) {\n            this.gesuchRS.getAllAntragDTOForFall(this.fallid).then((response) => {\n                this.antragList = angular.copy(response);\n                if (response && response.length > 0) {\n                    let newest = this.getNewest(this.antragList);\n                    this.gesuchRS.findGesuch(newest.antragId).then((response) => {\n                        if (!response) {\n                            this.$log.warn('Could not find gesuch for id ' + newest.antragId);\n                        }\n                        this.gesuchModelManager.setGesuch(angular.copy(response));\n                        this.updateGesuchperiodeList();\n                        this.updateGesuchNavigationList();\n                        this.updateAntragTypList();\n                        this.antragMutierenPossible();\n                        this.antragErneuernPossible();\n                    });\n                } else {\n                    // Wenn das Gesuch noch neu ist, sind wir noch ungespeichert auf der FallCreation-Seite\n                    // In diesem Fall durfen wir das Gesuch nicht zuruecksetzen\n                    if (!this.gesuchModelManager.getGesuch() || !this.gesuchModelManager.getGesuch().isNew()) {\n                        // in this case there is no Gesuch for this fall, so we remove all content\n                        this.gesuchModelManager.setGesuch(new TSGesuch());\n                        this.resetNavigationParameters();\n                    }\n                }\n            });\n            this.updateAmountNewMitteilungenGS(this.fallid);\n        } else {\n            this.resetNavigationParameters();\n        }\n        this.forceLoadingFromFall = false; // reset it because it's not needed any more\n    }\n\n    private resetNavigationParameters() {\n        this.gesuchsperiodeList = {};\n        this.gesuchNavigationList = {};\n        this.antragTypList = {};\n        this.antragMutierenPossible();\n        this.antragErneuernPossible();\n    }\n\n    private updateGesuchperiodeList() {\n        this.gesuchsperiodeList = {};\n        for (let i = 0; i < this.antragList.length; i++) {\n            let gs = this.antragList[i].gesuchsperiodeString;\n\n            if (!this.gesuchsperiodeList[gs]) {\n                this.gesuchsperiodeList[gs] = [];\n            }\n            this.gesuchsperiodeList[gs].push(this.antragList[i]);\n        }\n    }\n\n    private updateGesuchNavigationList() {\n        this.gesuchNavigationList = {};  // clear\n        for (let i = 0; i < this.antragList.length; i++) {\n            let gs = this.antragList[i].gesuchsperiodeString;\n            let antrag: TSAntragDTO = this.antragList[i];\n\n            if (!this.gesuchNavigationList[gs]) {\n                this.gesuchNavigationList[gs] = [];\n            }\n            this.gesuchNavigationList[gs].push(this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer));\n        }\n    }\n\n    private updateAntragTypList() {\n        this.antragTypList = {};  //clear\n        for (let i = 0; i < this.antragList.length; i++) {\n            let antrag: TSAntragDTO = this.antragList[i];\n            if (this.getGesuch().gesuchsperiode.gueltigkeit.gueltigAb.isSame(antrag.gesuchsperiodeGueltigAb)) {\n                let txt = this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n\n                this.antragTypList[txt] = antrag;\n            }\n\n        }\n    }\n\n    getKeys(map: { [key: string]: Array<TSAntragDTO> }): Array<String> {\n        let keys: Array<String> = [];\n        for (let key in map) {\n            if (map.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * Tries to get the \"gesuchName\" out of the gesuch contained in the gesuchModelManager. If this doesn't\n     * succeed it gets the \"gesuchName\" out of the fall\n     */\n    public getGesuchName(): string {\n        let gesuchName = this.gesuchModelManager.getGesuchName();\n        if (!gesuchName || gesuchName.length <= 0) {\n            gesuchName = this.ebeguUtil.getGesuchNameFromFall(this.fall);\n        }\n        return gesuchName;\n    }\n\n    public getGesuch(): TSGesuch {\n        return this.gesuchModelManager.getGesuch();\n    }\n\n    public getCurrentGesuchsperiode(): string {\n        if (this.getGesuch() && this.getGesuch().gesuchsperiode) {\n            return this.getGesuchsperiodeAsString(this.getGesuch().gesuchsperiode);\n        } else {\n            return '';\n        }\n    }\n\n    public getAntragTyp(): string {\n        if (this.getGesuch()) {\n            return this.ebeguUtil.getAntragTextDateAsString(this.getGesuch().typ, this.getGesuch().eingangsdatum, this.getGesuch().laufnummer);\n        } else {\n            return '';\n        }\n    }\n\n    public getGesuchsperiodeAsString(tsGesuchsperiode: TSGesuchsperiode) {\n        return tsGesuchsperiode.gesuchsperiodeString;\n    }\n\n    public setGesuchsperiode(gesuchsperiodeKey: string) {\n        let selectedGesuche = this.gesuchsperiodeList[gesuchsperiodeKey];\n        let selectedGesuch: TSAntragDTO = this.getNewest(selectedGesuche);\n\n        this.goToOpenGesuch(selectedGesuch.antragId);\n    }\n\n    private getNewest(arrayTSAntragDTO: Array<TSAntragDTO>): TSAntragDTO {\n        let newest: TSAntragDTO = arrayTSAntragDTO[0];\n        for (let i = 0; i < arrayTSAntragDTO.length; i++) {\n            // Wenn eines noch gar kein Eingangsdatum hat ist es sicher das neueste\n            if (!arrayTSAntragDTO[i].eingangsdatum) {\n                return arrayTSAntragDTO[i];\n            }\n            if (arrayTSAntragDTO[i].eingangsdatum.isAfter(newest.eingangsdatum)) {\n                newest = arrayTSAntragDTO[i];\n            }\n        }\n        return newest;\n    }\n\n    /**\n     * Institutionen werden zum Screen Betreuungen geleitet, waehrend alle anderen Benutzer zu fallCreation gehen\n     */\n    private goToOpenGesuch(gesuchId: string): void {\n        if (gesuchId) {\n            if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) {\n                this.$state.go('gesuch.betreuungen', {gesuchId: gesuchId});\n            } else if (this.authServiceRS.isRole(TSRole.STEUERAMT)) {\n                this.$state.go('gesuch.familiensituation', {gesuchId: gesuchId});\n            } else {\n                this.$state.go('gesuch.fallcreation', {\n                    createNew: false, gesuchId: gesuchId\n                });\n            }\n        }\n    }\n\n    public setAntragTypDatum(antragTypDatumKey: string) {\n        let selectedAntragTypGesuch = this.antragTypList[antragTypDatumKey];\n        this.goToOpenGesuch(selectedAntragTypGesuch.antragId);\n    }\n\n    public setAntragTypDatumMobile(gesuchperiodeKey: string, antragTypDatumKey: string) {\n        let tmpAntragList: { [key: string]: TSAntragDTO } = {};\n        for (let i = 0; i < this.antragList.length; i++) {\n            let antrag: TSAntragDTO = this.antragList[i];\n            if (this.gesuchsperiodeList[gesuchperiodeKey][0].gesuchsperiodeGueltigAb.isSame(antrag.gesuchsperiodeGueltigAb)) {\n                let txt = this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n                tmpAntragList[txt] = antrag;\n            }\n        }\n        let selectedAntragTypGesuch = tmpAntragList[antragTypDatumKey];\n        this.goToOpenGesuch(selectedAntragTypGesuch.antragId);\n    }\n\n    public showButtonMutieren(): boolean {\n        if (this.hideActionButtons) {\n            return false;\n        }\n        if (this.getGesuch()) {\n            if (this.getGesuch().isNew()) {\n                return false;\n            }\n            // Wenn die Gesuchsperiode geschlossen ist, kann sowieso keine Mutation mehr gemacht werden\n            if (this.getGesuch().gesuchsperiode && this.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus.GESCHLOSSEN) {\n                return false;\n            }\n        }\n        return this.mutierenPossibleForCurrentAntrag;\n    }\n\n    private antragMutierenPossible(): void {\n        if (this.antragList && this.antragList.length !== 0) {\n            let mutierenGesperrt = false;\n            for (let i = 0; i < this.antragList.length; i++) {\n                let antragItem: TSAntragDTO = this.antragList[i];\n                // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                if (antragItem.gesuchsperiodeString === this.getCurrentGesuchsperiode()) {\n                    // Falls wir ein Gesuch finden das nicht verfuegt ist oder eine Beschwerde hängig ist, darf nicht mutiert werden\n                    if (antragItem.verfuegt === false || antragItem.beschwerdeHaengig === true) {\n                        mutierenGesperrt = true;\n                        break;\n                    }\n                }\n            }\n            this.mutierenPossibleForCurrentAntrag = !mutierenGesperrt;\n        } else {\n            this.mutierenPossibleForCurrentAntrag = false;\n        }\n    }\n\n    public antragMutieren(): void {\n        this.mutierenPossibleForCurrentAntrag = false;\n        let eingangsart: TSEingangsart;\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            eingangsart = TSEingangsart.ONLINE;\n        } else {\n            eingangsart = TSEingangsart.PAPIER;\n        }\n        this.$state.go('gesuch.mutation', {\n            createMutation: true,\n            gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n            fallId: this.getGesuch().fall.id,\n            eingangsart: eingangsart,\n            gesuchsperiodeId: this.getGesuch().gesuchsperiode.id\n        });\n    }\n\n    private antragErneuernPossible(): void {\n        if (this.antragList && this.antragList.length !== 0) {\n            let erneuernGesperrt = false;\n            for (let i = 0; i < this.antragList.length; i++) {\n                let antragItem: TSAntragDTO = this.antragList[i];\n                // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                if (antragItem.gesuchsperiodeString === this.getGesuchsperiodeAsString(this.neuesteGesuchsperiode)) {\n                    // Es gibt schon (mindestens 1) Gesuch für die neueste Periode\n                    erneuernGesperrt = true;\n                    break;\n                }\n            }\n            this.erneuernPossibleForCurrentAntrag = !erneuernGesperrt;\n        } else {\n            this.erneuernPossibleForCurrentAntrag = false;\n        }\n    }\n\n    public antragErneuern(): void {\n        this.erneuernPossibleForCurrentAntrag = false;\n        let eingangsart: TSEingangsart;\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            eingangsart = TSEingangsart.ONLINE;\n        } else {\n            eingangsart = TSEingangsart.PAPIER;\n        }\n        this.$state.go('gesuch.erneuerung', {\n            createErneuerung: true,\n            gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n            eingangsart: eingangsart,\n            gesuchsperiodeId: this.neuesteGesuchsperiode.id,\n            fallId: this.fallid\n        });\n    }\n\n    private getGesuchIdFuerMutationOrErneuerung(): string {\n        // GesuchId ermitteln fuer Mutation ermitteln: Falls wir auf der Verlauf-View sind, nehmen wir einfach\n        // irgendeines der Liste (es wird auf dem Server sichergestellt, dass die Mutation ab dem neuesten Gesuch\n        // der Periode gemacht wird), wichtig ist nur, dass es sich um die richtige Gesuchsperiode handelt.\n        if (this.gesuchid) {\n            return this.gesuchid;\n        } else {\n            if (this.getGesuch()) {\n                return this.getGesuch().id;\n            }\n        }\n        return undefined;\n    }\n\n    private hasBesitzer(): boolean {\n        return this.fall && this.fall.besitzer !== null && this.fall.besitzer !== undefined;\n    }\n\n    private getBesitzer(): string {\n        if (this.fall) {\n            return this.fall.besitzer.getFullName();\n        }\n        return '';\n    }\n\n    public openMitteilungen(): void {\n        this.$state.go('mitteilungen', {\n            fallId: this.fallid\n        });\n    }\n\n    public showVerlauf(): boolean {\n        return this.getGesuch() !== null && this.getGesuch() !== undefined && !this.getGesuch().isNew();\n    }\n\n    public openVerlauf(): void {\n        this.$state.go('verlauf', {\n            gesuchId: this.getGesuch().id\n        });\n    }\n\n    public showGesuchLoeschen(): boolean {\n        if (!this.getGesuch() || this.getGesuch().isNew()) {\n            return false;\n        }\n        if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            // GS darf nur vor der Freigabe loeschen\n            if (this.hideActionButtons || this.isDashboardScreen || isAtLeastFreigegebenOrFreigabequittung(this.getGesuch().status)) {\n                return false;\n            }\n        } else {\n            // JA: Darf nicht verfuegen oder verfuegt sein und muss Papier sein\n            if (isStatusVerfuegenVerfuegt(this.getGesuch().status) || this.getGesuch().eingangsart === TSEingangsart.ONLINE) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public gesuchLoeschen(): IPromise<void> {\n        return this.dvDialog.showDialog(removeDialogTempl, RemoveDialogController, {\n            title: 'CONFIRM_GESUCH_LOESCHEN',\n            deleteText: 'BESCHREIBUNG_GESUCH_LOESCHEN',\n            parentController: this,\n            elementID: 'gesuchLoeschenButton'\n        }).then(() => {\n            this.setAllFormsPristine();\n            if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                this.gesuchRS.removeGesuchstellerAntrag(this.getGesuch().id).then(result => {\n                    this.gesuchModelManager.setGesuch(new TSGesuch());\n                    this.resetNavigationParameters();\n                    this.$state.go('gesuchstellerDashboard');\n                });\n            } else {\n                this.gesuchRS.removePapiergesuch(this.getGesuch().id).then(result => {\n                    if (this.antragList.length > 1) {\n                        let navObj: any = {\n                            createNew: false,\n                            gesuchId: this.antragList[0].antragId\n                        };\n                        this.$state.go('gesuch.fallcreation', navObj);\n                    } else {\n                        this.$state.go('pendenzen');\n                    }\n                });\n            }\n        });\n    }\n\n    private setAllFormsPristine(): void {\n        let forms: [IFormController] = this.unsavedWarningSharedService.allForms();\n        for (let index = 0; index < forms.length; index++) {\n            let form: IFormController = forms[index];\n            form.$setPristine();\n            form.$setUntouched();\n        }\n    }\n\n    public openAlleVerfuegungen(): void {\n        this.$state.go('alleVerfuegungen', {\n            fallId: this.fallid\n        });\n    }\n\n    private updateFall(): void {\n        if (this.fallid) {\n            this.fallRS.findFall(this.fallid).then((response: TSFall) => {\n                if (response) {\n                    this.fall = response;\n                }\n            });\n        }\n    }\n\n    public showKontakt(): void {\n        let text: string;\n        if (this.fall.isHauptverantwortlicherSchulamt()) {\n            text = '<span>Schulamt</span><br>'\n                + '<span>Effingerstrasse 21</span><br>'\n                + '<span>3008 Bern</span><br>'\n                + '<a href=\"tel:0313216460\"><span>031 321 64 60</span></a><br>'\n                + '<a href=\"mailto:schulamt@bern.ch\"><span>schulamt@bern.ch</span></a>';\n        } else {\n            text = '<span>Jugendamt</span><br>'\n                + '<span>Effingerstrasse 21</span><br>'\n                + '<span>3008 Bern</span><br>'\n                + '<a href=\"tel:0313215115\"><span>031 321 51 15</span></a><br>'\n                + '<a href=\"mailto:kinderbetreuung@bern.ch\"><span>kinderbetreuung@bern.ch</span></a>';\n        }\n        this.dvDialog.showDialog(showKontaktTemplate, ShowTooltipController, {\n            title: '',\n            text: text,\n            parentController: this\n        });\n    }\n\n    /**\n     * Sets the focus back to the Kontakt icon.\n     */\n    public setFocusBack(elementID: string): void {\n        angular.element('#kontaktButton').first().focus();\n    }\n}\n"]}]}
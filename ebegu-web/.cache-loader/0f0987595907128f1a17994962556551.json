{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts","mtime":1518535855228},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\", \"../../../models/TSGesuch\", \"../../../models/TSAntragDTO\", \"../../../models/enums/TSAntragTyp\", \"../../../models/enums/TSAntragStatus\", \"../../../utils/TSRoleUtil\", \"moment\", \"../../../models/enums/TSEingangsart\", \"../../../models/enums/TSMitteilungEvent\", \"../../../models/enums/TSRole\", \"../../../models/enums/TSGesuchsperiodeStatus\", \"../../dialog/RemoveDialogController\", \"../../dialog/ShowTooltipController\"], function (require, exports, TSGesuch_1, TSAntragDTO_1, TSAntragTyp_1, TSAntragStatus_1, TSRoleUtil_1, moment, TSEingangsart_1, TSMitteilungEvent_1, TSRole_1, TSGesuchsperiodeStatus_1, RemoveDialogController_1, ShowTooltipController_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var templateX = require('./gesuchToolbar.html');\n    var templateGS = require('./gesuchToolbarGesuchsteller.html');\n    var showKontaktTemplate = require('../../../gesuch/dialog/showKontaktTemplate.html');\n    var removeDialogTempl = require('../../dialog/removeDialogTemplate.html');\n    require('./gesuchToolbar.less');\n    var GesuchToolbarComponentConfig = /** @class */ (function () {\n        function GesuchToolbarComponentConfig() {\n            this.transclude = false;\n            this.bindings = {\n                gesuchid: '@',\n                fallid: '@',\n                isDashboardScreen: '@',\n                hideActionButtons: '@',\n                forceLoadingFromFall: '@'\n            };\n            this.template = templateX;\n            this.controller = GesuchToolbarController;\n            this.controllerAs = 'vmx';\n        }\n        return GesuchToolbarComponentConfig;\n    }());\n    exports.GesuchToolbarComponentConfig = GesuchToolbarComponentConfig;\n    var GesuchToolbarGesuchstellerComponentConfig = /** @class */ (function () {\n        function GesuchToolbarGesuchstellerComponentConfig() {\n            this.transclude = false;\n            this.bindings = {\n                gesuchid: '@',\n                fallid: '@',\n                isDashboardScreen: '@',\n                hideActionButtons: '@',\n                forceLoadingFromFall: '@'\n            };\n            this.template = templateGS;\n            this.controller = GesuchToolbarController;\n            // Darf, wie es scheint nicht 'vm' heissen, sonst werden im gesuchToolBarGesuchsteller.html keine Funktionen gefunden. Bug?!\n            this.controllerAs = 'vmgs';\n        }\n        return GesuchToolbarGesuchstellerComponentConfig;\n    }());\n    exports.GesuchToolbarGesuchstellerComponentConfig = GesuchToolbarGesuchstellerComponentConfig;\n    var GesuchToolbarController = /** @class */ (function () {\n        function GesuchToolbarController(userRS, ebeguUtil, CONSTANTS, gesuchRS, $state, $stateParams, $scope, gesuchModelManager, authServiceRS, $mdSidenav, $log, gesuchsperiodeRS, fallRS, dvDialog, unsavedWarningSharedService) {\n            this.userRS = userRS;\n            this.ebeguUtil = ebeguUtil;\n            this.CONSTANTS = CONSTANTS;\n            this.gesuchRS = gesuchRS;\n            this.$state = $state;\n            this.$stateParams = $stateParams;\n            this.$scope = $scope;\n            this.gesuchModelManager = gesuchModelManager;\n            this.authServiceRS = authServiceRS;\n            this.$mdSidenav = $mdSidenav;\n            this.$log = $log;\n            this.gesuchsperiodeRS = gesuchsperiodeRS;\n            this.fallRS = fallRS;\n            this.dvDialog = dvDialog;\n            this.unsavedWarningSharedService = unsavedWarningSharedService;\n            this.gesuchsperiodeList = {};\n            this.gesuchNavigationList = {}; //mapped z.B. '2006 / 2007' auf ein array mit den Namen der Antraege\n            this.antragTypList = {};\n            this.mutierenPossibleForCurrentAntrag = false;\n            this.erneuernPossibleForCurrentAntrag = false;\n        }\n        GesuchToolbarController.prototype.$onInit = function () {\n            var _this = this;\n            this.updateUserList();\n            this.updateAntragDTOList();\n            //add watchers\n            this.addWatchers(this.$scope);\n            this.TSRoleUtil = TSRoleUtil_1.TSRoleUtil;\n            this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then(function (response) {\n                // Die neueste ist zuoberst\n                _this.neuesteGesuchsperiode = response[0];\n            });\n        };\n        GesuchToolbarController.prototype.toggleSidenav = function (componentId) {\n            this.$mdSidenav(componentId).toggle();\n        };\n        GesuchToolbarController.prototype.closeSidenav = function (componentId) {\n            this.$mdSidenav(componentId).close();\n        };\n        GesuchToolbarController.prototype.logout = function () {\n            this.$state.go('login', { type: 'logout' });\n        };\n        GesuchToolbarController.prototype.addWatchers = function ($scope) {\n            var _this = this;\n            // needed because of test is not able to inject $scope!\n            if ($scope) {\n                //watcher fuer gesuch id change\n                $scope.$watch(function () {\n                    return _this.gesuchid;\n                }, function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        if (_this.gesuchid) {\n                            _this.updateAntragDTOList();\n                        }\n                        else {\n                            _this.antragTypList = {};\n                            _this.gesuchNavigationList = {};\n                            _this.gesuchsperiodeList = {};\n                            _this.antragList = [];\n                            _this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                            _this.antragErneuernPossible();\n                        }\n                    }\n                });\n                //watcher fuer status change\n                if (this.gesuchModelManager && this.getGesuch()) {\n                    $scope.$watch(function () {\n                        return _this.getGesuch().status;\n                    }, function (newValue, oldValue) {\n                        if ((newValue !== oldValue) && (TSAntragStatus_1.isAnyStatusOfVerfuegt(newValue))) {\n                            _this.updateAntragDTOList();\n                        }\n                    });\n                }\n                //watcher fuer fall id change\n                $scope.$watch(function () {\n                    return _this.fallid;\n                }, function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        if (_this.fallid) {\n                            _this.updateAntragDTOList();\n                        }\n                        else {\n                            // Fall-ID hat auf undefined gewechselt -> Fall zuruecksetzen\n                            _this.fall = undefined;\n                            _this.antragTypList = {};\n                            _this.gesuchNavigationList = {};\n                            _this.gesuchsperiodeList = {};\n                            _this.antragList = [];\n                            _this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                            _this.antragErneuernPossible();\n                        }\n                    }\n                });\n                // Wenn eine Mutationsmitteilung uebernommen wird und deshalb eine neue Mutation erstellt wird, muss\n                // die toolbar aktualisisert werden, damit diese Mutation auf der Liste erscheint\n                $scope.$on(TSMitteilungEvent_1.TSMitteilungEvent[TSMitteilungEvent_1.TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], function () {\n                    _this.updateAntragDTOList();\n                });\n            }\n        };\n        GesuchToolbarController.prototype.showGesuchPeriodeNavigationMenu = function () {\n            return !this.isDashboardScreen && !angular.equals(this.gesuchsperiodeList, {})\n                && !this.authServiceRS.isRole(TSRole_1.TSRole.STEUERAMT);\n        };\n        /**\n         * Die Liste wird nicht angezeigt wenn sie leer ist oder wenn der Benutzer sich auf dem Dashboard befindet\n         */\n        GesuchToolbarController.prototype.showAntragTypListNavigationMenu = function () {\n            return !this.isDashboardScreen && !angular.equals(this.antragTypList, {})\n                && !this.authServiceRS.isRole(TSRole_1.TSRole.STEUERAMT);\n        };\n        GesuchToolbarController.prototype.showKontaktMenu = function () {\n            if (this.getGesuch() && this.getGesuch().gesuchsteller1) {\n                return true;\n            }\n            return false;\n        };\n        GesuchToolbarController.prototype.getVerantwortlicherFullName = function () {\n            if (this.getGesuch() && this.getGesuch().fall && this.getGesuch().fall.verantwortlicher) {\n                return this.getGesuch().fall.verantwortlicher.getFullName();\n            }\n            return '';\n        };\n        GesuchToolbarController.prototype.updateUserList = function () {\n            var _this = this;\n            //not needed for Gesuchsteller\n            if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAllRolesButGesuchsteller())) {\n                this.userRS.getBenutzerJAorAdmin().then(function (response) {\n                    _this.userList = angular.copy(response);\n                });\n            }\n        };\n        GesuchToolbarController.prototype.updateAntragDTOList = function () {\n            var _this = this;\n            this.updateFall();\n            if (!this.forceLoadingFromFall && this.getGesuch() && this.getGesuch().id) {\n                this.gesuchRS.getAllAntragDTOForFall(this.getGesuch().fall.id).then(function (response) {\n                    _this.antragList = angular.copy(response);\n                    _this.updateGesuchperiodeList();\n                    _this.updateGesuchNavigationList();\n                    _this.updateAntragTypList();\n                    _this.antragMutierenPossible();\n                    _this.antragErneuernPossible();\n                });\n            }\n            else if (this.fallid) {\n                this.gesuchRS.getAllAntragDTOForFall(this.fallid).then(function (response) {\n                    _this.antragList = angular.copy(response);\n                    if (response && response.length > 0) {\n                        var newest_1 = _this.getNewest(_this.antragList);\n                        _this.gesuchRS.findGesuch(newest_1.antragId).then(function (response) {\n                            if (!response) {\n                                _this.$log.warn('Could not find gesuch for id ' + newest_1.antragId);\n                            }\n                            _this.gesuchModelManager.setGesuch(angular.copy(response));\n                            _this.updateGesuchperiodeList();\n                            _this.updateGesuchNavigationList();\n                            _this.updateAntragTypList();\n                            _this.antragMutierenPossible();\n                            _this.antragErneuernPossible();\n                        });\n                    }\n                    else {\n                        // Wenn das Gesuch noch neu ist, sind wir noch ungespeichert auf der FallCreation-Seite\n                        // In diesem Fall durfen wir das Gesuch nicht zuruecksetzen\n                        if (!_this.gesuchModelManager.getGesuch() || !_this.gesuchModelManager.getGesuch().isNew()) {\n                            // in this case there is no Gesuch for this fall, so we remove all content\n                            _this.gesuchModelManager.setGesuch(new TSGesuch_1.default());\n                            _this.resetNavigationParameters();\n                        }\n                    }\n                });\n            }\n            else {\n                this.resetNavigationParameters();\n            }\n            this.forceLoadingFromFall = false; // reset it because it's not needed any more\n        };\n        GesuchToolbarController.prototype.resetNavigationParameters = function () {\n            this.gesuchsperiodeList = {};\n            this.gesuchNavigationList = {};\n            this.antragTypList = {};\n            this.antragMutierenPossible();\n            this.antragErneuernPossible();\n        };\n        GesuchToolbarController.prototype.updateGesuchperiodeList = function () {\n            this.gesuchsperiodeList = {};\n            for (var i = 0; i < this.antragList.length; i++) {\n                var gs = this.antragList[i].gesuchsperiodeString;\n                if (!this.gesuchsperiodeList[gs]) {\n                    this.gesuchsperiodeList[gs] = [];\n                }\n                this.gesuchsperiodeList[gs].push(this.antragList[i]);\n            }\n        };\n        GesuchToolbarController.prototype.updateGesuchNavigationList = function () {\n            this.gesuchNavigationList = {}; // clear\n            for (var i = 0; i < this.antragList.length; i++) {\n                var gs = this.antragList[i].gesuchsperiodeString;\n                var antrag = this.antragList[i];\n                if (!this.gesuchNavigationList[gs]) {\n                    this.gesuchNavigationList[gs] = [];\n                }\n                this.gesuchNavigationList[gs].push(this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer));\n            }\n        };\n        GesuchToolbarController.prototype.updateAntragTypList = function () {\n            this.antragTypList = {}; //clear\n            for (var i = 0; i < this.antragList.length; i++) {\n                var antrag = this.antragList[i];\n                if (this.getGesuch().gesuchsperiode.gueltigkeit.gueltigAb.isSame(antrag.gesuchsperiodeGueltigAb)) {\n                    var txt = this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n                    this.antragTypList[txt] = antrag;\n                }\n            }\n        };\n        GesuchToolbarController.prototype.getKeys = function (map) {\n            var keys = [];\n            for (var key in map) {\n                if (map.hasOwnProperty(key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n        /**\n         * Sets the given user as the verantworlicher fuer den aktuellen Fall\n         * @param verantwortlicher\n         */\n        GesuchToolbarController.prototype.setVerantwortlicher = function (verantwortlicher) {\n            if (verantwortlicher) {\n                this.gesuchModelManager.setUserAsFallVerantwortlicher(verantwortlicher);\n                this.gesuchModelManager.updateFall();\n            }\n            this.setUserAsFallVerantwortlicherLocal(verantwortlicher);\n        };\n        /**\n         * Change local gesuch to change the current view\n         * @param user\n         */\n        GesuchToolbarController.prototype.setUserAsFallVerantwortlicherLocal = function (user) {\n            if (user && this.getGesuch() && this.getGesuch().fall) {\n                this.getGesuch().fall.verantwortlicher = user;\n            }\n        };\n        /**\n         *\n         * @param user\n         * @returns {boolean} true if the given user is already the verantwortlicher of the current fall\n         */\n        GesuchToolbarController.prototype.isCurrentVerantwortlicher = function (user) {\n            return (user && this.getFallVerantwortlicher() && this.getFallVerantwortlicher().username === user.username);\n        };\n        GesuchToolbarController.prototype.getFallVerantwortlicher = function () {\n            if (this.getGesuch() && this.getGesuch().fall) {\n                return this.getGesuch().fall.verantwortlicher;\n            }\n            return undefined;\n        };\n        /**\n         * Tries to get the \"gesuchName\" out of the gesuch contained in the gesuchModelManager. If this doesn't\n         * succeed it gets the \"gesuchName\" out of the fall\n         */\n        GesuchToolbarController.prototype.getGesuchName = function () {\n            var gesuchName = this.gesuchModelManager.getGesuchName();\n            if (!gesuchName || gesuchName.length <= 0) {\n                gesuchName = this.ebeguUtil.getGesuchNameFromFall(this.fall);\n            }\n            return gesuchName;\n        };\n        GesuchToolbarController.prototype.getGesuch = function () {\n            return this.gesuchModelManager.getGesuch();\n        };\n        GesuchToolbarController.prototype.getCurrentGesuchsperiode = function () {\n            if (this.getGesuch() && this.getGesuch().gesuchsperiode) {\n                return this.getGesuchsperiodeAsString(this.getGesuch().gesuchsperiode);\n            }\n            else {\n                return '';\n            }\n        };\n        GesuchToolbarController.prototype.getAntragTyp = function () {\n            if (this.getGesuch()) {\n                return this.ebeguUtil.getAntragTextDateAsString(this.getGesuch().typ, this.getGesuch().eingangsdatum, this.getGesuch().laufnummer);\n            }\n            else {\n                return '';\n            }\n        };\n        GesuchToolbarController.prototype.getAntragDatum = function () {\n            if (this.getGesuch() && this.getGesuch().eingangsdatum) {\n                return this.getGesuch().eingangsdatum;\n            }\n            else {\n                return moment();\n            }\n        };\n        GesuchToolbarController.prototype.getGesuchsperiodeAsString = function (tsGesuchsperiode) {\n            return tsGesuchsperiode.gesuchsperiodeString;\n        };\n        GesuchToolbarController.prototype.setGesuchsperiode = function (gesuchsperiodeKey) {\n            var selectedGesuche = this.gesuchsperiodeList[gesuchsperiodeKey];\n            var selectedGesuch = this.getNewest(selectedGesuche);\n            this.goToOpenGesuch(selectedGesuch.antragId);\n        };\n        GesuchToolbarController.prototype.getNewest = function (arrayTSAntragDTO) {\n            var newest = arrayTSAntragDTO[0];\n            for (var i = 0; i < arrayTSAntragDTO.length; i++) {\n                // Wenn eines noch gar kein Eingangsdatum hat ist es sicher das neueste\n                if (!arrayTSAntragDTO[i].eingangsdatum) {\n                    return arrayTSAntragDTO[i];\n                }\n                if (arrayTSAntragDTO[i].eingangsdatum.isAfter(newest.eingangsdatum)) {\n                    newest = arrayTSAntragDTO[i];\n                }\n            }\n            return newest;\n        };\n        /**\n         * Institutionen werden zum Screen Betreuungen geleitet, waehrend alle anderen Benutzer zu fallCreation gehen\n         */\n        GesuchToolbarController.prototype.goToOpenGesuch = function (gesuchId) {\n            if (gesuchId) {\n                if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) {\n                    this.$state.go('gesuch.betreuungen', { gesuchId: gesuchId });\n                }\n                else if (this.authServiceRS.isRole(TSRole_1.TSRole.STEUERAMT)) {\n                    this.$state.go('gesuch.familiensituation', { gesuchId: gesuchId });\n                }\n                else {\n                    this.$state.go('gesuch.fallcreation', {\n                        createNew: false, gesuchId: gesuchId\n                    });\n                }\n            }\n        };\n        GesuchToolbarController.prototype.setAntragTypDatum = function (antragTypDatumKey) {\n            var selectedAntragTypGesuch = this.antragTypList[antragTypDatumKey];\n            this.goToOpenGesuch(selectedAntragTypGesuch.antragId);\n        };\n        GesuchToolbarController.prototype.showButtonMutieren = function () {\n            if (this.hideActionButtons) {\n                return false;\n            }\n            if (this.getGesuch()) {\n                if (this.getGesuch().isNew()) {\n                    return false;\n                }\n                // Wenn die Gesuchsperiode geschlossen ist, kann sowieso keine Mutation mehr gemacht werden\n                if (this.getGesuch().gesuchsperiode && this.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus_1.TSGesuchsperiodeStatus.GESCHLOSSEN) {\n                    return false;\n                }\n            }\n            return this.mutierenPossibleForCurrentAntrag;\n        };\n        GesuchToolbarController.prototype.antragMutierenPossible = function () {\n            if (this.antragList && this.antragList.length !== 0) {\n                var mutierenGesperrt = false;\n                for (var i = 0; i < this.antragList.length; i++) {\n                    var antragItem = this.antragList[i];\n                    // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                    if (antragItem.gesuchsperiodeString === this.getCurrentGesuchsperiode()) {\n                        // Falls wir ein Gesuch finden das nicht verfuegt ist oder eine Beschwerde hängig ist, darf nicht mutiert werden\n                        if (antragItem.verfuegt === false || antragItem.beschwerdeHaengig === true) {\n                            mutierenGesperrt = true;\n                            break;\n                        }\n                    }\n                }\n                this.mutierenPossibleForCurrentAntrag = !mutierenGesperrt;\n            }\n            else {\n                this.mutierenPossibleForCurrentAntrag = false;\n            }\n        };\n        GesuchToolbarController.prototype.antragMutieren = function () {\n            this.mutierenPossibleForCurrentAntrag = false;\n            var eingangsart;\n            if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                eingangsart = TSEingangsart_1.TSEingangsart.ONLINE;\n            }\n            else {\n                eingangsart = TSEingangsart_1.TSEingangsart.PAPIER;\n            }\n            this.$state.go('gesuch.mutation', {\n                createMutation: true,\n                gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n                fallId: this.getGesuch().fall.id,\n                eingangsart: eingangsart,\n                gesuchsperiodeId: this.getGesuch().gesuchsperiode.id\n            });\n        };\n        GesuchToolbarController.prototype.antragErneuernPossible = function () {\n            if (this.antragList && this.antragList.length !== 0) {\n                var erneuernGesperrt = false;\n                for (var i = 0; i < this.antragList.length; i++) {\n                    var antragItem = this.antragList[i];\n                    // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                    if (antragItem.gesuchsperiodeString === this.getGesuchsperiodeAsString(this.neuesteGesuchsperiode)) {\n                        // Es gibt schon (mindestens 1) Gesuch für die neueste Periode\n                        erneuernGesperrt = true;\n                        break;\n                    }\n                }\n                this.erneuernPossibleForCurrentAntrag = !erneuernGesperrt;\n            }\n            else {\n                this.erneuernPossibleForCurrentAntrag = false;\n            }\n        };\n        GesuchToolbarController.prototype.antragErneuern = function () {\n            this.erneuernPossibleForCurrentAntrag = false;\n            var eingangsart;\n            if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                eingangsart = TSEingangsart_1.TSEingangsart.ONLINE;\n            }\n            else {\n                eingangsart = TSEingangsart_1.TSEingangsart.PAPIER;\n            }\n            this.$state.go('gesuch.erneuerung', {\n                createErneuerung: true,\n                gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n                eingangsart: eingangsart,\n                gesuchsperiodeId: this.neuesteGesuchsperiode.id,\n                fallId: this.fallid\n            });\n        };\n        GesuchToolbarController.prototype.getGesuchIdFuerMutationOrErneuerung = function () {\n            // GesuchId ermitteln fuer Mutation ermitteln: Falls wir auf der Verlauf-View sind, nehmen wir einfach\n            // irgendeines der Liste (es wird auf dem Server sichergestellt, dass die Mutation ab dem neuesten Gesuch\n            // der Periode gemacht wird), wichtig ist nur, dass es sich um die richtige Gesuchsperiode handelt.\n            if (this.gesuchid) {\n                return this.gesuchid;\n            }\n            else {\n                if (this.getGesuch()) {\n                    return this.getGesuch().id;\n                }\n            }\n            return undefined;\n        };\n        GesuchToolbarController.prototype.addAntragToList = function (antrag) {\n            var antragDTO = new TSAntragDTO_1.default();\n            antragDTO.antragTyp = TSAntragTyp_1.TSAntragTyp.MUTATION;\n            var txt = this.ebeguUtil.getAntragTextDateAsString(antragDTO.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n            this.antragTypList[txt] = antragDTO;\n        };\n        GesuchToolbarController.prototype.hasBesitzer = function () {\n            return this.fall && this.fall.besitzer !== null && this.fall.besitzer !== undefined;\n        };\n        GesuchToolbarController.prototype.getBesitzer = function () {\n            if (this.fall) {\n                return this.fall.besitzer.getFullName();\n            }\n            return '';\n        };\n        GesuchToolbarController.prototype.openMitteilungen = function () {\n            this.$state.go('mitteilungen', {\n                fallId: this.fallid\n            });\n        };\n        GesuchToolbarController.prototype.showVerlauf = function () {\n            return this.getGesuch() !== null && this.getGesuch() !== undefined && !this.getGesuch().isNew();\n        };\n        GesuchToolbarController.prototype.openVerlauf = function () {\n            this.$state.go('verlauf', {\n                gesuchId: this.getGesuch().id\n            });\n        };\n        GesuchToolbarController.prototype.showGesuchLoeschen = function () {\n            if (!this.getGesuch() || this.getGesuch().isNew()) {\n                return false;\n            }\n            if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                // GS darf nur vor der Freigabe loeschen\n                if (this.hideActionButtons || this.isDashboardScreen || TSAntragStatus_1.isAtLeastFreigegebenOrFreigabequittung(this.getGesuch().status)) {\n                    return false;\n                }\n            }\n            else {\n                // JA: Darf nicht verfuegen oder verfuegt sein und muss Papier sein\n                if (TSAntragStatus_1.isStatusVerfuegenVerfuegt(this.getGesuch().status) || this.getGesuch().eingangsart === TSEingangsart_1.TSEingangsart.ONLINE) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        GesuchToolbarController.prototype.gesuchLoeschen = function () {\n            var _this = this;\n            return this.dvDialog.showDialog(removeDialogTempl, RemoveDialogController_1.RemoveDialogController, {\n                title: 'CONFIRM_GESUCH_LOESCHEN',\n                deleteText: 'BESCHREIBUNG_GESUCH_LOESCHEN',\n                parentController: this,\n                elementID: 'gesuchLoeschenButton'\n            }).then(function () {\n                _this.setAllFormsPristine();\n                if (_this.authServiceRS.isOneOfRoles(_this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                    _this.gesuchRS.removeGesuchstellerAntrag(_this.getGesuch().id).then(function (result) {\n                        _this.gesuchModelManager.setGesuch(new TSGesuch_1.default());\n                        _this.resetNavigationParameters();\n                        _this.$state.go('gesuchstellerDashboard');\n                    });\n                }\n                else {\n                    _this.gesuchRS.removePapiergesuch(_this.getGesuch().id).then(function (result) {\n                        if (_this.antragList.length > 1) {\n                            var navObj = {\n                                createNew: false,\n                                gesuchId: _this.antragList[0].antragId\n                            };\n                            _this.$state.go('gesuch.fallcreation', navObj);\n                        }\n                        else {\n                            _this.$state.go('pendenzen');\n                        }\n                    });\n                }\n            });\n        };\n        GesuchToolbarController.prototype.setAllFormsPristine = function () {\n            var forms = this.unsavedWarningSharedService.allForms();\n            for (var index = 0; index < forms.length; index++) {\n                var form = forms[index];\n                form.$setPristine();\n                form.$setUntouched();\n            }\n        };\n        GesuchToolbarController.prototype.openAlleVerfuegungen = function () {\n            this.$state.go('alleVerfuegungen', {\n                fallId: this.fallid\n            });\n        };\n        GesuchToolbarController.prototype.updateFall = function () {\n            var _this = this;\n            if (this.fallid) {\n                this.fallRS.findFall(this.fallid).then(function (response) {\n                    if (response) {\n                        _this.fall = response;\n                    }\n                });\n            }\n        };\n        GesuchToolbarController.prototype.hasGesuch = function () {\n            return this.antragList && this.antragList.length > 0;\n        };\n        GesuchToolbarController.prototype.showKontakt = function () {\n            this.dvDialog.showDialog(showKontaktTemplate, ShowTooltipController_1.ShowTooltipController, {\n                title: '',\n                text: '<span>Jugendamt</span><br>'\n                    + '<span>Effingerstrasse 21</span><br>'\n                    + '<span>3008 Bern</span><br>'\n                    + '<a href=\"tel:0313215115\"><span>031 321 51 15</span></a><br>'\n                    + '<a href=\"mailto:kinderbetreuung@bern.ch\"><span>kinderbetreuung@bern.ch</span></a>',\n                parentController: this\n            });\n        };\n        /**\n         * Sets the focus back to the Kontakt icon.\n         */\n        GesuchToolbarController.prototype.setFocusBack = function (elementID) {\n            angular.element('#kontaktButton').first().focus();\n        };\n        GesuchToolbarController.$inject = ['UserRS', 'EbeguUtil', 'CONSTANTS', 'GesuchRS',\n            '$state', '$stateParams', '$scope', 'GesuchModelManager', 'AuthServiceRS',\n            '$mdSidenav', '$log', 'GesuchsperiodeRS', 'FallRS', 'DvDialog', 'unsavedWarningSharedService'];\n        return GesuchToolbarController;\n    }());\n    exports.GesuchToolbarController = GesuchToolbarController;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/gesuchToolbar/gesuchToolbar.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions, IFormController, ILogService} from 'angular';\nimport UserRS from '../../../core/service/userRS.rest';\nimport TSUser from '../../../models/TSUser';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport TSGesuchsperiode from '../../../models/TSGesuchsperiode';\nimport TSGesuch from '../../../models/TSGesuch';\nimport GesuchRS from '../../service/gesuchRS.rest';\nimport {IStateService} from 'angular-ui-router';\nimport TSAntragDTO from '../../../models/TSAntragDTO';\nimport {IGesuchStateParams} from '../../gesuch.route';\nimport {TSAntragTyp} from '../../../models/enums/TSAntragTyp';\nimport GesuchModelManager from '../../service/gesuchModelManager';\nimport {\n    isAnyStatusOfVerfuegt,\n    isAtLeastFreigegebenOrFreigabequittung,\n    isStatusVerfuegenVerfuegt\n} from '../../../models/enums/TSAntragStatus';\nimport {TSRoleUtil} from '../../../utils/TSRoleUtil';\nimport AuthServiceRS from '../../../authentication/service/AuthServiceRS.rest';\nimport * as moment from 'moment';\nimport {TSEingangsart} from '../../../models/enums/TSEingangsart';\nimport {TSMitteilungEvent} from '../../../models/enums/TSMitteilungEvent';\nimport {TSRole} from '../../../models/enums/TSRole';\nimport GesuchsperiodeRS from '../../../core/service/gesuchsperiodeRS.rest';\nimport {TSGesuchsperiodeStatus} from '../../../models/enums/TSGesuchsperiodeStatus';\nimport FallRS from '../../service/fallRS.rest';\nimport TSFall from '../../../models/TSFall';\nimport {DvDialog} from '../../../core/directive/dv-dialog/dv-dialog';\nimport {RemoveDialogController} from '../../dialog/RemoveDialogController';\n\nimport {ShowTooltipController} from '../../dialog/ShowTooltipController';\nimport {IDVFocusableController} from '../../../core/component/IDVFocusableController';\nimport IPromise = angular.IPromise;\nimport Moment = moment.Moment;\nimport IScope = angular.IScope;\n\nlet templateX = require('./gesuchToolbar.html');\nlet templateGS = require('./gesuchToolbarGesuchsteller.html');\nlet showKontaktTemplate = require('../../../gesuch/dialog/showKontaktTemplate.html');\nlet removeDialogTempl = require('../../dialog/removeDialogTemplate.html');\nrequire('./gesuchToolbar.less');\n\nexport class GesuchToolbarComponentConfig implements IComponentOptions {\n    transclude = false;\n    bindings: any = {\n        gesuchid: '@',\n        fallid: '@',\n        isDashboardScreen: '@',\n        hideActionButtons: '@',\n        forceLoadingFromFall: '@'\n    };\n\n    template = templateX;\n    controller = GesuchToolbarController;\n    controllerAs = 'vmx';\n}\n\nexport class GesuchToolbarGesuchstellerComponentConfig implements IComponentOptions {\n    transclude = false;\n    bindings: any = {\n        gesuchid: '@',\n        fallid: '@',\n        isDashboardScreen: '@',\n        hideActionButtons: '@',\n        forceLoadingFromFall: '@'\n    };\n    template = templateGS;\n    controller = GesuchToolbarController;\n    // Darf, wie es scheint nicht 'vm' heissen, sonst werden im gesuchToolBarGesuchsteller.html keine Funktionen gefunden. Bug?!\n    controllerAs = 'vmgs';\n}\n\nexport class GesuchToolbarController implements IDVFocusableController {\n\n    userList: Array<TSUser>;\n    antragList: Array<TSAntragDTO>;\n    gesuchid: string;\n    fallid: string;\n    isDashboardScreen: boolean;\n    hideActionButtons: boolean;\n    TSRoleUtil: any;\n    forceLoadingFromFall: boolean;\n    fall: TSFall;\n\n    gesuchsperiodeList: { [key: string]: Array<TSAntragDTO> } = {};\n    gesuchNavigationList: { [key: string]: Array<string> } = {};   //mapped z.B. '2006 / 2007' auf ein array mit den Namen der Antraege\n    antragTypList: { [key: string]: TSAntragDTO } = {};\n    mutierenPossibleForCurrentAntrag: boolean = false;\n    erneuernPossibleForCurrentAntrag: boolean = false;\n    neuesteGesuchsperiode: TSGesuchsperiode;\n\n    static $inject = ['UserRS', 'EbeguUtil', 'CONSTANTS', 'GesuchRS',\n        '$state', '$stateParams', '$scope', 'GesuchModelManager', 'AuthServiceRS',\n        '$mdSidenav', '$log', 'GesuchsperiodeRS', 'FallRS', 'DvDialog', 'unsavedWarningSharedService'];\n\n    constructor(private userRS: UserRS, private ebeguUtil: EbeguUtil,\n        private CONSTANTS: any, private gesuchRS: GesuchRS,\n        private $state: IStateService, private $stateParams: IGesuchStateParams, private $scope: IScope,\n        private gesuchModelManager: GesuchModelManager,\n        private authServiceRS: AuthServiceRS,\n        private $mdSidenav: ng.material.ISidenavService,\n        private $log: ILogService,\n        private gesuchsperiodeRS: GesuchsperiodeRS,\n        private fallRS: FallRS,\n        private dvDialog: DvDialog,\n        private unsavedWarningSharedService: any) {\n\n    }\n\n    $onInit() {\n        this.updateUserList();\n        this.updateAntragDTOList();\n        //add watchers\n        this.addWatchers(this.$scope);\n        this.TSRoleUtil = TSRoleUtil;\n        this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then((response: TSGesuchsperiode[]) => {\n            // Die neueste ist zuoberst\n            this.neuesteGesuchsperiode = response[0];\n        });\n    }\n\n    public toggleSidenav(componentId: string): void {\n        this.$mdSidenav(componentId).toggle();\n    }\n\n    public closeSidenav(componentId: string): void {\n        this.$mdSidenav(componentId).close();\n    }\n\n    public logout(): void {\n        this.$state.go('login', {type: 'logout'});\n    }\n\n    private addWatchers($scope: angular.IScope) {\n        // needed because of test is not able to inject $scope!\n        if ($scope) {\n            //watcher fuer gesuch id change\n            $scope.$watch(() => {\n                return this.gesuchid;\n            }, (newValue, oldValue) => {\n                if (newValue !== oldValue) {\n                    if (this.gesuchid) {\n                        this.updateAntragDTOList();\n                    } else {\n                        this.antragTypList = {};\n                        this.gesuchNavigationList = {};\n                        this.gesuchsperiodeList = {};\n                        this.antragList = [];\n                        this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                        this.antragErneuernPossible();\n                    }\n                }\n            });\n            //watcher fuer status change\n            if (this.gesuchModelManager && this.getGesuch()) {\n                $scope.$watch(() => {\n                    return this.getGesuch().status;\n                }, (newValue, oldValue) => {\n                    if ((newValue !== oldValue) && (isAnyStatusOfVerfuegt(newValue))) {\n                        this.updateAntragDTOList();\n                    }\n                });\n            }\n            //watcher fuer fall id change\n            $scope.$watch(() => {\n                return this.fallid;\n            }, (newValue, oldValue) => {\n                if (newValue !== oldValue) {\n                    if (this.fallid) {\n                        this.updateAntragDTOList();\n                    } else {\n                        // Fall-ID hat auf undefined gewechselt -> Fall zuruecksetzen\n                        this.fall = undefined;\n                        this.antragTypList = {};\n                        this.gesuchNavigationList = {};\n                        this.gesuchsperiodeList = {};\n                        this.antragList = [];\n                        this.antragMutierenPossible(); //neu berechnen ob mutieren moeglich ist\n                        this.antragErneuernPossible();\n                    }\n                }\n            });\n            // Wenn eine Mutationsmitteilung uebernommen wird und deshalb eine neue Mutation erstellt wird, muss\n            // die toolbar aktualisisert werden, damit diese Mutation auf der Liste erscheint\n            $scope.$on(TSMitteilungEvent[TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], () => {\n                this.updateAntragDTOList();\n            });\n        }\n    }\n\n    public showGesuchPeriodeNavigationMenu(): boolean {\n        return !this.isDashboardScreen && !angular.equals(this.gesuchsperiodeList, {})\n            && !this.authServiceRS.isRole(TSRole.STEUERAMT);\n    }\n\n    /**\n     * Die Liste wird nicht angezeigt wenn sie leer ist oder wenn der Benutzer sich auf dem Dashboard befindet\n     */\n    public showAntragTypListNavigationMenu(): boolean {\n        return !this.isDashboardScreen && !angular.equals(this.antragTypList, {})\n            && !this.authServiceRS.isRole(TSRole.STEUERAMT);\n    }\n\n    public showKontaktMenu(): boolean {\n        if (this.getGesuch() && this.getGesuch().gesuchsteller1) {\n            return true;\n        }\n        return false;\n    }\n\n    public getVerantwortlicherFullName(): string {\n        if (this.getGesuch() && this.getGesuch().fall && this.getGesuch().fall.verantwortlicher) {\n            return this.getGesuch().fall.verantwortlicher.getFullName();\n        }\n        return '';\n    }\n\n    public updateUserList(): void {\n        //not needed for Gesuchsteller\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getAllRolesButGesuchsteller())) {\n            this.userRS.getBenutzerJAorAdmin().then((response) => {\n                this.userList = angular.copy(response);\n            });\n        }\n    }\n\n    public updateAntragDTOList(): void {\n        this.updateFall();\n        if (!this.forceLoadingFromFall && this.getGesuch() && this.getGesuch().id) {\n            this.gesuchRS.getAllAntragDTOForFall(this.getGesuch().fall.id).then((response) => {\n                this.antragList = angular.copy(response);\n                this.updateGesuchperiodeList();\n                this.updateGesuchNavigationList();\n                this.updateAntragTypList();\n                this.antragMutierenPossible();\n                this.antragErneuernPossible();\n            });\n        } else if (this.fallid) {\n            this.gesuchRS.getAllAntragDTOForFall(this.fallid).then((response) => {\n                this.antragList = angular.copy(response);\n                if (response && response.length > 0) {\n                    let newest = this.getNewest(this.antragList);\n                    this.gesuchRS.findGesuch(newest.antragId).then((response) => {\n                        if (!response) {\n                            this.$log.warn('Could not find gesuch for id ' + newest.antragId);\n                        }\n                        this.gesuchModelManager.setGesuch(angular.copy(response));\n                        this.updateGesuchperiodeList();\n                        this.updateGesuchNavigationList();\n                        this.updateAntragTypList();\n                        this.antragMutierenPossible();\n                        this.antragErneuernPossible();\n                    });\n                } else {\n                    // Wenn das Gesuch noch neu ist, sind wir noch ungespeichert auf der FallCreation-Seite\n                    // In diesem Fall durfen wir das Gesuch nicht zuruecksetzen\n                    if (!this.gesuchModelManager.getGesuch() || !this.gesuchModelManager.getGesuch().isNew()) {\n                        // in this case there is no Gesuch for this fall, so we remove all content\n                        this.gesuchModelManager.setGesuch(new TSGesuch());\n                        this.resetNavigationParameters();\n                    }\n                }\n            });\n        } else {\n            this.resetNavigationParameters();\n        }\n        this.forceLoadingFromFall = false; // reset it because it's not needed any more\n    }\n\n    private resetNavigationParameters() {\n        this.gesuchsperiodeList = {};\n        this.gesuchNavigationList = {};\n        this.antragTypList = {};\n        this.antragMutierenPossible();\n        this.antragErneuernPossible();\n    }\n\n    private updateGesuchperiodeList() {\n        this.gesuchsperiodeList = {};\n        for (let i = 0; i < this.antragList.length; i++) {\n            let gs = this.antragList[i].gesuchsperiodeString;\n\n            if (!this.gesuchsperiodeList[gs]) {\n                this.gesuchsperiodeList[gs] = [];\n            }\n            this.gesuchsperiodeList[gs].push(this.antragList[i]);\n        }\n    }\n\n    private updateGesuchNavigationList() {\n        this.gesuchNavigationList = {};  // clear\n        for (let i = 0; i < this.antragList.length; i++) {\n            let gs = this.antragList[i].gesuchsperiodeString;\n            let antrag: TSAntragDTO = this.antragList[i];\n\n            if (!this.gesuchNavigationList[gs]) {\n                this.gesuchNavigationList[gs] = [];\n            }\n            this.gesuchNavigationList[gs].push(this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer));\n        }\n    }\n\n    private updateAntragTypList() {\n        this.antragTypList = {};  //clear\n        for (let i = 0; i < this.antragList.length; i++) {\n            let antrag: TSAntragDTO = this.antragList[i];\n            if (this.getGesuch().gesuchsperiode.gueltigkeit.gueltigAb.isSame(antrag.gesuchsperiodeGueltigAb)) {\n                let txt = this.ebeguUtil.getAntragTextDateAsString(antrag.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n\n                this.antragTypList[txt] = antrag;\n            }\n\n        }\n    }\n\n    getKeys(map: { [key: string]: Array<TSAntragDTO> }): Array<String> {\n        let keys: Array<String> = [];\n        for (let key in map) {\n            if (map.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * Sets the given user as the verantworlicher fuer den aktuellen Fall\n     * @param verantwortlicher\n     */\n    public setVerantwortlicher(verantwortlicher: TSUser): void {\n        if (verantwortlicher) {\n            this.gesuchModelManager.setUserAsFallVerantwortlicher(verantwortlicher);\n            this.gesuchModelManager.updateFall();\n        }\n        this.setUserAsFallVerantwortlicherLocal(verantwortlicher);\n    }\n\n    /**\n     * Change local gesuch to change the current view\n     * @param user\n     */\n    public setUserAsFallVerantwortlicherLocal(user: TSUser) {\n        if (user && this.getGesuch() && this.getGesuch().fall) {\n            this.getGesuch().fall.verantwortlicher = user;\n        }\n    }\n\n    /**\n     *\n     * @param user\n     * @returns {boolean} true if the given user is already the verantwortlicher of the current fall\n     */\n    public isCurrentVerantwortlicher(user: TSUser): boolean {\n        return (user && this.getFallVerantwortlicher() && this.getFallVerantwortlicher().username === user.username);\n    }\n\n    public getFallVerantwortlicher(): TSUser {\n        if (this.getGesuch() && this.getGesuch().fall) {\n            return this.getGesuch().fall.verantwortlicher;\n        }\n        return undefined;\n    }\n\n    /**\n     * Tries to get the \"gesuchName\" out of the gesuch contained in the gesuchModelManager. If this doesn't\n     * succeed it gets the \"gesuchName\" out of the fall\n     */\n    public getGesuchName(): string {\n        let gesuchName = this.gesuchModelManager.getGesuchName();\n        if (!gesuchName || gesuchName.length <= 0) {\n            gesuchName = this.ebeguUtil.getGesuchNameFromFall(this.fall);\n        }\n        return gesuchName;\n    }\n\n    public getGesuch(): TSGesuch {\n        return this.gesuchModelManager.getGesuch();\n    }\n\n    public getCurrentGesuchsperiode(): string {\n        if (this.getGesuch() && this.getGesuch().gesuchsperiode) {\n            return this.getGesuchsperiodeAsString(this.getGesuch().gesuchsperiode);\n        } else {\n            return '';\n        }\n    }\n\n    public getAntragTyp(): string {\n        if (this.getGesuch()) {\n            return this.ebeguUtil.getAntragTextDateAsString(this.getGesuch().typ, this.getGesuch().eingangsdatum, this.getGesuch().laufnummer);\n        } else {\n            return '';\n        }\n    }\n\n    public getAntragDatum(): Moment {\n        if (this.getGesuch() && this.getGesuch().eingangsdatum) {\n            return this.getGesuch().eingangsdatum;\n        } else {\n            return moment();\n        }\n    }\n\n    public getGesuchsperiodeAsString(tsGesuchsperiode: TSGesuchsperiode) {\n        return tsGesuchsperiode.gesuchsperiodeString;\n    }\n\n    public setGesuchsperiode(gesuchsperiodeKey: string) {\n        let selectedGesuche = this.gesuchsperiodeList[gesuchsperiodeKey];\n        let selectedGesuch: TSAntragDTO = this.getNewest(selectedGesuche);\n\n        this.goToOpenGesuch(selectedGesuch.antragId);\n    }\n\n    private getNewest(arrayTSAntragDTO: Array<TSAntragDTO>): TSAntragDTO {\n        let newest: TSAntragDTO = arrayTSAntragDTO[0];\n        for (let i = 0; i < arrayTSAntragDTO.length; i++) {\n            // Wenn eines noch gar kein Eingangsdatum hat ist es sicher das neueste\n            if (!arrayTSAntragDTO[i].eingangsdatum) {\n                return arrayTSAntragDTO[i];\n            }\n            if (arrayTSAntragDTO[i].eingangsdatum.isAfter(newest.eingangsdatum)) {\n                newest = arrayTSAntragDTO[i];\n            }\n        }\n        return newest;\n    }\n\n    /**\n     * Institutionen werden zum Screen Betreuungen geleitet, waehrend alle anderen Benutzer zu fallCreation gehen\n     */\n    private goToOpenGesuch(gesuchId: string): void {\n        if (gesuchId) {\n            if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) {\n                this.$state.go('gesuch.betreuungen', {gesuchId: gesuchId});\n            } else if (this.authServiceRS.isRole(TSRole.STEUERAMT)) {\n                this.$state.go('gesuch.familiensituation', {gesuchId: gesuchId});\n            } else {\n                this.$state.go('gesuch.fallcreation', {\n                    createNew: false, gesuchId: gesuchId\n                });\n            }\n        }\n    }\n\n    public setAntragTypDatum(antragTypDatumKey: string) {\n        let selectedAntragTypGesuch = this.antragTypList[antragTypDatumKey];\n        this.goToOpenGesuch(selectedAntragTypGesuch.antragId);\n    }\n\n    public showButtonMutieren(): boolean {\n        if (this.hideActionButtons) {\n            return false;\n        }\n        if (this.getGesuch()) {\n            if (this.getGesuch().isNew()) {\n                return false;\n            }\n            // Wenn die Gesuchsperiode geschlossen ist, kann sowieso keine Mutation mehr gemacht werden\n            if (this.getGesuch().gesuchsperiode && this.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus.GESCHLOSSEN) {\n                return false;\n            }\n        }\n        return this.mutierenPossibleForCurrentAntrag;\n    }\n\n    private antragMutierenPossible(): void {\n        if (this.antragList && this.antragList.length !== 0) {\n            let mutierenGesperrt = false;\n            for (let i = 0; i < this.antragList.length; i++) {\n                let antragItem: TSAntragDTO = this.antragList[i];\n                // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                if (antragItem.gesuchsperiodeString === this.getCurrentGesuchsperiode()) {\n                    // Falls wir ein Gesuch finden das nicht verfuegt ist oder eine Beschwerde hängig ist, darf nicht mutiert werden\n                    if (antragItem.verfuegt === false || antragItem.beschwerdeHaengig === true) {\n                        mutierenGesperrt = true;\n                        break;\n                    }\n                }\n            }\n            this.mutierenPossibleForCurrentAntrag = !mutierenGesperrt;\n        } else {\n            this.mutierenPossibleForCurrentAntrag = false;\n        }\n    }\n\n    public antragMutieren(): void {\n        this.mutierenPossibleForCurrentAntrag = false;\n        let eingangsart: TSEingangsart;\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            eingangsart = TSEingangsart.ONLINE;\n        } else {\n            eingangsart = TSEingangsart.PAPIER;\n        }\n        this.$state.go('gesuch.mutation', {\n            createMutation: true,\n            gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n            fallId: this.getGesuch().fall.id,\n            eingangsart: eingangsart,\n            gesuchsperiodeId: this.getGesuch().gesuchsperiode.id\n        });\n    }\n\n    private antragErneuernPossible(): void {\n        if (this.antragList && this.antragList.length !== 0) {\n            let erneuernGesperrt = false;\n            for (let i = 0; i < this.antragList.length; i++) {\n                let antragItem: TSAntragDTO = this.antragList[i];\n                // Wir muessen nur die Antraege der aktuell ausgewaehlten Gesuchsperiode beachten\n                if (antragItem.gesuchsperiodeString === this.getGesuchsperiodeAsString(this.neuesteGesuchsperiode)) {\n                    // Es gibt schon (mindestens 1) Gesuch für die neueste Periode\n                    erneuernGesperrt = true;\n                    break;\n                }\n            }\n            this.erneuernPossibleForCurrentAntrag = !erneuernGesperrt;\n        } else {\n            this.erneuernPossibleForCurrentAntrag = false;\n        }\n    }\n\n    public antragErneuern(): void {\n        this.erneuernPossibleForCurrentAntrag = false;\n        let eingangsart: TSEingangsart;\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            eingangsart = TSEingangsart.ONLINE;\n        } else {\n            eingangsart = TSEingangsart.PAPIER;\n        }\n        this.$state.go('gesuch.erneuerung', {\n            createErneuerung: true,\n            gesuchId: this.getGesuchIdFuerMutationOrErneuerung(),\n            eingangsart: eingangsart,\n            gesuchsperiodeId: this.neuesteGesuchsperiode.id,\n            fallId: this.fallid\n        });\n    }\n\n    private getGesuchIdFuerMutationOrErneuerung(): string {\n        // GesuchId ermitteln fuer Mutation ermitteln: Falls wir auf der Verlauf-View sind, nehmen wir einfach\n        // irgendeines der Liste (es wird auf dem Server sichergestellt, dass die Mutation ab dem neuesten Gesuch\n        // der Periode gemacht wird), wichtig ist nur, dass es sich um die richtige Gesuchsperiode handelt.\n        if (this.gesuchid) {\n            return this.gesuchid;\n        } else {\n            if (this.getGesuch()) {\n                return this.getGesuch().id;\n            }\n        }\n        return undefined;\n    }\n\n    private addAntragToList(antrag: TSGesuch): void {\n        let antragDTO = new TSAntragDTO();\n        antragDTO.antragTyp = TSAntragTyp.MUTATION;\n        let txt = this.ebeguUtil.getAntragTextDateAsString(antragDTO.antragTyp, antrag.eingangsdatum, antrag.laufnummer);\n        this.antragTypList[txt] = antragDTO;\n    }\n\n    private hasBesitzer(): boolean {\n        return this.fall && this.fall.besitzer !== null && this.fall.besitzer !== undefined;\n    }\n\n    private getBesitzer(): string {\n        if (this.fall) {\n            return this.fall.besitzer.getFullName();\n        }\n        return '';\n    }\n\n    public openMitteilungen(): void {\n        this.$state.go('mitteilungen', {\n            fallId: this.fallid\n        });\n    }\n\n    public showVerlauf(): boolean {\n        return this.getGesuch() !== null && this.getGesuch() !== undefined && !this.getGesuch().isNew();\n    }\n\n    public openVerlauf(): void {\n        this.$state.go('verlauf', {\n            gesuchId: this.getGesuch().id\n        });\n    }\n\n    public showGesuchLoeschen(): boolean {\n        if (!this.getGesuch() || this.getGesuch().isNew()) {\n            return false;\n        }\n        if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n            // GS darf nur vor der Freigabe loeschen\n            if (this.hideActionButtons || this.isDashboardScreen || isAtLeastFreigegebenOrFreigabequittung(this.getGesuch().status)) {\n                return false;\n            }\n        } else {\n            // JA: Darf nicht verfuegen oder verfuegt sein und muss Papier sein\n            if (isStatusVerfuegenVerfuegt(this.getGesuch().status) || this.getGesuch().eingangsart === TSEingangsart.ONLINE) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public gesuchLoeschen(): IPromise<void> {\n        return this.dvDialog.showDialog(removeDialogTempl, RemoveDialogController, {\n            title: 'CONFIRM_GESUCH_LOESCHEN',\n            deleteText: 'BESCHREIBUNG_GESUCH_LOESCHEN',\n            parentController: this,\n            elementID: 'gesuchLoeschenButton'\n        }).then(() => {\n            this.setAllFormsPristine();\n            if (this.authServiceRS.isOneOfRoles(this.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                this.gesuchRS.removeGesuchstellerAntrag(this.getGesuch().id).then(result => {\n                    this.gesuchModelManager.setGesuch(new TSGesuch());\n                    this.resetNavigationParameters();\n                    this.$state.go('gesuchstellerDashboard');\n                });\n            } else {\n                this.gesuchRS.removePapiergesuch(this.getGesuch().id).then(result => {\n                    if (this.antragList.length > 1) {\n                        let navObj: any = {\n                            createNew: false,\n                            gesuchId: this.antragList[0].antragId\n                        };\n                        this.$state.go('gesuch.fallcreation', navObj);\n                    } else {\n                        this.$state.go('pendenzen');\n                    }\n                });\n            }\n        });\n    }\n\n    private setAllFormsPristine(): void {\n        let forms: [IFormController] = this.unsavedWarningSharedService.allForms();\n        for (let index = 0; index < forms.length; index++) {\n            let form: IFormController = forms[index];\n            form.$setPristine();\n            form.$setUntouched();\n        }\n    }\n\n    public openAlleVerfuegungen(): void {\n        this.$state.go('alleVerfuegungen', {\n            fallId: this.fallid\n        });\n    }\n\n    private updateFall(): void {\n        if (this.fallid) {\n            this.fallRS.findFall(this.fallid).then((response: TSFall) => {\n                if (response) {\n                    this.fall = response;\n                }\n            });\n        }\n    }\n\n    public hasGesuch(): boolean {\n        return this.antragList && this.antragList.length > 0;\n    }\n\n    public showKontakt(): void {\n        this.dvDialog.showDialog(showKontaktTemplate, ShowTooltipController, {\n            title: '',\n            text: '<span>Jugendamt</span><br>'\n            + '<span>Effingerstrasse 21</span><br>'\n            + '<span>3008 Bern</span><br>'\n            + '<a href=\"tel:0313215115\"><span>031 321 51 15</span></a><br>'\n            + '<a href=\"mailto:kinderbetreuung@bern.ch\"><span>kinderbetreuung@bern.ch</span></a>',\n            parentController: this\n        });\n    }\n\n    /**\n     * Sets the focus back to the Kontakt icon.\n     */\n    public setFocusBack(elementID: string): void {\n        angular.element('#kontaktButton').first().focus();\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/gesuchstellerDashboardView.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/gesuchstellerDashboardView.ts","mtime":1518535855232},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\", \"../../models/enums/TSEingangsart\", \"../../models/enums/TSAntragStatus\", \"../../utils/TSRoleUtil\", \"../../models/enums/TSGesuchBetreuungenStatus\"], function (require, exports, TSEingangsart_1, TSAntragStatus_1, TSRoleUtil_1, TSGesuchBetreuungenStatus_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var template = require('./gesuchstellerDashboardView.html');\n    require('./gesuchstellerDashboardView.less');\n    var GesuchstellerDashboardListViewConfig = /** @class */ (function () {\n        function GesuchstellerDashboardListViewConfig() {\n            this.transclude = false;\n            this.template = template;\n            this.controller = GesuchstellerDashboardListViewController;\n            this.controllerAs = 'vm';\n        }\n        return GesuchstellerDashboardListViewConfig;\n    }());\n    exports.GesuchstellerDashboardListViewConfig = GesuchstellerDashboardListViewConfig;\n    var GesuchstellerDashboardListViewController = /** @class */ (function () {\n        function GesuchstellerDashboardListViewController($state, $log, CONSTANTS, authServiceRS, pendenzRS, ebeguUtil, gesuchsperiodeRS, fallRS, $translate, mitteilungRS) {\n            this.$state = $state;\n            this.$log = $log;\n            this.CONSTANTS = CONSTANTS;\n            this.authServiceRS = authServiceRS;\n            this.pendenzRS = pendenzRS;\n            this.ebeguUtil = ebeguUtil;\n            this.gesuchsperiodeRS = gesuchsperiodeRS;\n            this.fallRS = fallRS;\n            this.$translate = $translate;\n            this.mitteilungRS = mitteilungRS;\n            this.antragList = [];\n            this.totalResultCount = '-';\n        }\n        GesuchstellerDashboardListViewController.prototype.$onInit = function () {\n            this.initViewModel();\n        };\n        GesuchstellerDashboardListViewController.prototype.initViewModel = function () {\n            var _this = this;\n            this.updateAntragList().then(function () {\n                _this.getAmountNewMitteilungen();\n            });\n            this.updateActiveGesuchsperiodenList();\n        };\n        GesuchstellerDashboardListViewController.prototype.updateAntragList = function () {\n            var _this = this;\n            return this.fallRS.findFallByCurrentBenutzerAsBesitzer().then(function (existingFall) {\n                if (existingFall) {\n                    _this.fallId = existingFall.id;\n                    return _this.pendenzRS.getAntraegeGesuchstellerList().then(function (response) {\n                        _this.antragList = angular.copy(response);\n                        return _this.antragList;\n                    });\n                }\n                else {\n                    return _this.fallRS.createFallForCurrentBenutzerAsBesitzer().then(function (createdFall) {\n                        if (createdFall) {\n                            _this.fallId = createdFall.id;\n                        }\n                        return _this.antragList;\n                    });\n                }\n            });\n        };\n        GesuchstellerDashboardListViewController.prototype.getAmountNewMitteilungen = function () {\n            var _this = this;\n            this.mitteilungRS.getAmountNewMitteilungenForCurrentRolle(this.fallId).then(function (response) {\n                _this.amountNewMitteilungen = response;\n            });\n        };\n        GesuchstellerDashboardListViewController.prototype.updateActiveGesuchsperiodenList = function () {\n            var _this = this;\n            this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then(function (response) {\n                _this._activeGesuchsperiodenList = angular.copy(response);\n            });\n        };\n        GesuchstellerDashboardListViewController.prototype.getActiveGesuchsperiodenList = function () {\n            return this._activeGesuchsperiodenList;\n        };\n        GesuchstellerDashboardListViewController.prototype.goToMitteilungenOeffen = function () {\n            this.$state.go('mitteilungen', {\n                fallId: this.fallId\n            });\n        };\n        GesuchstellerDashboardListViewController.prototype.getAntragList = function () {\n            return this.antragList;\n        };\n        GesuchstellerDashboardListViewController.prototype.getNumberMitteilungen = function () {\n            return this.amountNewMitteilungen;\n        };\n        GesuchstellerDashboardListViewController.prototype.openAntrag = function (periode) {\n            var antrag = this.getAntragForGesuchsperiode(periode);\n            if (antrag) {\n                if (TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                    // Noch nicht freigegeben\n                    this.$state.go('gesuch.fallcreation', { createNew: false, gesuchId: antrag.antragId });\n                }\n                else if (!TSAntragStatus_1.isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                    // Alles ausser verfuegt und InBearbeitung\n                    this.$state.go('gesuch.dokumente', { createNew: false, gesuchId: antrag.antragId });\n                }\n                else {\n                    // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                    // Es kann nur noch eine Mutation gemacht werden\n                    this.$state.go('gesuch.mutation', {\n                        createMutation: true,\n                        eingangsart: TSEingangsart_1.TSEingangsart.ONLINE,\n                        gesuchId: antrag.antragId,\n                        gesuchsperiodeId: periode.id,\n                        fallId: this.fallId\n                    });\n                }\n            }\n            else {\n                // Noch kein Antrag für die Gesuchsperiode vorhanden\n                if (this.antragList && this.antragList.length > 0) {\n                    // Aber schon mindestens einer für eine frühere Periode\n                    this.$state.go('gesuch.erneuerung', {\n                        createErneuerung: true,\n                        gesuchId: this.antragList[0].antragId,\n                        eingangsart: TSEingangsart_1.TSEingangsart.ONLINE,\n                        gesuchsperiodeId: periode.id,\n                        fallId: this.fallId\n                    });\n                }\n                else {\n                    // Dies ist das erste Gesuch\n                    this.$state.go('gesuch.fallcreation', {\n                        createNew: true,\n                        eingangsart: TSEingangsart_1.TSEingangsart.ONLINE,\n                        gesuchId: null,\n                        gesuchsperiodeId: periode.id,\n                        fallId: this.fallId\n                    });\n                }\n            }\n        };\n        GesuchstellerDashboardListViewController.prototype.getButtonText = function (periode) {\n            var antrag = this.getAntragForGesuchsperiode(periode);\n            if (antrag) {\n                if (TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                    // Noch nicht freigegeben -> Text BEARBEITEN\n                    return this.$translate.instant('GS_BEARBEITEN');\n                }\n                else if (!TSAntragStatus_1.isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                    // Alles ausser verfuegt und InBearbeitung -> Text DOKUMENTE HOCHLADEN\n                    return this.$translate.instant('GS_DOKUMENTE_HOCHLADEN');\n                }\n                else {\n                    // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                    // Es kann nur noch eine Mutation gemacht werden -> Text MUTIEREN\n                    return this.$translate.instant('GS_MUTIEREN');\n                }\n            }\n            else {\n                // Noch kein Antrag vorhanden -> Text GESUCH BEANTRAGEN\n                // this.$state.go('gesuch.fallcreation', {createNew: true, gesuchId: null});\n                return this.$translate.instant('GS_BEANTRAGEN');\n            }\n        };\n        GesuchstellerDashboardListViewController.prototype.editAntrag = function (antrag) {\n            if (antrag) {\n                if (TSAntragStatus_1.isAnyStatusOfVerfuegt(antrag.status)) {\n                    this.$state.go('gesuch.verfuegen', { createNew: false, gesuchId: antrag.antragId });\n                }\n                else {\n                    this.$state.go('gesuch.fallcreation', { createNew: false, gesuchId: antrag.antragId });\n                }\n            }\n        };\n        GesuchstellerDashboardListViewController.prototype.getAntragForGesuchsperiode = function (periode) {\n            // Die Antraege sind nach Laufnummer sortiert, d.h. der erste einer Periode ist immer der aktuellste\n            if (this.antragList) {\n                for (var _i = 0, _a = this.antragList; _i < _a.length; _i++) {\n                    var antrag = _a[_i];\n                    if (antrag.gesuchsperiodeGueltigAb.year() === periode.gueltigkeit.gueltigAb.year()) {\n                        return antrag;\n                    }\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Status muss speziell uebersetzt werden damit Gesuchsteller nur \"In Bearbeitung\" sieht und nicht in \"Bearbeitung Gesuchsteller\"\n         */\n        GesuchstellerDashboardListViewController.prototype.translateStatus = function (antrag) {\n            var status = antrag.status;\n            var isUserGesuchsteller = this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles());\n            if (status === TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS && isUserGesuchsteller) {\n                if (TSGesuchBetreuungenStatus_1.TSGesuchBetreuungenStatus.ABGEWIESEN === antrag.gesuchBetreuungenStatus) {\n                    return this.ebeguUtil.translateString(TSAntragStatus_1.TSAntragStatus[TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN]);\n                }\n                else if (TSGesuchBetreuungenStatus_1.TSGesuchBetreuungenStatus.WARTEN === antrag.gesuchBetreuungenStatus) {\n                    return this.ebeguUtil.translateString(TSAntragStatus_1.TSAntragStatus[TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_WARTEN]);\n                }\n                return this.ebeguUtil.translateString(TSAntragStatus_1.IN_BEARBEITUNG_BASE_NAME);\n            }\n            if ((status === TSAntragStatus_1.TSAntragStatus.NUR_SCHULAMT)\n                && isUserGesuchsteller) {\n                return this.ebeguUtil.translateString('ABGESCHLOSSEN');\n            }\n            return this.ebeguUtil.translateString(TSAntragStatus_1.TSAntragStatus[status]);\n        };\n        GesuchstellerDashboardListViewController.prototype.getVerantwortlicherFullName = function (antrag) {\n            if (antrag) {\n                if (antrag.status === TSAntragStatus_1.TSAntragStatus.NUR_SCHULAMT) {\n                    return this.ebeguUtil.translateString('VERANTWORTLICHER_SCHULAMT');\n                }\n                if (antrag.verantwortlicher) {\n                    return antrag.verantwortlicher;\n                }\n            }\n            return '';\n        };\n        GesuchstellerDashboardListViewController.$inject = ['$state', '$log', 'CONSTANTS', 'AuthServiceRS', 'PendenzRS', 'EbeguUtil', 'GesuchsperiodeRS',\n            'FallRS', '$translate', 'MitteilungRS'];\n        return GesuchstellerDashboardListViewController;\n    }());\n    exports.GesuchstellerDashboardListViewController = GesuchstellerDashboardListViewController;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/gesuchstellerDashboardView.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuchstellerDashboard/component/gesuchstellerDashboardView.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions} from 'angular';\nimport {IStateService} from 'angular-ui-router';\nimport TSAntragDTO from '../../models/TSAntragDTO';\nimport PendenzRS from '../../pendenzen/service/PendenzRS.rest';\nimport AuthServiceRS from '../../authentication/service/AuthServiceRS.rest';\nimport TSGesuchsperiode from '../../models/TSGesuchsperiode';\nimport GesuchsperiodeRS from '../../core/service/gesuchsperiodeRS.rest';\nimport TSFall from '../../models/TSFall';\nimport {TSEingangsart} from '../../models/enums/TSEingangsart';\nimport FallRS from '../../gesuch/service/fallRS.rest';\nimport {IN_BEARBEITUNG_BASE_NAME, isAnyStatusOfVerfuegt, TSAntragStatus} from '../../models/enums/TSAntragStatus';\nimport {TSRoleUtil} from '../../utils/TSRoleUtil';\nimport EbeguUtil from '../../utils/EbeguUtil';\nimport MitteilungRS from '../../core/service/mitteilungRS.rest';\nimport {TSGesuchBetreuungenStatus} from '../../models/enums/TSGesuchBetreuungenStatus';\nimport IPromise = angular.IPromise;\nimport ILogService = angular.ILogService;\nimport ITranslateService = angular.translate.ITranslateService;\n\nlet template = require('./gesuchstellerDashboardView.html');\nrequire('./gesuchstellerDashboardView.less');\n\nexport class GesuchstellerDashboardListViewConfig implements IComponentOptions {\n    transclude = false;\n    template = template;\n    controller = GesuchstellerDashboardListViewController;\n    controllerAs = 'vm';\n}\n\nexport class GesuchstellerDashboardListViewController {\n\n    private antragList: Array<TSAntragDTO> = [];\n    private _activeGesuchsperiodenList: Array<TSGesuchsperiode>;\n    fallId: string;\n    totalResultCount: string = '-';\n    amountNewMitteilungen: number;\n\n\n    static $inject: string[] = ['$state', '$log', 'CONSTANTS', 'AuthServiceRS', 'PendenzRS', 'EbeguUtil', 'GesuchsperiodeRS',\n        'FallRS', '$translate', 'MitteilungRS'];\n\n    constructor(private $state: IStateService, private $log: ILogService, private CONSTANTS: any,\n                private authServiceRS: AuthServiceRS, private pendenzRS: PendenzRS, private ebeguUtil: EbeguUtil,\n                private gesuchsperiodeRS: GesuchsperiodeRS, private fallRS: FallRS, private $translate: ITranslateService,\n                private mitteilungRS: MitteilungRS) {\n    }\n\n    $onInit() {\n        this.initViewModel();\n    }\n\n    private initViewModel() {\n        this.updateAntragList().then(() => {\n            this.getAmountNewMitteilungen();\n        });\n        this.updateActiveGesuchsperiodenList();\n    }\n\n    private updateAntragList(): IPromise<any> {\n        return this.fallRS.findFallByCurrentBenutzerAsBesitzer().then((existingFall: TSFall) => {\n            if (existingFall) {\n                this.fallId = existingFall.id;\n                return this.pendenzRS.getAntraegeGesuchstellerList().then((response: any) => {\n                    this.antragList = angular.copy(response);\n                    return this.antragList;\n                });\n            } else { //fall es fuer den GS noch keine Fall gibt, erstellen wir einen\n                return this.fallRS.createFallForCurrentBenutzerAsBesitzer().then((createdFall: TSFall) => {\n                    if (createdFall) {\n                        this.fallId = createdFall.id;\n                    }\n                    return this.antragList;\n                });\n            }\n        });\n    }\n\n    private getAmountNewMitteilungen(): void {\n        this.mitteilungRS.getAmountNewMitteilungenForCurrentRolle(this.fallId).then((response: number) => {\n            this.amountNewMitteilungen = response;\n        });\n    }\n\n    private updateActiveGesuchsperiodenList(): void {\n        this.gesuchsperiodeRS.getAllActiveGesuchsperioden().then((response: TSGesuchsperiode[]) => {\n            this._activeGesuchsperiodenList = angular.copy(response);\n        });\n    }\n\n    public getActiveGesuchsperiodenList(): Array<TSGesuchsperiode> {\n        return this._activeGesuchsperiodenList;\n    }\n\n    public goToMitteilungenOeffen() {\n        this.$state.go('mitteilungen', {\n            fallId: this.fallId\n        });\n    }\n\n    public getAntragList(): Array<TSAntragDTO> {\n        return this.antragList;\n    }\n\n    public getNumberMitteilungen(): number {\n        return this.amountNewMitteilungen;\n    }\n\n    public openAntrag(periode: TSGesuchsperiode): void {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                // Noch nicht freigegeben\n                this.$state.go('gesuch.fallcreation', {createNew: false, gesuchId: antrag.antragId});\n            } else if (!isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                // Alles ausser verfuegt und InBearbeitung\n                this.$state.go('gesuch.dokumente', {createNew: false, gesuchId: antrag.antragId});\n            } else {\n                // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                // Es kann nur noch eine Mutation gemacht werden\n                this.$state.go('gesuch.mutation', {\n                    createMutation: true,\n                    eingangsart: TSEingangsart.ONLINE,\n                    gesuchId: antrag.antragId,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            }\n        } else {\n            // Noch kein Antrag für die Gesuchsperiode vorhanden\n            if (this.antragList && this.antragList.length > 0) {\n                // Aber schon mindestens einer für eine frühere Periode\n                this.$state.go('gesuch.erneuerung', {\n                    createErneuerung: true,\n                    gesuchId: this.antragList[0].antragId,\n                    eingangsart: TSEingangsart.ONLINE,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            } else {\n                // Dies ist das erste Gesuch\n                this.$state.go('gesuch.fallcreation', {\n                    createNew: true,\n                    eingangsart: TSEingangsart.ONLINE,\n                    gesuchId: null,\n                    gesuchsperiodeId: periode.id,\n                    fallId: this.fallId\n                });\n            }\n        }\n    }\n\n    public getButtonText(periode: TSGesuchsperiode): string {\n        let antrag: TSAntragDTO = this.getAntragForGesuchsperiode(periode);\n        if (antrag) {\n            if (TSAntragStatus.IN_BEARBEITUNG_GS === antrag.status) {\n                // Noch nicht freigegeben -> Text BEARBEITEN\n                return this.$translate.instant('GS_BEARBEITEN');\n            } else if (!isAnyStatusOfVerfuegt(antrag.status) || antrag.beschwerdeHaengig) {\n                // Alles ausser verfuegt und InBearbeitung -> Text DOKUMENTE HOCHLADEN\n                return this.$translate.instant('GS_DOKUMENTE_HOCHLADEN');\n            } else {\n                // Im Else-Fall ist das Gesuch nicht mehr ueber den Button verfuegbar\n                // Es kann nur noch eine Mutation gemacht werden -> Text MUTIEREN\n                return this.$translate.instant('GS_MUTIEREN');\n            }\n        } else {\n            // Noch kein Antrag vorhanden -> Text GESUCH BEANTRAGEN\n            // this.$state.go('gesuch.fallcreation', {createNew: true, gesuchId: null});\n            return this.$translate.instant('GS_BEANTRAGEN');\n        }\n    }\n\n    public editAntrag(antrag: TSAntragDTO): void {\n        if (antrag) {\n            if (isAnyStatusOfVerfuegt(antrag.status)) {\n                this.$state.go('gesuch.verfuegen', {createNew: false, gesuchId: antrag.antragId});\n            } else {\n                this.$state.go('gesuch.fallcreation', {createNew: false, gesuchId: antrag.antragId});\n            }\n        }\n    }\n\n    private getAntragForGesuchsperiode(periode: TSGesuchsperiode): TSAntragDTO {\n        // Die Antraege sind nach Laufnummer sortiert, d.h. der erste einer Periode ist immer der aktuellste\n        if (this.antragList) {\n            for (let antrag of this.antragList) {\n                if (antrag.gesuchsperiodeGueltigAb.year() === periode.gueltigkeit.gueltigAb.year()) {\n                    return antrag;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Status muss speziell uebersetzt werden damit Gesuchsteller nur \"In Bearbeitung\" sieht und nicht in \"Bearbeitung Gesuchsteller\"\n     */\n    public translateStatus(antrag: TSAntragDTO) {\n        let status: TSAntragStatus = antrag.status;\n        let isUserGesuchsteller: boolean = this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles());\n        if (status === TSAntragStatus.IN_BEARBEITUNG_GS && isUserGesuchsteller) {\n            if (TSGesuchBetreuungenStatus.ABGEWIESEN === antrag.gesuchBetreuungenStatus) {\n                return this.ebeguUtil.translateString(TSAntragStatus[TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN]);\n            } else if (TSGesuchBetreuungenStatus.WARTEN === antrag.gesuchBetreuungenStatus) {\n                return this.ebeguUtil.translateString(TSAntragStatus[TSAntragStatus.PLATZBESTAETIGUNG_WARTEN]);\n            }\n            return this.ebeguUtil.translateString(IN_BEARBEITUNG_BASE_NAME);\n        }\n        if ((status === TSAntragStatus.NUR_SCHULAMT)\n            && isUserGesuchsteller) {\n            return this.ebeguUtil.translateString('ABGESCHLOSSEN');\n        }\n        return this.ebeguUtil.translateString(TSAntragStatus[status]);\n    }\n\n    public getVerantwortlicherFullName(antrag: TSAntragDTO): string {\n        if (antrag) {\n            if (antrag.status === TSAntragStatus.NUR_SCHULAMT) {\n                return this.ebeguUtil.translateString('VERANTWORTLICHER_SCHULAMT');\n            }\n            if (antrag.verantwortlicher) {\n                return antrag.verantwortlicher;\n            }\n        }\n        return '';\n    }\n}\n"]}]}
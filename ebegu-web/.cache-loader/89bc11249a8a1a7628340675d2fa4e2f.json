{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/wizardStepManager.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/wizardStepManager.ts","mtime":1518535855232},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\", \"../../models/enums/TSWizardStepName\", \"../../models/TSWizardStep\", \"../../models/enums/TSWizardStepStatus\", \"../../models/enums/TSAntragTyp\", \"../../models/enums/TSAntragStatus\", \"../../utils/TSRoleUtil\", \"../../models/enums/TSAuthEvent\"], function (require, exports, TSWizardStepName_1, TSWizardStep_1, TSWizardStepStatus_1, TSAntragTyp_1, TSAntragStatus_1, TSRoleUtil_1, TSAuthEvent_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var WizardStepManager = /** @class */ (function () {\n        /* @ngInject */\n        function WizardStepManager(authServiceRS, wizardStepRS, $q, $rootScope) {\n            var _this = this;\n            this.authServiceRS = authServiceRS;\n            this.wizardStepRS = wizardStepRS;\n            this.$q = $q;\n            this.$rootScope = $rootScope;\n            this.allowedSteps = [];\n            this.hiddenSteps = []; // alle Steps die obwohl allowed, ausgeblendet werden muessen\n            this.wizardSteps = [];\n            this.wizardStepsSnapshot = [];\n            this.setAllowedStepsForRole(authServiceRS.getPrincipalRole());\n            $rootScope.$on(TSAuthEvent_1.TSAuthEvent[TSAuthEvent_1.TSAuthEvent.LOGIN_SUCCESS], function () {\n                _this.setAllowedStepsForRole(authServiceRS.getPrincipalRole());\n            });\n        }\n        WizardStepManager.prototype.getCurrentStep = function () {\n            return this.getStepByName(this.currentStepName);\n        };\n        WizardStepManager.prototype.setCurrentStep = function (stepName) {\n            this.currentStepName = stepName;\n        };\n        WizardStepManager.prototype.getCurrentStepName = function () {\n            return this.currentStepName;\n        };\n        /**\n         * Initializes WizardSteps with one single Step GESUCH_ERSTELLEN which status is IN_BEARBEITUNG.\n         * This method must be called only when the Gesuch doesn't exist yet.\n         */\n        WizardStepManager.prototype.initWizardSteps = function () {\n            this.wizardSteps = [new TSWizardStep_1.default(undefined, TSWizardStepName_1.TSWizardStepName.GESUCH_ERSTELLEN, TSWizardStepStatus_1.TSWizardStepStatus.IN_BEARBEITUNG, undefined, true)];\n            this.wizardSteps.push(new TSWizardStep_1.default(undefined, TSWizardStepName_1.TSWizardStepName.FAMILIENSITUATION, TSWizardStepStatus_1.TSWizardStepStatus.UNBESUCHT, 'initFinSit dummy', false));\n            this.currentStepName = TSWizardStepName_1.TSWizardStepName.GESUCH_ERSTELLEN;\n        };\n        WizardStepManager.prototype.getAllowedSteps = function () {\n            return this.allowedSteps;\n        };\n        WizardStepManager.prototype.getWizardSteps = function () {\n            return this.wizardSteps;\n        };\n        WizardStepManager.prototype.getVisibleSteps = function () {\n            var _this = this;\n            return this.allowedSteps.filter(function (element) {\n                return !_this.isStepHidden(element);\n            });\n        };\n        WizardStepManager.prototype.setAllowedStepsForRole = function (role) {\n            if (TSRoleUtil_1.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles().indexOf(role) > -1) {\n                this.setAllowedStepsForInstitutionTraegerschaft();\n            }\n            else if (TSRoleUtil_1.TSRoleUtil.getSchulamtOnlyRoles().indexOf(role) > -1) {\n                this.setAllowedStepsForSchulamt();\n            }\n            else if (TSRoleUtil_1.TSRoleUtil.getSteueramtOnlyRoles().indexOf(role) > -1) {\n                this.setAllowedStepsForSteueramt();\n            }\n            else {\n                this.setAllAllowedSteps();\n            }\n        };\n        WizardStepManager.prototype.setAllowedStepsForInstitutionTraegerschaft = function () {\n            this.allowedSteps = [];\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.FAMILIENSITUATION);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.GESUCHSTELLER);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.UMZUG);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.BETREUUNG);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.ABWESENHEIT);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.VERFUEGEN);\n        };\n        WizardStepManager.prototype.setAllowedStepsForSteueramt = function () {\n            this.allowedSteps = [];\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.FAMILIENSITUATION);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.GESUCHSTELLER);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.UMZUG);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.KINDER);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.FINANZIELLE_SITUATION);\n            this.allowedSteps.push(TSWizardStepName_1.TSWizardStepName.EINKOMMENSVERSCHLECHTERUNG);\n        };\n        WizardStepManager.prototype.setAllowedStepsForSchulamt = function () {\n            this.allowedSteps = TSWizardStepName_1.getTSWizardStepNameValues().filter(function (element) {\n                return (element !== TSWizardStepName_1.TSWizardStepName.ERWERBSPENSUM && //schulamt sieht erwerbspensum und abwesenheit nicht\n                    element !== TSWizardStepName_1.TSWizardStepName.ABWESENHEIT);\n            });\n        };\n        WizardStepManager.prototype.setAllAllowedSteps = function () {\n            this.allowedSteps = TSWizardStepName_1.getTSWizardStepNameValues();\n        };\n        /**\n         * Sollten keine WizardSteps gefunden werden, wird die Methode initWizardSteps aufgerufen, um die\n         * minimale Steps herzustellen. Die erlaubten Steps fuer den aktuellen Benutzer werden auch gesetzt\n         * @param gesuchId\n         * @returns {IPromise<void>}\n         */\n        WizardStepManager.prototype.findStepsFromGesuch = function (gesuchId) {\n            var _this = this;\n            return this.wizardStepRS.findWizardStepsFromGesuch(gesuchId).then(function (response) {\n                if (response != null && response.length > 0) {\n                    _this.wizardSteps = response;\n                }\n                else {\n                    _this.initWizardSteps();\n                }\n                _this.backupCurrentSteps();\n                _this.setAllowedStepsForRole(_this.authServiceRS.getPrincipalRole());\n            });\n        };\n        WizardStepManager.prototype.getStepByName = function (stepName) {\n            return this.wizardSteps.filter(function (step) {\n                return step.wizardStepName === stepName;\n            })[0];\n        };\n        /**\n         * Der Step wird aktualisiert und die Liste von Steps wird nochmal aus dem Server geholt. Sollte der Status gleich sein,\n         * wird nichts gemacht und undefined wird zurueckgegeben. Der Status wird auch auf verfuegbar gesetzt\n         * @param stepName\n         * @param newStepStatus\n         * @returns {any}\n         */\n        WizardStepManager.prototype.updateWizardStepStatus = function (stepName, newStepStatus) {\n            var _this = this;\n            var step = this.getStepByName(stepName);\n            step.verfuegbar = true;\n            if (this.needNewStatusSave(step.wizardStepStatus, newStepStatus)) {\n                step.wizardStepStatus = newStepStatus;\n                return this.wizardStepRS.updateWizardStep(step).then(function (response) {\n                    return _this.findStepsFromGesuch(response.gesuchId);\n                });\n            }\n            return this.$q.when();\n        };\n        WizardStepManager.prototype.updateCurrentWizardStepStatusMutiert = function () {\n            var _this = this;\n            return this.wizardStepRS.setWizardStepMutiert(this.getCurrentStep().id).then(function (response) {\n                return _this.findStepsFromGesuch(response.gesuchId);\n            });\n        };\n        WizardStepManager.prototype.needNewStatusSave = function (oldStepStatus, newStepStatus) {\n            if (oldStepStatus === newStepStatus) {\n                return false;\n            }\n            if ((newStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.IN_BEARBEITUNG || newStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.WARTEN)\n                && oldStepStatus !== TSWizardStepStatus_1.TSWizardStepStatus.UNBESUCHT) {\n                return false;\n            }\n            if (newStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.OK && oldStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.MUTIERT) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Der aktuelle Step wird aktualisiert und die Liste von Steps wird nochmal aus dem Server geholt. Sollte der Status gleich sein,\n         * nichts wird gemacht und undefined wird zurueckgegeben.\n         * @param stepStatus\n         * @returns {IPromise<void>}\n         */\n        WizardStepManager.prototype.updateCurrentWizardStepStatus = function (stepStatus) {\n            return this.updateWizardStepStatus(this.currentStepName, stepStatus);\n        };\n        /**\n         * Just updates the current step as is\n         * @returns {IPromise<void>}\n         */\n        WizardStepManager.prototype.updateCurrentWizardStep = function () {\n            var _this = this;\n            return this.wizardStepRS.updateWizardStep(this.getCurrentStep()).then(function (response) {\n                return _this.findStepsFromGesuch(response.gesuchId);\n            });\n        };\n        /**\n         * Diese Methode ist eine Ausnahme. Im ersten Step haben wir das Problem, dass das Gesuch noch nicht existiert. Deswegen koennen\n         * wir die Kommentare nicht direkt speichern. Die Loesung ist: nach dem das Gesuch erstellt wird und somit auch die WizardSteps,\n         * holen wir diese aus der Datenbank, aktualisieren den Step GESUCH_ERSTELLEN mit den Kommentaren und speichern dieses nochmal.\n         * @param gesuchId\n         * @returns {IPromise<void>}\n         */\n        WizardStepManager.prototype.updateFirstWizardStep = function (gesuchId) {\n            var _this = this;\n            var firstStepBemerkungen = angular.copy(this.getCurrentStep().bemerkungen);\n            return this.findStepsFromGesuch(gesuchId).then(function () {\n                _this.getCurrentStep().bemerkungen = firstStepBemerkungen;\n                return _this.updateCurrentWizardStep();\n            });\n        };\n        /**\n         * Gibt true zurueck wenn der Status vom naechsten Step != UNBESUCHT ist. D.h. wenn es verfuegbar ist\n         * @returns {boolean}\n         */\n        WizardStepManager.prototype.isNextStepBesucht = function (gesuch) {\n            return this.getStepByName(this.getNextStep(gesuch)).wizardStepStatus !== TSWizardStepStatus_1.TSWizardStepStatus.UNBESUCHT;\n        };\n        /**\n         * Gibt true zurueck wenn der naechste Step enabled (verfuegbar) ist\n         * @returns {boolean}\n         */\n        WizardStepManager.prototype.isNextStepEnabled = function (gesuch) {\n            if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getSteueramtOnlyRoles()) && this.currentStepName === TSWizardStepName_1.TSWizardStepName.EINKOMMENSVERSCHLECHTERUNG) {\n                // Dies ist ein Hack. Das Problem ist, dass der Step EKV der letzte fuer das Steueramt ist, und da er substeps hat,\n                // ist es sehr schwierig zu wissen, wann man darf und wann nicht. Wir sollten die ganze Funktionalitaet von Steps verbessern\n                return true;\n            }\n            return this.isStepAvailableViaBtn(this.getNextStep(gesuch), gesuch);\n        };\n        WizardStepManager.prototype.getNextStep = function (gesuch) {\n            var allVisibleStepNames = this.getVisibleSteps();\n            var currentPosition = allVisibleStepNames.indexOf(this.getCurrentStepName()) + 1;\n            for (var i = currentPosition; i < allVisibleStepNames.length; i++) {\n                if (this.isStepAvailableViaBtn(allVisibleStepNames[i], gesuch)) {\n                    return allVisibleStepNames[i];\n                }\n            }\n            return undefined;\n        };\n        /**\n         * iterate through the existing steps and get the previous one based on the current position\n         */\n        WizardStepManager.prototype.getPreviousStep = function (gesuch) {\n            var allVisibleStepNames = this.getVisibleSteps();\n            var currentPosition = allVisibleStepNames.indexOf(this.getCurrentStepName()) - 1;\n            for (var i = currentPosition; i >= 0; i--) {\n                if (this.isStepAvailableViaBtn(allVisibleStepNames[i], gesuch)) {\n                    return allVisibleStepNames[i];\n                }\n            }\n            return undefined;\n        };\n        /**\n         * gibt true zurueck wenn step mit next/prev button erreichbar sein soll\n         */\n        WizardStepManager.prototype.isStepAvailableViaBtn = function (stepName, gesuch) {\n            var step = this.getStepByName(stepName);\n            if (step !== undefined) {\n                return (this.isStepClickableForCurrentRole(step, gesuch)\n                    || ((gesuch.typ === TSAntragTyp_1.TSAntragTyp.ERSTGESUCH || gesuch.typ === TSAntragTyp_1.TSAntragTyp.ERNEUERUNGSGESUCH) && step.wizardStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.UNBESUCHT\n                        && !(this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAllButAdministratorJugendamtRoleAsRoles()) && stepName === TSWizardStepName_1.TSWizardStepName.VERFUEGEN))\n                    || (gesuch.typ === TSAntragTyp_1.TSAntragTyp.MUTATION && step.wizardStepName === TSWizardStepName_1.TSWizardStepName.FAMILIENSITUATION));\n            }\n            return false; // wenn der step undefined ist geben wir mal verfuegbar zurueck\n        };\n        /**\n         * gibt true zurueck wenn eins step fuer die aktuelle rolle disabled ist.\n         * Wenn es keine sonderregel gibt wird der default der aus dem server empfangen wurde\n         * zurueckgegeben\n         */\n        WizardStepManager.prototype.isStepClickableForCurrentRole = function (step, gesuch) {\n            if (step.wizardStepName === TSWizardStepName_1.TSWizardStepName.VERFUEGEN) {\n                //verfuegen fuer admin und jugendamt  immer sichtbar\n                if (!this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAdministratorJugendamtRole())) {\n                    // schulamt darf ab geprueft den screen sehen, oder wenn der Status schon NUR_SCHULAMT ist\n                    if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getSchulamtOnlyRoles())) {\n                        if (gesuch.status !== TSAntragStatus_1.TSAntragStatus.GEPRUEFT && gesuch.status !== TSAntragStatus_1.TSAntragStatus.VERFUEGEN\n                            && !TSAntragStatus_1.isAnyStatusOfVerfuegt(gesuch.status)) {\n                            return false;\n                        }\n                        //gesuchsteller darf \"verfuegen\" seite sehen sobald er das gesuch freigegeben hat\n                    }\n                    else if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                        return TSAntragStatus_1.isAtLeastFreigegeben(gesuch.status);\n                    }\n                    else {\n                        // ... alle anderen ab VERFUEGT\n                        if (!TSAntragStatus_1.isAnyStatusOfVerfuegt(gesuch.status)) {\n                            return false;\n                        }\n                    }\n                }\n                return this.areAllStepsOK(gesuch);\n            }\n            return step.verfuegbar === true; //wenn keine Sonderbedingung gehen wir davon aus dass der step nicht disabled ist\n        };\n        /**\n         * Gibt true zurueck, nur wenn alle Steps den Status OK haben.\n         *  - Dokumente duerfen allerdings IN_BEARBEITUNG sein\n         *  - Bei BETREUUNGEN darf es WARTEN sein\n         *  - Der Status von VERFUEGEN wird gar nicht beruecksichtigt\n         */\n        WizardStepManager.prototype.areAllStepsOK = function (gesuch) {\n            for (var i = 0; i < this.wizardSteps.length; i++) {\n                if (this.wizardSteps[i].wizardStepName === TSWizardStepName_1.TSWizardStepName.BETREUUNG) {\n                    if (!this.isStatusOk(this.wizardSteps[i].wizardStepStatus)\n                        && this.wizardSteps[i].wizardStepStatus !== TSWizardStepStatus_1.TSWizardStepStatus.PLATZBESTAETIGUNG\n                        && (this.wizardSteps[i].wizardStepStatus !== TSWizardStepStatus_1.TSWizardStepStatus.NOK\n                            && !gesuch.isThereAnyBetreuung())) {\n                        return false;\n                    }\n                }\n                else if (this.wizardSteps[i].wizardStepName === TSWizardStepName_1.TSWizardStepName.DOKUMENTE) {\n                    if (this.wizardSteps[i].wizardStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.NOK) {\n                        return false;\n                    }\n                }\n                else if (this.wizardSteps[i].wizardStepName !== TSWizardStepName_1.TSWizardStepName.VERFUEGEN\n                    && this.wizardSteps[i].wizardStepName !== TSWizardStepName_1.TSWizardStepName.ABWESENHEIT\n                    && this.wizardSteps[i].wizardStepName !== TSWizardStepName_1.TSWizardStepName.UMZUG\n                    && this.wizardSteps[i].wizardStepName !== TSWizardStepName_1.TSWizardStepName.FREIGABE\n                    && !this.isStatusOk(this.wizardSteps[i].wizardStepStatus)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        WizardStepManager.prototype.isStatusOk = function (wizardStepStatus) {\n            return wizardStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.OK || wizardStepStatus === TSWizardStepStatus_1.TSWizardStepStatus.MUTIERT;\n        };\n        /**\n         * Prueft fuer den gegebenen Step ob sein Status OK oder MUTIERT ist\n         */\n        WizardStepManager.prototype.isStepStatusOk = function (wizardStepName) {\n            return this.hasStepGivenStatus(wizardStepName, TSWizardStepStatus_1.TSWizardStepStatus.OK)\n                || this.hasStepGivenStatus(wizardStepName, TSWizardStepStatus_1.TSWizardStepStatus.MUTIERT);\n        };\n        /**\n         * Gibt true zurueck wenn der Step existiert und sein Status OK ist\n         * @param stepName\n         * @param status\n         * @returns {boolean}\n         */\n        WizardStepManager.prototype.hasStepGivenStatus = function (stepName, status) {\n            if (this.getStepByName(stepName)) {\n                return this.getStepByName(stepName).wizardStepStatus === status;\n            }\n            return false;\n        };\n        WizardStepManager.prototype.backupCurrentSteps = function () {\n            this.wizardStepsSnapshot = angular.copy(this.wizardSteps);\n        };\n        WizardStepManager.prototype.restorePreviousSteps = function () {\n            this.wizardSteps = this.wizardStepsSnapshot;\n        };\n        /**\n         * Guckt zuerst dass der Step in der Liste von allowedSteps ist. wenn ja wird es geguckt\n         * ob der Step in derl Liste hiddenSteps ist.\n         * allowed und nicht hidden Steps -> true\n         * alle anderen -> false\n         */\n        WizardStepManager.prototype.isStepVisible = function (stepName) {\n            return (this.allowedSteps.indexOf(stepName) >= 0 && !this.isStepHidden(stepName));\n        };\n        WizardStepManager.prototype.hideStep = function (stepName) {\n            if (!this.isStepHidden(stepName)) {\n                this.hiddenSteps.push(stepName);\n            }\n        };\n        /**\n         * Obwohl das Wort unhide nicht existiert, finde ich den Begriff ausfuehrlicher fuer diesen Fall als show\n         */\n        WizardStepManager.prototype.unhideStep = function (stepName) {\n            if (this.isStepHidden(stepName)) {\n                this.hiddenSteps.splice(this.hiddenSteps.indexOf(stepName), 1);\n            }\n        };\n        WizardStepManager.prototype.isStepHidden = function (stepName) {\n            return this.hiddenSteps.indexOf(stepName) >= 0;\n        };\n        WizardStepManager.$inject = ['AuthServiceRS', 'WizardStepRS', '$q', '$rootScope'];\n        return WizardStepManager;\n    }());\n    exports.default = WizardStepManager;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/wizardStepManager.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/wizardStepManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IPromise, IQService} from 'angular';\nimport AuthServiceRS from '../../authentication/service/AuthServiceRS.rest';\nimport {TSRole} from '../../models/enums/TSRole';\nimport {getTSWizardStepNameValues, TSWizardStepName} from '../../models/enums/TSWizardStepName';\nimport TSWizardStep from '../../models/TSWizardStep';\nimport WizardStepRS from './WizardStepRS.rest';\nimport {TSWizardStepStatus} from '../../models/enums/TSWizardStepStatus';\nimport {TSAntragTyp} from '../../models/enums/TSAntragTyp';\nimport {isAnyStatusOfVerfuegt, isAtLeastFreigegeben, TSAntragStatus} from '../../models/enums/TSAntragStatus';\nimport TSGesuch from '../../models/TSGesuch';\nimport {TSRoleUtil} from '../../utils/TSRoleUtil';\nimport {TSAuthEvent} from '../../models/enums/TSAuthEvent';\nimport IRootScopeService = angular.IRootScopeService;\n\nexport default class WizardStepManager {\n\n    private allowedSteps: Array<TSWizardStepName> = [];\n    private hiddenSteps: Array<TSWizardStepName> = []; // alle Steps die obwohl allowed, ausgeblendet werden muessen\n    private wizardSteps: Array<TSWizardStep> = [];\n    private currentStepName: TSWizardStepName; // keeps track of the name of the current step\n\n    private wizardStepsSnapshot: Array<TSWizardStep> = [];\n\n\n    static $inject = ['AuthServiceRS', 'WizardStepRS', '$q', '$rootScope'];\n    /* @ngInject */\n    constructor(private authServiceRS: AuthServiceRS, private wizardStepRS: WizardStepRS, private $q: IQService,\n                private $rootScope: IRootScopeService) {\n        this.setAllowedStepsForRole(authServiceRS.getPrincipalRole());\n\n        $rootScope.$on(TSAuthEvent[TSAuthEvent.LOGIN_SUCCESS], () => {\n            this.setAllowedStepsForRole(authServiceRS.getPrincipalRole());\n        });\n    }\n\n    public getCurrentStep(): TSWizardStep {\n        return this.getStepByName(this.currentStepName);\n    }\n\n    public setCurrentStep(stepName: TSWizardStepName): void {\n        this.currentStepName = stepName;\n    }\n\n    public getCurrentStepName(): TSWizardStepName {\n        return this.currentStepName;\n    }\n\n    /**\n     * Initializes WizardSteps with one single Step GESUCH_ERSTELLEN which status is IN_BEARBEITUNG.\n     * This method must be called only when the Gesuch doesn't exist yet.\n     */\n    public initWizardSteps() {\n        this.wizardSteps = [new TSWizardStep(undefined, TSWizardStepName.GESUCH_ERSTELLEN, TSWizardStepStatus.IN_BEARBEITUNG, undefined, true)];\n        this.wizardSteps.push(new TSWizardStep(undefined, TSWizardStepName.FAMILIENSITUATION, TSWizardStepStatus.UNBESUCHT, 'initFinSit dummy', false));\n        this.currentStepName = TSWizardStepName.GESUCH_ERSTELLEN;\n    }\n\n    public getAllowedSteps(): Array<TSWizardStepName> {\n        return this.allowedSteps;\n    }\n\n    public getWizardSteps(): Array<TSWizardStep> {\n        return this.wizardSteps;\n    }\n\n    public getVisibleSteps(): Array<TSWizardStepName> {\n        return this.allowedSteps.filter(element =>\n            !this.isStepHidden(element)\n        );\n    }\n\n    public setAllowedStepsForRole(role: TSRole): void {\n        if (TSRoleUtil.getTraegerschaftInstitutionOnlyRoles().indexOf(role) > -1) {\n            this.setAllowedStepsForInstitutionTraegerschaft();\n\n        } else if (TSRoleUtil.getSchulamtOnlyRoles().indexOf(role) > -1) {\n            this.setAllowedStepsForSchulamt();\n\n        } else if (TSRoleUtil.getSteueramtOnlyRoles().indexOf(role) > -1) {\n            this.setAllowedStepsForSteueramt();\n\n        } else {\n            this.setAllAllowedSteps();\n        }\n    }\n\n    private setAllowedStepsForInstitutionTraegerschaft(): void {\n        this.allowedSteps = [];\n        this.allowedSteps.push(TSWizardStepName.FAMILIENSITUATION);\n        this.allowedSteps.push(TSWizardStepName.GESUCHSTELLER);\n        this.allowedSteps.push(TSWizardStepName.UMZUG);\n        this.allowedSteps.push(TSWizardStepName.BETREUUNG);\n        this.allowedSteps.push(TSWizardStepName.ABWESENHEIT);\n        this.allowedSteps.push(TSWizardStepName.VERFUEGEN);\n    }\n\n    private setAllowedStepsForSteueramt(): void {\n        this.allowedSteps = [];\n        this.allowedSteps.push(TSWizardStepName.FAMILIENSITUATION);\n        this.allowedSteps.push(TSWizardStepName.GESUCHSTELLER);\n        this.allowedSteps.push(TSWizardStepName.UMZUG);\n        this.allowedSteps.push(TSWizardStepName.KINDER);\n        this.allowedSteps.push(TSWizardStepName.FINANZIELLE_SITUATION);\n        this.allowedSteps.push(TSWizardStepName.EINKOMMENSVERSCHLECHTERUNG);\n    }\n\n    private setAllowedStepsForSchulamt(): void {\n        this.allowedSteps = getTSWizardStepNameValues().filter(element =>\n            (element !== TSWizardStepName.ERWERBSPENSUM && //schulamt sieht erwerbspensum und abwesenheit nicht\n            element !== TSWizardStepName.ABWESENHEIT)\n        );\n    }\n\n    private setAllAllowedSteps(): void {\n        this.allowedSteps = getTSWizardStepNameValues();\n    }\n\n    /**\n     * Sollten keine WizardSteps gefunden werden, wird die Methode initWizardSteps aufgerufen, um die\n     * minimale Steps herzustellen. Die erlaubten Steps fuer den aktuellen Benutzer werden auch gesetzt\n     * @param gesuchId\n     * @returns {IPromise<void>}\n     */\n    public findStepsFromGesuch(gesuchId: string): IPromise<void> {\n        return this.wizardStepRS.findWizardStepsFromGesuch(gesuchId).then((response: Array<any>) => {\n            if (response != null && response.length > 0) {\n                this.wizardSteps = response;\n            } else {\n                this.initWizardSteps();\n            }\n            this.backupCurrentSteps();\n            this.setAllowedStepsForRole(this.authServiceRS.getPrincipalRole());\n        });\n    }\n\n    public getStepByName(stepName: TSWizardStepName): TSWizardStep {\n\n        return this.wizardSteps.filter((step: TSWizardStep) => {\n            return step.wizardStepName === stepName;\n        })[0];\n    }\n\n    /**\n     * Der Step wird aktualisiert und die Liste von Steps wird nochmal aus dem Server geholt. Sollte der Status gleich sein,\n     * wird nichts gemacht und undefined wird zurueckgegeben. Der Status wird auch auf verfuegbar gesetzt\n     * @param stepName\n     * @param newStepStatus\n     * @returns {any}\n     */\n    public updateWizardStepStatus(stepName: TSWizardStepName, newStepStatus: TSWizardStepStatus): IPromise<void> {\n        let step: TSWizardStep = this.getStepByName(stepName);\n        step.verfuegbar = true;\n        if (this.needNewStatusSave(step.wizardStepStatus, newStepStatus)) { // nur wenn der Status sich geaendert hat updaten und steps laden\n            step.wizardStepStatus = newStepStatus;\n            return this.wizardStepRS.updateWizardStep(step).then((response: TSWizardStep) => {\n                return this.findStepsFromGesuch(response.gesuchId);\n            });\n        }\n        return this.$q.when();\n    }\n\n    public updateCurrentWizardStepStatusMutiert(): IPromise<void> {\n        return this.wizardStepRS.setWizardStepMutiert(this.getCurrentStep().id).then((response: TSWizardStep) => {\n            return this.findStepsFromGesuch(response.gesuchId);\n        });\n    }\n\n    private needNewStatusSave(oldStepStatus: TSWizardStepStatus, newStepStatus: TSWizardStepStatus) {\n        if (oldStepStatus === newStepStatus) {\n            return false;\n        }\n\n        if ((newStepStatus === TSWizardStepStatus.IN_BEARBEITUNG || newStepStatus === TSWizardStepStatus.WARTEN)\n            && oldStepStatus !== TSWizardStepStatus.UNBESUCHT) {\n            return false;\n        }\n\n        if (newStepStatus === TSWizardStepStatus.OK && oldStepStatus === TSWizardStepStatus.MUTIERT) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Der aktuelle Step wird aktualisiert und die Liste von Steps wird nochmal aus dem Server geholt. Sollte der Status gleich sein,\n     * nichts wird gemacht und undefined wird zurueckgegeben.\n     * @param stepStatus\n     * @returns {IPromise<void>}\n     */\n    public updateCurrentWizardStepStatus(stepStatus: TSWizardStepStatus): IPromise<void> {\n        return this.updateWizardStepStatus(this.currentStepName, stepStatus);\n    }\n\n    /**\n     * Just updates the current step as is\n     * @returns {IPromise<void>}\n     */\n    public updateCurrentWizardStep(): IPromise<void> {\n        return this.wizardStepRS.updateWizardStep(this.getCurrentStep()).then((response: TSWizardStep) => {\n            return this.findStepsFromGesuch(response.gesuchId);\n        });\n    }\n\n\n    /**\n     * Diese Methode ist eine Ausnahme. Im ersten Step haben wir das Problem, dass das Gesuch noch nicht existiert. Deswegen koennen\n     * wir die Kommentare nicht direkt speichern. Die Loesung ist: nach dem das Gesuch erstellt wird und somit auch die WizardSteps,\n     * holen wir diese aus der Datenbank, aktualisieren den Step GESUCH_ERSTELLEN mit den Kommentaren und speichern dieses nochmal.\n     * @param gesuchId\n     * @returns {IPromise<void>}\n     */\n    public updateFirstWizardStep(gesuchId: string): IPromise<void> {\n        let firstStepBemerkungen = angular.copy(this.getCurrentStep().bemerkungen);\n        return this.findStepsFromGesuch(gesuchId).then(() => {\n            this.getCurrentStep().bemerkungen = firstStepBemerkungen;\n            return this.updateCurrentWizardStep();\n        });\n    }\n\n    /**\n     * Gibt true zurueck wenn der Status vom naechsten Step != UNBESUCHT ist. D.h. wenn es verfuegbar ist\n     * @returns {boolean}\n     */\n    public isNextStepBesucht(gesuch: TSGesuch): boolean {\n        return this.getStepByName(this.getNextStep(gesuch)).wizardStepStatus !== TSWizardStepStatus.UNBESUCHT;\n    }\n\n    /**\n     * Gibt true zurueck wenn der naechste Step enabled (verfuegbar) ist\n     * @returns {boolean}\n     */\n    public isNextStepEnabled(gesuch: TSGesuch): boolean {\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getSteueramtOnlyRoles()) && this.currentStepName === TSWizardStepName.EINKOMMENSVERSCHLECHTERUNG) {\n            // Dies ist ein Hack. Das Problem ist, dass der Step EKV der letzte fuer das Steueramt ist, und da er substeps hat,\n            // ist es sehr schwierig zu wissen, wann man darf und wann nicht. Wir sollten die ganze Funktionalitaet von Steps verbessern\n            return true;\n        }\n        return this.isStepAvailableViaBtn(this.getNextStep(gesuch), gesuch);\n    }\n\n    public getNextStep(gesuch: TSGesuch): TSWizardStepName {\n        let allVisibleStepNames = this.getVisibleSteps();\n        let currentPosition: number = allVisibleStepNames.indexOf(this.getCurrentStepName()) + 1;\n        for (let i = currentPosition; i < allVisibleStepNames.length; i++) {\n            if (this.isStepAvailableViaBtn(allVisibleStepNames[i], gesuch)) {\n                return allVisibleStepNames[i];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * iterate through the existing steps and get the previous one based on the current position\n     */\n    public getPreviousStep(gesuch: TSGesuch): TSWizardStepName {\n        let allVisibleStepNames = this.getVisibleSteps();\n        let currentPosition: number = allVisibleStepNames.indexOf(this.getCurrentStepName()) - 1;\n        for (let i = currentPosition; i >= 0; i--) {\n            if (this.isStepAvailableViaBtn(allVisibleStepNames[i], gesuch)) {\n                return allVisibleStepNames[i];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * gibt true zurueck wenn step mit next/prev button erreichbar sein soll\n     */\n    private isStepAvailableViaBtn(stepName: TSWizardStepName, gesuch: TSGesuch): boolean {\n        let step: TSWizardStep = this.getStepByName(stepName);\n\n        if (step !== undefined) {\n            return (this.isStepClickableForCurrentRole(step, gesuch)\n            || ((gesuch.typ === TSAntragTyp.ERSTGESUCH || gesuch.typ === TSAntragTyp.ERNEUERUNGSGESUCH) && step.wizardStepStatus === TSWizardStepStatus.UNBESUCHT\n            && !(this.authServiceRS.isOneOfRoles(TSRoleUtil.getAllButAdministratorJugendamtRoleAsRoles()) && stepName === TSWizardStepName.VERFUEGEN))\n            || (gesuch.typ === TSAntragTyp.MUTATION && step.wizardStepName === TSWizardStepName.FAMILIENSITUATION));\n        }\n        return false;  // wenn der step undefined ist geben wir mal verfuegbar zurueck\n    }\n\n    /**\n     * gibt true zurueck wenn eins step fuer die aktuelle rolle disabled ist.\n     * Wenn es keine sonderregel gibt wird der default der aus dem server empfangen wurde\n     * zurueckgegeben\n     */\n    public isStepClickableForCurrentRole(step: TSWizardStep, gesuch: TSGesuch) {\n        if (step.wizardStepName === TSWizardStepName.VERFUEGEN) {\n            //verfuegen fuer admin und jugendamt  immer sichtbar\n            if (!this.authServiceRS.isOneOfRoles(TSRoleUtil.getAdministratorJugendamtRole())) {\n                // schulamt darf ab geprueft den screen sehen, oder wenn der Status schon NUR_SCHULAMT ist\n                if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getSchulamtOnlyRoles())) {\n                    if (gesuch.status !== TSAntragStatus.GEPRUEFT && gesuch.status !== TSAntragStatus.VERFUEGEN\n                        && !isAnyStatusOfVerfuegt(gesuch.status)) {\n                        return false;\n                    }\n                    //gesuchsteller darf \"verfuegen\" seite sehen sobald er das gesuch freigegeben hat\n                } else if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                    return isAtLeastFreigegeben(gesuch.status);\n                } else {\n                    // ... alle anderen ab VERFUEGT\n                    if (!isAnyStatusOfVerfuegt(gesuch.status)) {\n                        return false;\n                    }\n                }\n            }\n            return this.areAllStepsOK(gesuch);\n        }\n        return step.verfuegbar === true;  //wenn keine Sonderbedingung gehen wir davon aus dass der step nicht disabled ist\n    }\n\n    /**\n     * Gibt true zurueck, nur wenn alle Steps den Status OK haben.\n     *  - Dokumente duerfen allerdings IN_BEARBEITUNG sein\n     *  - Bei BETREUUNGEN darf es WARTEN sein\n     *  - Der Status von VERFUEGEN wird gar nicht beruecksichtigt\n     */\n    public areAllStepsOK(gesuch: TSGesuch): boolean {\n        for (let i = 0; i < this.wizardSteps.length; i++) {\n            if (this.wizardSteps[i].wizardStepName === TSWizardStepName.BETREUUNG) {\n                if (!this.isStatusOk(this.wizardSteps[i].wizardStepStatus)\n                    && this.wizardSteps[i].wizardStepStatus !== TSWizardStepStatus.PLATZBESTAETIGUNG\n                    && (this.wizardSteps[i].wizardStepStatus !== TSWizardStepStatus.NOK\n                    && !gesuch.isThereAnyBetreuung())) {\n                    return false;\n                }\n\n            } else if (this.wizardSteps[i].wizardStepName === TSWizardStepName.DOKUMENTE) {\n                if (this.wizardSteps[i].wizardStepStatus === TSWizardStepStatus.NOK) {\n                    return false;\n                }\n\n            } else if (this.wizardSteps[i].wizardStepName !== TSWizardStepName.VERFUEGEN\n                && this.wizardSteps[i].wizardStepName !== TSWizardStepName.ABWESENHEIT\n                && this.wizardSteps[i].wizardStepName !== TSWizardStepName.UMZUG\n                && this.wizardSteps[i].wizardStepName !== TSWizardStepName.FREIGABE\n                && !this.isStatusOk(this.wizardSteps[i].wizardStepStatus)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private isStatusOk(wizardStepStatus: TSWizardStepStatus) {\n        return wizardStepStatus === TSWizardStepStatus.OK || wizardStepStatus === TSWizardStepStatus.MUTIERT;\n    }\n\n    /**\n     * Prueft fuer den gegebenen Step ob sein Status OK oder MUTIERT ist\n     */\n    public isStepStatusOk(wizardStepName: TSWizardStepName) {\n        return this.hasStepGivenStatus(wizardStepName, TSWizardStepStatus.OK)\n            || this.hasStepGivenStatus(wizardStepName, TSWizardStepStatus.MUTIERT);\n    }\n\n    /**\n     * Gibt true zurueck wenn der Step existiert und sein Status OK ist\n     * @param stepName\n     * @param status\n     * @returns {boolean}\n     */\n    public hasStepGivenStatus(stepName: TSWizardStepName, status: TSWizardStepStatus): boolean {\n        if (this.getStepByName(stepName)) {\n            return this.getStepByName(stepName).wizardStepStatus === status;\n        }\n        return false;\n    }\n\n    public backupCurrentSteps(): void {\n        this.wizardStepsSnapshot = angular.copy(this.wizardSteps);\n    }\n\n    public restorePreviousSteps(): void {\n        this.wizardSteps = this.wizardStepsSnapshot;\n    }\n\n    /**\n     * Guckt zuerst dass der Step in der Liste von allowedSteps ist. wenn ja wird es geguckt\n     * ob der Step in derl Liste hiddenSteps ist.\n     * allowed und nicht hidden Steps -> true\n     * alle anderen -> false\n     */\n    public isStepVisible(stepName: TSWizardStepName): boolean {\n        return (this.allowedSteps.indexOf(stepName) >= 0 && !this.isStepHidden(stepName));\n    }\n\n    public hideStep(stepName: TSWizardStepName): void {\n        if (!this.isStepHidden(stepName)) {\n            this.hiddenSteps.push(stepName);\n        }\n    }\n\n    /**\n     * Obwohl das Wort unhide nicht existiert, finde ich den Begriff ausfuehrlicher fuer diesen Fall als show\n     */\n    public unhideStep(stepName: TSWizardStepName): void {\n        if (this.isStepHidden(stepName)) {\n            this.hiddenSteps.splice(this.hiddenSteps.indexOf(stepName), 1);\n        }\n    }\n\n    private isStepHidden(stepName: TSWizardStepName): boolean {\n        return this.hiddenSteps.indexOf(stepName) >= 0;\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-timepicker/dv-timepicker.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-timepicker/dv-timepicker.ts","mtime":1518003987680},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar moment = require(\"moment\");\nvar DateUtil_1 = require(\"../../../utils/DateUtil\");\nvar template = require('./dv-timepicker.html');\nvar DVTimepicker = /** @class */ (function () {\n    function DVTimepicker() {\n        this.restrict = 'E';\n        this.require = { ngModelCtrl: 'ngModel' };\n        this.scope = {\n            ngModel: '=',\n            inputId: '@',\n            ngRequired: '<',\n            placeholder: '@',\n            ngDisabled: '<',\n            noFuture: '<?',\n            dvOnBlur: '&?',\n            dvMinDateTime: '<?',\n            dvMaxDateTime: '<?' // Kann als String im Format allowedFormats oder als Moment angegeben werden\n        };\n        this.controller = TimepickerController;\n        this.controllerAs = 'vm';\n        this.bindToController = true;\n        this.template = template;\n    }\n    /* constructor() { this.link = this.unboundLink.bind(this); }*/\n    DVTimepicker.factory = function () {\n        var directive = function () { return new DVTimepicker(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return DVTimepicker;\n}());\nexports.DVTimepicker = DVTimepicker;\nvar TimepickerController = /** @class */ (function () {\n    function TimepickerController($log, $attrs) {\n        this.$log = $log;\n        this.$attrs = $attrs;\n    }\n    // beispiel wie man auf changes eines attributes von aussen reagieren kann\n    TimepickerController.prototype.$onChanges = function (changes) {\n        if (changes.ngRequired && !changes.ngRequired.isFirstChange()) {\n            this.dateTimeRequired = changes.ngRequired.currentValue;\n        }\n    };\n    //wird von angular aufgerufen\n    TimepickerController.prototype.$onInit = function () {\n        var _this = this;\n        if (!this.ngModelCtrl) {\n            return;\n        }\n        // Wenn kein Minimumdatum gesetzt ist, verwenden wir 01.01.1900 als Minimum\n        if (this.dvMinDateTime === undefined) {\n            this.dvMinDateTime = DateUtil_1.default.localDateToMoment('1900-01-01 00:00');\n        }\n        var noFuture = 'noFuture' in this.$attrs;\n        //wenn kein Placeholder gesetzt wird wird der standardplaceholder verwendet. kann mit placeholder=\"\"\n        // ueberscrieben werden\n        if (this.placeholder === undefined) {\n            this.placeholder = 'hh:mm';\n        }\n        else if (this.placeholder === '') {\n            this.placeholder = undefined;\n        }\n        if (this.ngRequired) {\n            this.dateTimeRequired = this.ngRequired;\n        }\n        this.ngModelCtrl.$render = function () {\n            _this.dateTime = _this.ngModelCtrl.$viewValue;\n        };\n        this.ngModelCtrl.$formatters.unshift(TimepickerController.momentToString);\n        this.ngModelCtrl.$parsers.push(TimepickerController.stringToMoment);\n        this.ngModelCtrl.$validators['moment'] = function (modelValue, viewValue) {\n            // if not required and view value empty, it's ok...\n            if (!_this.dateTimeRequired && !viewValue) {\n                return true;\n            }\n            return _this.getInputAsMoment(modelValue, viewValue).isValid();\n        };\n        // Validator fuer Minimal-Datum\n        this.ngModelCtrl.$validators['dvMinDateTime'] = function (modelValue, viewValue) {\n            var result = true;\n            if (_this.dvMinDateTime && viewValue) {\n                var minDateTimeAsMoment = moment(_this.dvMinDateTime, TimepickerController.allowedFormats, true);\n                if (minDateTimeAsMoment.isValid()) {\n                    var inputAsMoment = _this.getInputAsMoment(modelValue, viewValue);\n                    if (inputAsMoment && inputAsMoment.isBefore(minDateTimeAsMoment)) {\n                        result = false;\n                    }\n                }\n                else {\n                    _this.$log.debug('min time is invalid', _this.dvMinDateTime);\n                }\n            }\n            return result;\n        };\n        if (noFuture) {\n            this.ngModelCtrl.$validators['dvNoFutureDateTime'] = function (modelValue, viewValue) {\n                var result = true;\n                if (viewValue) {\n                    var maxDateTimeAsMoment = moment(moment.now());\n                    var inputAsMoment = _this.getInputAsMoment(modelValue, viewValue);\n                    if (inputAsMoment && inputAsMoment.isAfter(maxDateTimeAsMoment)) {\n                        result = false;\n                    }\n                }\n                return result;\n            };\n        }\n        // Validator fuer Maximal-Datum\n        this.ngModelCtrl.$validators['dvMaxDateTime'] = function (modelValue, viewValue) {\n            var result = true;\n            if (_this.dvMaxDateTime && viewValue) {\n                var maxDateTimeAsMoment = moment(_this.dvMaxDateTime, TimepickerController.allowedFormats, true);\n                if (maxDateTimeAsMoment.isValid()) {\n                    var inputAsMoment = _this.getInputAsMoment(modelValue, viewValue);\n                    if (inputAsMoment && inputAsMoment.isAfter(maxDateTimeAsMoment)) {\n                        result = false;\n                    }\n                }\n                else {\n                    _this.$log.debug('max time is invalid', _this.dvMaxDateTime);\n                }\n            }\n            return result;\n        };\n    };\n    TimepickerController.prototype.getInputAsMoment = function (modelValue, viewValue) {\n        var value = modelValue || TimepickerController.stringToMoment(viewValue);\n        var inputdateTime = moment(value, TimepickerController.allowedFormats, true);\n        return inputdateTime;\n    };\n    TimepickerController.prototype.onBlur = function () {\n        if (this.dvOnBlur) {\n            this.dvOnBlur();\n        }\n        this.ngModelCtrl.$setTouched();\n    };\n    TimepickerController.prototype.updateTimeModelValue = function () {\n        this.ngModelCtrl.$setViewValue(this.dateTime);\n    };\n    TimepickerController.momentToString = function (mom) {\n        if (mom && mom.isValid()) {\n            return mom.format(TimepickerController.defaultFormat);\n        }\n        return '';\n    };\n    TimepickerController.stringToMoment = function (dateTime) {\n        if (moment(dateTime, TimepickerController.allowedFormats, true).isValid()) {\n            return moment(dateTime, TimepickerController.allowedFormats, true);\n        }\n        return null;\n    };\n    TimepickerController.$inject = ['$log', '$attrs'];\n    TimepickerController.allowedFormats = ['HH:mm:ss', 'HH:mm'];\n    TimepickerController.defaultFormat = 'HH:mm';\n    return TimepickerController;\n}());\nexports.TimepickerController = TimepickerController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-timepicker/dv-timepicker.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-timepicker/dv-timepicker.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IDirective, IDirectiveFactory} from 'angular';\nimport * as moment from 'moment';\nimport DateUtil from '../../../utils/DateUtil';\nimport IAttributes = angular.IAttributes;\nimport ILogService = angular.ILogService;\nimport INgModelController = angular.INgModelController;\nimport Moment = moment.Moment;\n\nlet template = require('./dv-timepicker.html');\n\nexport class DVTimepicker implements IDirective {\n    restrict = 'E';\n    require: any = {ngModelCtrl: 'ngModel'};\n    scope = {\n        ngModel: '=',\n        inputId: '@',\n        ngRequired: '<',\n        placeholder: '@',\n        ngDisabled: '<',\n        noFuture: '<?',\n        dvOnBlur: '&?',\n        dvMinDateTime: '<?', // Kann als String im Format allowedFormats oder als Moment angegeben werden\n        dvMaxDateTime: '<?'  // Kann als String im Format allowedFormats oder als Moment angegeben werden\n    };\n    controller = TimepickerController;\n    controllerAs = 'vm';\n    bindToController = true;\n    template = template;\n\n    /* constructor() { this.link = this.unboundLink.bind(this); }*/\n    static factory(): IDirectiveFactory {\n        const directive = () => new DVTimepicker();\n        directive.$inject = [];\n        return directive;\n    }\n}\n\nexport class TimepickerController {\n    static $inject: string[] = ['$log', '$attrs'];\n    dateTime: Date;\n    ngModelCtrl: INgModelController;\n    dateTimeRequired: boolean;\n    ngRequired: boolean;\n    placeholder: string;\n    dvOnBlur: () => void;\n    dvMinDateTime: any;\n    dvMaxDateTime: any;\n    static allowedFormats: string[] = ['HH:mm:ss', 'HH:mm'];\n    static defaultFormat: string = 'HH:mm';\n\n    constructor(private $log: ILogService, private $attrs: IAttributes) {\n    }\n\n    // beispiel wie man auf changes eines attributes von aussen reagieren kann\n    $onChanges(changes: any) {\n        if (changes.ngRequired && !changes.ngRequired.isFirstChange()) {\n            this.dateTimeRequired = changes.ngRequired.currentValue;\n        }\n\n    }\n\n    //wird von angular aufgerufen\n    $onInit() {\n\n        if (!this.ngModelCtrl) {\n            return;\n        }\n        // Wenn kein Minimumdatum gesetzt ist, verwenden wir 01.01.1900 als Minimum\n        if (this.dvMinDateTime === undefined) {\n            this.dvMinDateTime = DateUtil.localDateToMoment('1900-01-01 00:00');\n        }\n        let noFuture = 'noFuture' in this.$attrs;\n        //wenn kein Placeholder gesetzt wird wird der standardplaceholder verwendet. kann mit placeholder=\"\"\n        // ueberscrieben werden\n        if (this.placeholder === undefined) {\n            this.placeholder = 'hh:mm';\n        } else if (this.placeholder === '') {\n            this.placeholder = undefined;\n        }\n\n        if (this.ngRequired) {\n            this.dateTimeRequired = this.ngRequired;\n        }\n\n        this.ngModelCtrl.$render = () => {\n            this.dateTime = this.ngModelCtrl.$viewValue;\n        };\n        this.ngModelCtrl.$formatters.unshift(TimepickerController.momentToString);\n        this.ngModelCtrl.$parsers.push(TimepickerController.stringToMoment);\n\n        this.ngModelCtrl.$validators['moment'] = (modelValue: any, viewValue: any) => {\n            // if not required and view value empty, it's ok...\n            if (!this.dateTimeRequired && !viewValue) {\n                return true;\n            }\n            return this.getInputAsMoment(modelValue, viewValue).isValid();\n        };\n        // Validator fuer Minimal-Datum\n        this.ngModelCtrl.$validators['dvMinDateTime'] = (modelValue: any, viewValue: any) => {\n            let result: boolean = true;\n            if (this.dvMinDateTime && viewValue) {\n                let minDateTimeAsMoment: Moment = moment(this.dvMinDateTime, TimepickerController.allowedFormats, true);\n                if (minDateTimeAsMoment.isValid()) {\n                    let inputAsMoment: Moment = this.getInputAsMoment(modelValue, viewValue);\n                    if (inputAsMoment && inputAsMoment.isBefore(minDateTimeAsMoment)) {\n                        result = false;\n                    }\n                } else {\n                    this.$log.debug('min time is invalid', this.dvMinDateTime);\n                }\n            }\n            return result;\n        };\n        if (noFuture) {\n            this.ngModelCtrl.$validators['dvNoFutureDateTime'] = (modelValue: any, viewValue: any) => {\n                let result: boolean = true;\n                if (viewValue) {\n                    let maxDateTimeAsMoment: Moment = moment(moment.now());\n                    let inputAsMoment: Moment = this.getInputAsMoment(modelValue, viewValue);\n                    if (inputAsMoment && inputAsMoment.isAfter(maxDateTimeAsMoment)) {\n                        result = false;\n                    }\n                }\n                return result;\n            };\n        }\n        // Validator fuer Maximal-Datum\n        this.ngModelCtrl.$validators['dvMaxDateTime'] = (modelValue: any, viewValue: any) => {\n            let result: boolean = true;\n            if (this.dvMaxDateTime && viewValue) {\n                let maxDateTimeAsMoment: Moment = moment(this.dvMaxDateTime, TimepickerController.allowedFormats, true);\n                if (maxDateTimeAsMoment.isValid()) {\n                    let inputAsMoment: Moment = this.getInputAsMoment(modelValue, viewValue);\n                    if (inputAsMoment && inputAsMoment.isAfter(maxDateTimeAsMoment)) {\n                        result = false;\n                    }\n                } else {\n                    this.$log.debug('max time is invalid', this.dvMaxDateTime);\n                }\n            }\n            return result;\n        };\n    }\n\n    private getInputAsMoment(modelValue: any, viewValue: any): Moment {\n        let value = modelValue || TimepickerController.stringToMoment(viewValue);\n        let inputdateTime: Moment = moment(value, TimepickerController.allowedFormats, true);\n        return inputdateTime;\n    }\n\n    onBlur() {\n        if (this.dvOnBlur) { // userdefined onBlur event\n            this.dvOnBlur();\n        }\n        this.ngModelCtrl.$setTouched();\n    }\n\n    updateTimeModelValue() {\n        this.ngModelCtrl.$setViewValue(this.dateTime);\n    }\n\n    private static momentToString(mom: Moment): string {\n        if (mom && mom.isValid()) {\n            return mom.format(TimepickerController.defaultFormat);\n        }\n        return '';\n    }\n\n    private static stringToMoment(dateTime: string): any {\n        if (moment(dateTime, TimepickerController.allowedFormats, true).isValid()) {\n            return moment(dateTime, TimepickerController.allowedFormats, true);\n        }\n        return null;\n    }\n}\n"]}]}
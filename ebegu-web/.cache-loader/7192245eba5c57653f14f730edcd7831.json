{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-loading-button/dv-loading-button.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-loading-button/dv-loading-button.ts","mtime":1512484412003},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSHTTPEvent_1 = require(\"../../events/TSHTTPEvent\");\nvar template = require('./dv-loading-button.html');\nvar DVLoadingButton = /** @class */ (function () {\n    function DVLoadingButton() {\n        this.transclude = true;\n        this.restrict = 'E';\n        this.require = { dvLoadingButtonCtrl: 'dvLoadingButton', formCtrl: '^?form' };\n        this.replace = true;\n        this.scope = {\n            type: '@',\n            delay: '@',\n            buttonClass: '@',\n            forceWaitService: '@',\n            buttonDisabled: '<',\n            ariaLabel: '@',\n            buttonClick: '&',\n            inputId: '@'\n        };\n        this.template = template;\n        this.controller = DVLoadingButtonController;\n        this.controllerAs = 'vm';\n        this.bindToController = true;\n    }\n    DVLoadingButton.factory = function () {\n        var directive = function () { return new DVLoadingButton(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return DVLoadingButton;\n}());\nexports.DVLoadingButton = DVLoadingButton;\n/**\n * Button that disables itself after clicking to prevent multiclicks. If embedded in a form-controller it will check if\n * the form is valid first. If not it will not disable itself.\n * By default the button will be disabled till the next REST servicecall returns (not neceserally the one that was\n * triggered by this button) or till 400 ms have expired\n * @example:\n *\n <dv-loading-button type=\"submit\"\n button-click=\"vm.mySaveFunction()\"\n button-class=\"btn btn-sm btn-success\"\n button-disabled=\"!vm.isButtonDisabled()\">\n <i class=\"glyphicon glyphicon-plus\"></i>\n <span data-translate=\"SAVE\"></span>\n </dv-loading-button>\n *\n */\nvar DVLoadingButtonController = /** @class */ (function () {\n    /* @ngInject */\n    function DVLoadingButtonController($http, $scope, $timeout, $attrs, $log) {\n        this.$http = $http;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.$attrs = $attrs;\n        this.$log = $log;\n    }\n    //wird von angular aufgerufen\n    DVLoadingButtonController.prototype.$onInit = function () {\n        var _this = this;\n        if ('ngClick' in this.$attrs) {\n            this.$log.error('must not use ng-click on dv-loading-button', this);\n        }\n        if ('ngDisabled' in this.$attrs) {\n            this.$log.error('must not use ng-disabled on dv-loading-button', this);\n        }\n        if (!this.type) {\n            this.type = 'button'; //wenn kein expliziter type angegeben wurde nehmen wir default button\n        }\n        this.buttonClicked = function ($event) {\n            //wenn der button disabled ist machen wir mal gar nichts\n            if (_this.buttonDisabled || _this.isDisabled) {\n                return;\n            }\n            _this.buttonClick();\n            $event.stopPropagation();\n            //falls ein button-click callback uebergeben wurde ausfuehren\n            //timeout wird gebraucht damit der request nach dem disablen ueberhaupt uebermittelt wird\n            _this.$timeout(function () {\n                if (!_this.forceWaitService) {\n                    if (_this.formCtrl) {\n                        //button wird nur disabled wenn form valid\n                        if (_this.formCtrl.$valid) {\n                            _this.disableForDelay();\n                        }\n                    }\n                    else {\n                        _this.disableForDelay();\n                    }\n                }\n                else {\n                    //wir warten auf naechsten service return, egal wie lange es dauert\n                    _this.isDisabled = true;\n                }\n            }, 0);\n        };\n        this.$scope.$on(TSHTTPEvent_1.TSHTTPEvent.REQUEST_FINISHED, function (event) {\n            _this.isDisabled = false;\n        });\n    };\n    // beispiel wie man auf changes eines attributes von aussen reagieren kann\n    DVLoadingButtonController.prototype.$onChanges = function (changes) {\n        if (changes.buttonDisabled && !changes.buttonDisabled.isFirstChange()) {\n            this.buttonDisabled = changes.buttonDisabled.currentValue;\n        }\n    };\n    DVLoadingButtonController.prototype.getDelay = function () {\n        if (this.delay) {\n            var parsedNum = parseInt(this.delay);\n            if (parsedNum !== undefined && parsedNum !== null) {\n                return parsedNum;\n            }\n        }\n        return 4000; //default delay = 4000 MS\n    };\n    /**\n     * disabled den Button fuer \"delay\" millisekunden\n     */\n    DVLoadingButtonController.prototype.disableForDelay = function () {\n        var _this = this;\n        this.isDisabled = true;\n        this.$timeout(function () {\n            _this.isDisabled = false;\n        }, this.getDelay());\n    };\n    DVLoadingButtonController.$inject = ['$http', '$scope', '$timeout', '$attrs', '$log'];\n    return DVLoadingButtonController;\n}());\nexports.DVLoadingButtonController = DVLoadingButtonController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-loading-button/dv-loading-button.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-loading-button/dv-loading-button.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IDirective, IDirectiveFactory} from 'angular';\nimport {TSHTTPEvent} from '../../events/TSHTTPEvent';\nimport IHttpService = angular.IHttpService;\nimport ITimeoutService = angular.ITimeoutService;\nimport IFormController = angular.IFormController;\nimport IAttributes = angular.IAttributes;\nimport ILogService = angular.ILogService;\n\nlet template = require('./dv-loading-button.html');\n\ninterface IDVLoadingButtonController {\n    isDisabled: boolean;\n    buttonDisabled: boolean;\n}\n\nexport class DVLoadingButton implements IDirective {\n    transclude = true;\n    restrict = 'E';\n    require: any = {dvLoadingButtonCtrl: 'dvLoadingButton', formCtrl: '^?form'};\n    replace = true;\n    scope = {\n        type: '@',\n        delay: '@',\n        buttonClass: '@',\n        forceWaitService: '@',\n        buttonDisabled: '<',\n        ariaLabel: '@',\n        buttonClick: '&',\n        inputId: '@'\n    };\n    template = template;\n    controller = DVLoadingButtonController;\n    controllerAs = 'vm';\n    bindToController = true;\n\n    static factory(): IDirectiveFactory {\n        const directive = () => new DVLoadingButton();\n        directive.$inject = [];\n        return directive;\n    }\n}\n\n/**\n * Button that disables itself after clicking to prevent multiclicks. If embedded in a form-controller it will check if\n * the form is valid first. If not it will not disable itself.\n * By default the button will be disabled till the next REST servicecall returns (not neceserally the one that was\n * triggered by this button) or till 400 ms have expired\n * @example:\n *\n <dv-loading-button type=\"submit\"\n button-click=\"vm.mySaveFunction()\"\n button-class=\"btn btn-sm btn-success\"\n button-disabled=\"!vm.isButtonDisabled()\">\n <i class=\"glyphicon glyphicon-plus\"></i>\n <span data-translate=\"SAVE\"></span>\n </dv-loading-button>\n *\n */\nexport class DVLoadingButtonController implements IDVLoadingButtonController {\n    static $inject: string[] = ['$http', '$scope', '$timeout', '$attrs', '$log'];\n\n    buttonClicked: ($event: any) => void;\n    isDisabled: boolean;\n    formCtrl: IFormController;\n    delay: string;\n    type: string;\n    forceWaitService: string;\n    buttonDisabled: boolean; //true wenn unser element programmatisch disabled wird\n    buttonClick: () => void;\n\n    /* @ngInject */\n    constructor(private $http: IHttpService, private $scope: any, private $timeout: ITimeoutService,\n                private $attrs: IAttributes, private $log: ILogService) {\n    }\n\n    //wird von angular aufgerufen\n    $onInit() {\n        if ('ngClick' in this.$attrs) {\n            this.$log.error('must not use ng-click on dv-loading-button', this);\n        }\n        if ('ngDisabled' in this.$attrs) {\n            this.$log.error('must not use ng-disabled on dv-loading-button', this);\n        }\n        if (!this.type) {\n            this.type = 'button'; //wenn kein expliziter type angegeben wurde nehmen wir default button\n        }\n\n        this.buttonClicked = ($event: any) => {\n            //wenn der button disabled ist machen wir mal gar nichts\n            if (this.buttonDisabled || this.isDisabled) {\n                return;\n            }\n            this.buttonClick();\n            $event.stopPropagation();\n            //falls ein button-click callback uebergeben wurde ausfuehren\n\n            //timeout wird gebraucht damit der request nach dem disablen ueberhaupt uebermittelt wird\n            this.$timeout(() => {\n                if (!this.forceWaitService) {\n                    if (this.formCtrl) {  //wenn form-controller existiert\n                        //button wird nur disabled wenn form valid\n                        if (this.formCtrl.$valid) {\n                            this.disableForDelay();\n                        }\n                    } else { //wenn kein form einfach mal disablen fuer delay ms\n\n                        this.disableForDelay();\n                    }\n                } else {\n                    //wir warten auf naechsten service return, egal wie lange es dauert\n                    this.isDisabled = true;\n                }\n            }, 0);\n\n        };\n\n        this.$scope.$on(TSHTTPEvent.REQUEST_FINISHED, (event: any) => {\n            this.isDisabled = false;\n        });\n\n    }\n\n    // beispiel wie man auf changes eines attributes von aussen reagieren kann\n    $onChanges(changes: any) {\n        if (changes.buttonDisabled && !changes.buttonDisabled.isFirstChange()) {\n            this.buttonDisabled = changes.buttonDisabled.currentValue;\n        }\n\n    }\n\n    private getDelay(): number {\n        if (this.delay) {\n            let parsedNum = parseInt(this.delay);\n            if (parsedNum !== undefined && parsedNum !== null) {\n                return parsedNum;\n            }\n        }\n        return 4000;   //default delay = 4000 MS\n    }\n\n    /**\n     * disabled den Button fuer \"delay\" millisekunden\n     */\n    private disableForDelay(): void {\n        this.isDisabled = true;\n        this.$timeout(() => {\n            this.isDisabled = false;\n        }, this.getDelay());\n\n    }\n}\n"]}]}
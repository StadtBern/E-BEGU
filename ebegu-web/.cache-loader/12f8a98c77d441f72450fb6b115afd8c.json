{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/models/TSExceptionReport.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/models/TSExceptionReport.ts","mtime":1518535855232},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\", \"./enums/TSErrorType\", \"./enums/TSErrorLevel\", \"./enums/TSErrorAction\"], function (require, exports, TSErrorType_1, TSErrorLevel_1, TSErrorAction_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var TSExceptionReport = /** @class */ (function () {\n        /**\n         *\n         * @param type Type of the Error\n         * @param severity Severity of the Error\n         * @param msgKey This is the message key of the error. can also be the message itself\n         * @param args\n         */\n        function TSExceptionReport(type, severity, msgKey, args) {\n            this._action = undefined;\n            this._type = type || null;\n            this._severity = severity || null;\n            this._msgKey = msgKey || null;\n            this._argumentList = args || [];\n            this._action = undefined;\n        }\n        TSExceptionReport.prototype.isConstantValue = function (constant, value) {\n            var keys = Object.keys(constant);\n            for (var i = 0; i < keys.length; i++) {\n                if (value === constant[keys[i]]) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        TSExceptionReport.prototype.isValid = function () {\n            var validType = this.isConstantValue(TSErrorType_1.TSErrorType, this.type);\n            var validSeverity = this.isConstantValue(TSErrorLevel_1.TSErrorLevel, this.severity);\n            var validMsgKey = typeof this.msgKey === 'string' && this.msgKey.length > 0;\n            return validType && validSeverity && validMsgKey;\n        };\n        ;\n        TSExceptionReport.prototype.isInternal = function () {\n            return this.type === TSErrorType_1.TSErrorType.INTERNAL;\n        };\n        ;\n        Object.defineProperty(TSExceptionReport.prototype, \"type\", {\n            get: function () {\n                return this._type;\n            },\n            set: function (value) {\n                this._type = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"severity\", {\n            get: function () {\n                return this._severity;\n            },\n            set: function (value) {\n                this._severity = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"msgKey\", {\n            get: function () {\n                return this._msgKey;\n            },\n            set: function (value) {\n                this._msgKey = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"exceptionName\", {\n            get: function () {\n                return this._exceptionName;\n            },\n            set: function (value) {\n                this._exceptionName = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"methodName\", {\n            get: function () {\n                return this._methodName;\n            },\n            set: function (value) {\n                this._methodName = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"translatedMessage\", {\n            get: function () {\n                return this._translatedMessage;\n            },\n            set: function (value) {\n                this._translatedMessage = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"customMessage\", {\n            get: function () {\n                return this._customMessage;\n            },\n            set: function (value) {\n                this._customMessage = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"errorCodeEnum\", {\n            get: function () {\n                return this._errorCodeEnum;\n            },\n            set: function (value) {\n                this._errorCodeEnum = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"stackTrace\", {\n            get: function () {\n                return this._stackTrace;\n            },\n            set: function (value) {\n                this._stackTrace = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"objectId\", {\n            get: function () {\n                return this._objectId;\n            },\n            set: function (value) {\n                this._objectId = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"argumentList\", {\n            get: function () {\n                return this._argumentList;\n            },\n            set: function (value) {\n                this._argumentList = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"path\", {\n            get: function () {\n                return this._path;\n            },\n            set: function (value) {\n                this._path = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TSExceptionReport.prototype, \"action\", {\n            get: function () {\n                return this._action;\n            },\n            set: function (value) {\n                this._action = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TSExceptionReport.createFromViolation = function (constraintType, message, path, value) {\n            var report = new TSExceptionReport(TSErrorType_1.TSErrorType.VALIDATION, TSErrorLevel_1.TSErrorLevel.SEVERE, message, value);\n            report.path = path;\n            //hint: here we could also pass along the path to the Exception Report\n            return report;\n        };\n        TSExceptionReport.createClientSideError = function (severity, msgKey, args) {\n            return new TSExceptionReport(TSErrorType_1.TSErrorType.CLIENT_SIDE, severity, msgKey, args);\n        };\n        /**\n         * takes a data Object that matches the fields of a EbeguExceptionReport and transforms them to a TSExceptionReport.\n         * @param data\n         * @returns {TSExceptionReport}\n         */\n        TSExceptionReport.createFromExceptionReport = function (data) {\n            var msgToDisp = data.translatedMessage || data.customMessage || 'ERROR_UNEXPECTED_EBEGU_RUNTIME';\n            var exceptionReport = new TSExceptionReport(TSErrorType_1.TSErrorType.BADREQUEST, TSErrorLevel_1.TSErrorLevel.SEVERE, msgToDisp, data.argumentList);\n            exceptionReport.errorCodeEnum = data.errorCodeEnum;\n            exceptionReport.exceptionName = data.exceptionName;\n            exceptionReport.methodName = data.methodName;\n            exceptionReport.stackTrace = data.stackTrace;\n            exceptionReport.translatedMessage = msgToDisp;\n            exceptionReport.customMessage = data.customMessage;\n            exceptionReport.objectId = data.objectId;\n            exceptionReport.argumentList = data.argumentList;\n            exceptionReport.addActionToMessage();\n            return exceptionReport;\n        };\n        TSExceptionReport.prototype.addActionToMessage = function () {\n            if (this.errorCodeEnum === 'ERROR_EXISTING_ONLINE_MUTATION') {\n                this.action = TSErrorAction_1.TSErrorAction.REMOVE_ONLINE_MUTATION;\n            }\n            else if (this.errorCodeEnum === 'ERROR_EXISTING_ERNEUERUNGSGESUCH') {\n                this.action = TSErrorAction_1.TSErrorAction.REMOVE_ONLINE_ERNEUERUNGSGESUCH;\n            }\n        };\n        return TSExceptionReport;\n    }());\n    exports.default = TSExceptionReport;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/models/TSExceptionReport.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/models/TSExceptionReport.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;;;IAMH;QAqBI;;;;;;WAMG;QACH,2BAAY,IAAiB,EAAE,QAAsB,EAAE,MAAc,EAAE,IAAS;YATxE,YAAO,GAAkB,SAAS,CAAC;YAUvC,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,IAAI,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,IAAI,IAAI,CAAC;YAClC,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,IAAI,CAAC;YAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;YAChC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;QAC7B,CAAC;QAED,2CAAe,GAAf,UAAgB,QAAa,EAAE,KAAU;YACrC,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnC,EAAE,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9B,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,mCAAO,GAAP;YACI,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,yBAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,2BAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtE,IAAI,WAAW,GAAG,OAAO,IAAI,CAAC,MAAM,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YAE5E,MAAM,CAAC,SAAS,IAAI,aAAa,IAAI,WAAW,CAAC;QACrD,CAAC;QAAA,CAAC;QAEF,sCAAU,GAAV;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,yBAAW,CAAC,QAAQ,CAAC;QAC9C,CAAC;QAAA,CAAC;QAEF,sBAAI,mCAAI;iBAAR;gBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACtB,CAAC;iBAED,UAAS,KAAkB;gBACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,CAAC;;;WAJA;QAMD,sBAAI,uCAAQ;iBAAZ;gBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC1B,CAAC;iBAED,UAAa,KAAmB;gBAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YAC3B,CAAC;;;WAJA;QAMD,sBAAI,qCAAM;iBAAV;gBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACxB,CAAC;iBAED,UAAW,KAAa;gBACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACzB,CAAC;;;WAJA;QAMD,sBAAI,4CAAa;iBAAjB;gBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC/B,CAAC;iBAED,UAAkB,KAAa;gBAC3B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAChC,CAAC;;;WAJA;QAMD,sBAAI,yCAAU;iBAAd;gBACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;YAC5B,CAAC;iBAED,UAAe,KAAa;gBACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC7B,CAAC;;;WAJA;QAMD,sBAAI,gDAAiB;iBAArB;gBACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;YACnC,CAAC;iBAED,UAAsB,KAAa;gBAC/B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YACpC,CAAC;;;WAJA;QAMD,sBAAI,4CAAa;iBAAjB;gBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC/B,CAAC;iBAED,UAAkB,KAAa;gBAC3B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAChC,CAAC;;;WAJA;QAMD,sBAAI,4CAAa;iBAAjB;gBACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC/B,CAAC;iBAED,UAAkB,KAAa;gBAC3B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAChC,CAAC;;;WAJA;QAMD,sBAAI,yCAAU;iBAAd;gBACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;YAC5B,CAAC;iBAED,UAAe,KAAa;gBACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC7B,CAAC;;;WAJA;QAMD,sBAAI,uCAAQ;iBAAZ;gBACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC1B,CAAC;iBAED,UAAa,KAAa;gBACtB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YAC3B,CAAC;;;WAJA;QAMD,sBAAI,2CAAY;iBAAhB;gBACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;YAC9B,CAAC;iBAED,UAAiB,KAAU;gBACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC/B,CAAC;;;WAJA;QAMD,sBAAI,mCAAI;iBAAR;gBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACtB,CAAC;iBAED,UAAS,KAAa;gBAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,CAAC;;;WAJA;QAMD,sBAAI,qCAAM;iBAAV;gBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACxB,CAAC;iBAED,UAAW,KAAoB;gBAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACzB,CAAC;;;WAJA;QAMa,qCAAmB,GAAjC,UAAkC,cAAsB,EAAE,OAAe,EAAE,IAAY,EAAE,KAAa;YAClG,IAAI,MAAM,GAAsB,IAAI,iBAAiB,CAAC,yBAAW,CAAC,UAAU,EAAE,2BAAY,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YACnH,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,sEAAsE;YACtE,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEa,uCAAqB,GAAnC,UAAoC,QAAsB,EAAE,MAAc,EAAE,IAAS;YACjF,MAAM,CAAC,IAAI,iBAAiB,CAAC,yBAAW,CAAC,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAClF,CAAC;QAED;;;;WAIG;QACW,2CAAyB,GAAvC,UAAwC,IAAS;YAC7C,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,aAAa,IAAI,gCAAgC,CAAC;YACjG,IAAI,eAAe,GAAsB,IAAI,iBAAiB,CAAC,yBAAW,CAAC,UAAU,EAAE,2BAAY,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1I,eAAe,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YACnD,eAAe,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YACnD,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YAC7C,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YAC7C,eAAe,CAAC,iBAAiB,GAAG,SAAS,CAAC;YAC9C,eAAe,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YACnD,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACzC,eAAe,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YACjD,eAAe,CAAC,kBAAkB,EAAE,CAAC;YACrC,MAAM,CAAC,eAAe,CAAC;QAE3B,CAAC;QAEO,8CAAkB,GAA1B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,gCAAgC,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,MAAM,GAAG,6BAAa,CAAC,sBAAsB,CAAC;YAEvD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,kCAAkC,CAAC,CAAC,CAAC;gBACnE,IAAI,CAAC,MAAM,GAAG,6BAAa,CAAC,+BAA+B,CAAC;YAChE,CAAC;QACL,CAAC;QACL,wBAAC;IAAD,CAAC,AA3MD,IA2MC","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {TSErrorType} from './enums/TSErrorType';\nimport {TSErrorLevel} from './enums/TSErrorLevel';\nimport {TSErrorAction} from './enums/TSErrorAction';\n\nexport default class TSExceptionReport {\n\n    private _type: TSErrorType;\n    private _severity: TSErrorLevel;\n    private _msgKey: string;\n\n    //fields for ExceptionReport entity\n    private _exceptionName: string;\n    private _methodName: string;\n    private _translatedMessage: string;\n    private _customMessage: string;\n    private _errorCodeEnum: string;\n    private _stackTrace: string;\n    private _objectId: string;\n    private _argumentList: any;\n\n    // fields for ViolationReports\n    private _path: string;\n\n    private _action: TSErrorAction = undefined;\n\n    /**\n     *\n     * @param type Type of the Error\n     * @param severity Severity of the Error\n     * @param msgKey This is the message key of the error. can also be the message itself\n     * @param args\n     */\n    constructor(type: TSErrorType, severity: TSErrorLevel, msgKey: string, args: any) {\n        this._type = type || null;\n        this._severity = severity || null;\n        this._msgKey = msgKey || null;\n        this._argumentList = args || [];\n        this._action = undefined;\n    }\n\n    isConstantValue(constant: any, value: any) {\n        let keys = Object.keys(constant);\n        for (let i = 0; i < keys.length; i++) {\n            if (value === constant[keys[i]]) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isValid() {\n        let validType = this.isConstantValue(TSErrorType, this.type);\n        let validSeverity = this.isConstantValue(TSErrorLevel, this.severity);\n        let validMsgKey = typeof this.msgKey === 'string' && this.msgKey.length > 0;\n\n        return validType && validSeverity && validMsgKey;\n    };\n\n    isInternal() {\n        return this.type === TSErrorType.INTERNAL;\n    };\n\n    get type(): TSErrorType {\n        return this._type;\n    }\n\n    set type(value: TSErrorType) {\n        this._type = value;\n    }\n\n    get severity(): TSErrorLevel {\n        return this._severity;\n    }\n\n    set severity(value: TSErrorLevel) {\n        this._severity = value;\n    }\n\n    get msgKey(): string {\n        return this._msgKey;\n    }\n\n    set msgKey(value: string) {\n        this._msgKey = value;\n    }\n\n    get exceptionName(): string {\n        return this._exceptionName;\n    }\n\n    set exceptionName(value: string) {\n        this._exceptionName = value;\n    }\n\n    get methodName(): string {\n        return this._methodName;\n    }\n\n    set methodName(value: string) {\n        this._methodName = value;\n    }\n\n    get translatedMessage(): string {\n        return this._translatedMessage;\n    }\n\n    set translatedMessage(value: string) {\n        this._translatedMessage = value;\n    }\n\n    get customMessage(): string {\n        return this._customMessage;\n    }\n\n    set customMessage(value: string) {\n        this._customMessage = value;\n    }\n\n    get errorCodeEnum(): string {\n        return this._errorCodeEnum;\n    }\n\n    set errorCodeEnum(value: string) {\n        this._errorCodeEnum = value;\n    }\n\n    get stackTrace(): string {\n        return this._stackTrace;\n    }\n\n    set stackTrace(value: string) {\n        this._stackTrace = value;\n    }\n\n    get objectId(): string {\n        return this._objectId;\n    }\n\n    set objectId(value: string) {\n        this._objectId = value;\n    }\n\n    get argumentList(): any {\n        return this._argumentList;\n    }\n\n    set argumentList(value: any) {\n        this._argumentList = value;\n    }\n\n    get path(): string {\n        return this._path;\n    }\n\n    set path(value: string) {\n        this._path = value;\n    }\n\n    get action(): TSErrorAction {\n        return this._action;\n    }\n\n    set action(value: TSErrorAction) {\n        this._action = value;\n    }\n\n    public static createFromViolation(constraintType: string, message: string, path: string, value: string): TSExceptionReport {\n        let report: TSExceptionReport = new TSExceptionReport(TSErrorType.VALIDATION, TSErrorLevel.SEVERE, message, value);\n        report.path = path;\n        //hint: here we could also pass along the path to the Exception Report\n        return report;\n    }\n\n    public static createClientSideError(severity: TSErrorLevel, msgKey: string, args: any): TSExceptionReport {\n        return new TSExceptionReport(TSErrorType.CLIENT_SIDE, severity, msgKey, args);\n    }\n\n    /**\n     * takes a data Object that matches the fields of a EbeguExceptionReport and transforms them to a TSExceptionReport.\n     * @param data\n     * @returns {TSExceptionReport}\n     */\n    public static createFromExceptionReport(data: any) {\n        let msgToDisp = data.translatedMessage || data.customMessage || 'ERROR_UNEXPECTED_EBEGU_RUNTIME';\n        let exceptionReport: TSExceptionReport = new TSExceptionReport(TSErrorType.BADREQUEST, TSErrorLevel.SEVERE, msgToDisp, data.argumentList);\n        exceptionReport.errorCodeEnum = data.errorCodeEnum;\n        exceptionReport.exceptionName = data.exceptionName;\n        exceptionReport.methodName = data.methodName;\n        exceptionReport.stackTrace = data.stackTrace;\n        exceptionReport.translatedMessage = msgToDisp;\n        exceptionReport.customMessage = data.customMessage;\n        exceptionReport.objectId = data.objectId;\n        exceptionReport.argumentList = data.argumentList;\n        exceptionReport.addActionToMessage();\n        return exceptionReport;\n\n    }\n\n    private addActionToMessage(): void {\n        if (this.errorCodeEnum === 'ERROR_EXISTING_ONLINE_MUTATION') {\n            this.action = TSErrorAction.REMOVE_ONLINE_MUTATION;\n\n        } else if (this.errorCodeEnum === 'ERROR_EXISTING_ERNEUERUNGSGESUCH') {\n            this.action = TSErrorAction.REMOVE_ONLINE_ERNEUERUNGSGESUCH;\n        }\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/HttpErrorInterceptor.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/HttpErrorInterceptor.ts","mtime":1518612532790},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSErrorType_1 = require(\"../../../models/enums/TSErrorType\");\nvar TSErrorLevel_1 = require(\"../../../models/enums/TSErrorLevel\");\nvar TSExceptionReport_1 = require(\"../../../models/TSExceptionReport\");\nvar HttpErrorInterceptor = /** @class */ (function () {\n    /* @ngInject */\n    function HttpErrorInterceptor($rootScope, $q, errorService, $log) {\n        var _this = this;\n        this.$rootScope = $rootScope;\n        this.$q = $q;\n        this.errorService = errorService;\n        this.$log = $log;\n        this.responseError = function (response) {\n            if (response.status === 403) {\n                _this.errorService.addMesageAsError('ERROR_UNAUTHORIZED');\n                return _this.$q.reject(response);\n            }\n            //here we handle all errorcodes except 401 and 403, 401 is handeld in HttpAuthInterceptor\n            if (response.status !== 401) {\n                //here we could analyze the http status of the response. But instead we check if the  response has the format\n                // of a known response such as errortypes such as violationReport or ExceptionReport and transform it\n                //as such. If the response matches know expected format we create an unexpected error.\n                var errors = _this.handleErrorResponse(response);\n                _this.errorService.handleErrors(errors);\n                return _this.$q.reject(errors);\n            }\n            return _this.$q.reject(response);\n        };\n    }\n    /**\n     * Tries to determine what kind of response data the error-response retunred and  handles the data object\n     * of the response accordingly.\n     *\n     * The expected types are ViolationReport objects from JAXRS if there was a beanValidation error\n     * or EbeguExceptionReports in case there was some other application exception\n     *\n     * @param response\n     */\n    HttpErrorInterceptor.prototype.handleErrorResponse = function (response) {\n        var errors;\n        // Alle daten loggen um das Debuggen zu vereinfachen\n        // noinspection IfStatementWithTooManyBranchesJS\n        if (this.isDataViolationResponse(response.data)) {\n            errors = this.convertViolationReport(response.data);\n        }\n        else if (this.isDataEbeguExceptionReport(response.data)) {\n            errors = this.convertEbeguExceptionReport(response.data);\n        }\n        else if (this.isFileUploadException(response.data)) {\n            errors = [];\n            errors.push(new TSExceptionReport_1.default(TSErrorType_1.TSErrorType.INTERNAL, TSErrorLevel_1.TSErrorLevel.SEVERE, 'ERROR_FILE_TOO_LARGE', response.data));\n        }\n        else {\n            this.$log.error('ErrorStatus: \"' + response.status + '\" StatusText: \"' + response.statusText + '\"');\n            this.$log.error('ResponseData:' + JSON.stringify(response.data));\n            //the error objects is neither a ViolationReport nor a ExceptionReport. Create a generic error msg\n            errors = [];\n            errors.push(new TSExceptionReport_1.default(TSErrorType_1.TSErrorType.INTERNAL, TSErrorLevel_1.TSErrorLevel.SEVERE, 'ERROR_UNEXPECTED', response.data));\n        }\n        return errors;\n    };\n    HttpErrorInterceptor.prototype.convertViolationReport = function (data) {\n        var aggregatedExceptionReports = [];\n        return aggregatedExceptionReports.concat(this.convertToExceptionReport(data.parameterViolations))\n            .concat(this.convertToExceptionReport(data.classViolations))\n            .concat(this.convertToExceptionReport(data.fieldViolations))\n            .concat(this.convertToExceptionReport(data.propertyViolations))\n            .concat(this.convertToExceptionReport(data.returnValueViolations));\n    };\n    HttpErrorInterceptor.prototype.convertToExceptionReport = function (violations) {\n        var exceptionReports = [];\n        if (violations) {\n            for (var _i = 0, violations_1 = violations; _i < violations_1.length; _i++) {\n                var violationEntry = violations_1[_i];\n                var constraintType = violationEntry.constraintType;\n                var message = violationEntry.message;\n                var path = violationEntry.path;\n                var value = violationEntry.value;\n                var report = TSExceptionReport_1.default.createFromViolation(constraintType, message, path, value);\n                exceptionReports.push(report);\n            }\n        }\n        return exceptionReports;\n    };\n    HttpErrorInterceptor.prototype.convertEbeguExceptionReport = function (data) {\n        var exceptionReport = TSExceptionReport_1.default.createFromExceptionReport(data);\n        var exceptionReports = [];\n        exceptionReports.push(exceptionReport);\n        return exceptionReports;\n    };\n    /**\n     *\n     * checks if response data json-object has the keys required to be a violationReport (from jaxRS)\n     * @param data object whose keys are checked\n     * @returns {boolean} true if fields of violationReport are present\n     */\n    HttpErrorInterceptor.prototype.isDataViolationResponse = function (data) {\n        //hier pruefen wir ob wir die Felder von org.jboss.resteasy.api.validation.ViolationReport.ViolationReport() bekommen\n        if (data !== null && data !== undefined) {\n            var hasParamViol = data.hasOwnProperty('parameterViolations');\n            var hasClassViol = data.hasOwnProperty('classViolations');\n            var hasfieldViol = data.hasOwnProperty('fieldViolations');\n            var hasPropViol = data.hasOwnProperty('propertyViolations');\n            var hasRetViol = data.hasOwnProperty('returnValueViolations');\n            return hasParamViol && hasClassViol && hasfieldViol && hasPropViol && hasRetViol;\n        }\n        return false;\n    };\n    HttpErrorInterceptor.prototype.isDataEbeguExceptionReport = function (data) {\n        if (data !== null && data !== undefined) {\n            var hassErrorCodeEnum = data.hasOwnProperty('errorCodeEnum');\n            var hasExceptionName = data.hasOwnProperty('exceptionName');\n            var hasMethodName = data.hasOwnProperty('methodName');\n            var hasStackTrace = data.hasOwnProperty('stackTrace');\n            var hasTranslatedMessage = data.hasOwnProperty('translatedMessage');\n            var hasCustomMessage = data.hasOwnProperty('customMessage');\n            var hasArgumentList = data.hasOwnProperty('argumentList');\n            return hassErrorCodeEnum && hasExceptionName && hasMethodName && hasStackTrace\n                && hasTranslatedMessage && hasCustomMessage && hasArgumentList;\n        }\n        return false;\n    };\n    HttpErrorInterceptor.prototype.isFileUploadException = function (response) {\n        if (!response) {\n            return false;\n        }\n        return response.indexOf('java.io.IOException: UT000020: Connection terminated as request was larger than ') > -1;\n    };\n    HttpErrorInterceptor.$inject = ['$rootScope', '$q', 'ErrorService', '$log'];\n    return HttpErrorInterceptor;\n}());\nexports.default = HttpErrorInterceptor;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/HttpErrorInterceptor.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/errors/service/HttpErrorInterceptor.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport ErrorService from './ErrorService';\nimport {TSErrorType} from '../../../models/enums/TSErrorType';\nimport {TSErrorLevel} from '../../../models/enums/TSErrorLevel';\nimport TSExceptionReport from '../../../models/TSExceptionReport';\nimport IQService = angular.IQService;\nimport IRootScopeService = angular.IRootScopeService;\nimport IHttpInterceptor = angular.IHttpInterceptor;\nimport ILogService = angular.ILogService;\n\nexport default class HttpErrorInterceptor implements IHttpInterceptor {\n\n    static $inject = ['$rootScope', '$q', 'ErrorService', '$log'];\n\n    /* @ngInject */\n    constructor(private $rootScope: IRootScopeService, private $q: IQService, private errorService: ErrorService,\n                private $log: ILogService) {\n    }\n\n\n    public responseError = (response: any) => {\n        if (response.status === 403) {\n            this.errorService.addMesageAsError('ERROR_UNAUTHORIZED');\n            return this.$q.reject(response);\n        }\n        //here we handle all errorcodes except 401 and 403, 401 is handeld in HttpAuthInterceptor\n        if (response.status !== 401) {\n            //here we could analyze the http status of the response. But instead we check if the  response has the format\n            // of a known response such as errortypes such as violationReport or ExceptionReport and transform it\n            //as such. If the response matches know expected format we create an unexpected error.\n            let errors: Array<TSExceptionReport> = this.handleErrorResponse(response);\n            this.errorService.handleErrors(errors);\n            return this.$q.reject(errors);\n        }\n        return this.$q.reject(response);\n    }\n\n    /**\n     * Tries to determine what kind of response data the error-response retunred and  handles the data object\n     * of the response accordingly.\n     *\n     * The expected types are ViolationReport objects from JAXRS if there was a beanValidation error\n     * or EbeguExceptionReports in case there was some other application exception\n     *\n     * @param response\n     */\n    private handleErrorResponse(response: any) {\n        let errors: Array<TSExceptionReport>;\n        // Alle daten loggen um das Debuggen zu vereinfachen\n        // noinspection IfStatementWithTooManyBranchesJS\n        if (this.isDataViolationResponse(response.data)) {\n            errors = this.convertViolationReport(response.data);\n\n        } else if (this.isDataEbeguExceptionReport(response.data)) {\n            errors = this.convertEbeguExceptionReport(response.data);\n        } else if (this.isFileUploadException(response.data)) {\n            errors = [];\n            errors.push(new TSExceptionReport(TSErrorType.INTERNAL, TSErrorLevel.SEVERE, 'ERROR_FILE_TOO_LARGE', response.data));\n        } else {\n            this.$log.error('ErrorStatus: \"' + response.status + '\" StatusText: \"' + response.statusText + '\"');\n            this.$log.error('ResponseData:' + JSON.stringify(response.data));\n            //the error objects is neither a ViolationReport nor a ExceptionReport. Create a generic error msg\n            errors = [];\n            errors.push(new TSExceptionReport(TSErrorType.INTERNAL, TSErrorLevel.SEVERE, 'ERROR_UNEXPECTED', response.data));\n        }\n        return errors;\n    }\n\n    private convertViolationReport(data: any): Array<TSExceptionReport> {\n        let aggregatedExceptionReports: Array<TSExceptionReport> = [];\n        return aggregatedExceptionReports.concat(this.convertToExceptionReport(data.parameterViolations))\n            .concat(this.convertToExceptionReport(data.classViolations))\n            .concat(this.convertToExceptionReport(data.fieldViolations))\n            .concat(this.convertToExceptionReport(data.propertyViolations))\n            .concat(this.convertToExceptionReport(data.returnValueViolations));\n\n    }\n\n    private convertToExceptionReport(violations: any): Array<TSExceptionReport> {\n        let exceptionReports: Array<TSExceptionReport> = [];\n        if (violations) {\n            for (let violationEntry of violations) {\n                let constraintType: string = violationEntry.constraintType;\n                let message: string = violationEntry.message;\n                let path: string = violationEntry.path;\n                let value: string = violationEntry.value;\n                let report: TSExceptionReport = TSExceptionReport.createFromViolation(constraintType, message, path, value);\n                exceptionReports.push(report);\n            }\n        }\n        return exceptionReports;\n\n    }\n\n    private convertEbeguExceptionReport(data: any) {\n        let exceptionReport: TSExceptionReport = TSExceptionReport.createFromExceptionReport(data);\n        let exceptionReports: Array<TSExceptionReport> = [];\n        exceptionReports.push(exceptionReport);\n        return exceptionReports;\n\n    }\n\n    /**\n     *\n     * checks if response data json-object has the keys required to be a violationReport (from jaxRS)\n     * @param data object whose keys are checked\n     * @returns {boolean} true if fields of violationReport are present\n     */\n    private isDataViolationResponse(data: any): boolean {\n        //hier pruefen wir ob wir die Felder von org.jboss.resteasy.api.validation.ViolationReport.ViolationReport() bekommen\n        if (data !== null && data !== undefined) {\n            let hasParamViol: boolean = data.hasOwnProperty('parameterViolations');\n            let hasClassViol: boolean = data.hasOwnProperty('classViolations');\n            let hasfieldViol: boolean = data.hasOwnProperty('fieldViolations');\n            let hasPropViol: boolean = data.hasOwnProperty('propertyViolations');\n            let hasRetViol: boolean = data.hasOwnProperty('returnValueViolations');\n            return hasParamViol && hasClassViol && hasfieldViol && hasPropViol && hasRetViol;\n        }\n        return false;\n\n    }\n\n    private isDataEbeguExceptionReport(data: any): boolean {\n        if (data !== null && data !== undefined) {\n            let hassErrorCodeEnum: boolean = data.hasOwnProperty('errorCodeEnum');\n            let hasExceptionName: boolean = data.hasOwnProperty('exceptionName');\n            let hasMethodName: boolean = data.hasOwnProperty('methodName');\n            let hasStackTrace: boolean = data.hasOwnProperty('stackTrace');\n            let hasTranslatedMessage: boolean = data.hasOwnProperty('translatedMessage');\n            let hasCustomMessage: boolean = data.hasOwnProperty('customMessage');\n            let hasArgumentList: boolean = data.hasOwnProperty('argumentList');\n            return hassErrorCodeEnum && hasExceptionName && hasMethodName && hasStackTrace\n                && hasTranslatedMessage && hasCustomMessage && hasArgumentList;\n        }\n        return false;\n\n    }\n\n    private isFileUploadException(response: String) {\n        if (!response) {\n            return false;\n        }\n\n        return response.indexOf('java.io.IOException: UT000020: Connection terminated as request was larger than ') > -1;\n    }\n}\n"]}]}
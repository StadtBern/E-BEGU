{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/umzugView/umzugView.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/umzugView/umzugView.ts","mtime":1512484412019},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar abstractGesuchView_1 = require(\"../abstractGesuchView\");\nvar TSWizardStepName_1 = require(\"../../../models/enums/TSWizardStepName\");\nvar TSWizardStepStatus_1 = require(\"../../../models/enums/TSWizardStepStatus\");\nvar TSBetroffene_1 = require(\"../../../models/enums/TSBetroffene\");\nvar TSAdresse_1 = require(\"../../../models/TSAdresse\");\nvar TSAdressetyp_1 = require(\"../../../models/enums/TSAdressetyp\");\nvar TSUmzugAdresse_1 = require(\"../../../models/TSUmzugAdresse\");\nvar RemoveDialogController_1 = require(\"../../dialog/RemoveDialogController\");\nvar TSAdresseContainer_1 = require(\"../../../models/TSAdresseContainer\");\nvar EbeguUtil_1 = require(\"../../../utils/EbeguUtil\");\nvar template = require('./umzugView.html');\nrequire('./umzugView.less');\nvar removeDialogTemplate = require('../../dialog/removeDialogTemplate.html');\nvar UmzugViewComponentConfig = /** @class */ (function () {\n    function UmzugViewComponentConfig() {\n        this.transclude = false;\n        this.bindings = {};\n        this.template = template;\n        this.controller = UmzugViewController;\n        this.controllerAs = 'vm';\n    }\n    return UmzugViewComponentConfig;\n}());\nexports.UmzugViewComponentConfig = UmzugViewComponentConfig;\nvar UmzugViewController = /** @class */ (function (_super) {\n    __extends(UmzugViewController, _super);\n    /* @ngInject */\n    function UmzugViewController(gesuchModelManager, berechnungsManager, wizardStepManager, errorService, $translate, DvDialog, $q, $scope, $timeout) {\n        var _this = _super.call(this, gesuchModelManager, berechnungsManager, wizardStepManager, $scope, TSWizardStepName_1.TSWizardStepName.UMZUG, $timeout) || this;\n        _this.errorService = errorService;\n        _this.$translate = $translate;\n        _this.DvDialog = DvDialog;\n        _this.$q = $q;\n        _this.dirty = false;\n        _this.initViewModel();\n        return _this;\n    }\n    UmzugViewController.prototype.initViewModel = function () {\n        this.model = [];\n        this.wizardStepManager.updateCurrentWizardStepStatus(TSWizardStepStatus_1.TSWizardStepStatus.OK);\n        this.extractAdressenListFromBothGS();\n    };\n    UmzugViewController.prototype.getUmzugAdressenList = function () {\n        return this.model;\n    };\n    UmzugViewController.prototype.save = function () {\n        var _this = this;\n        if (this.isGesuchValid()) {\n            if (!this.form.$dirty && !this.dirty) {\n                // If there are no changes in form we don't need anything to update on Server and we could return the\n                // promise immediately\n                return this.$q.when(this.gesuchModelManager.getStammdatenToWorkWith());\n            }\n            this.errorService.clearAll();\n            this.saveAdresseInGS();\n            this.gesuchModelManager.setGesuchstellerNumber(1);\n            return this.gesuchModelManager.updateGesuchsteller(true).then(function (response) {\n                if (_this.gesuchModelManager.getGesuch().gesuchsteller2) {\n                    _this.gesuchModelManager.setGesuchstellerNumber(2);\n                    return _this.gesuchModelManager.updateGesuchsteller(true);\n                }\n                return _this.gesuchModelManager.getStammdatenToWorkWith();\n            });\n        }\n        return undefined;\n    };\n    /**\n     * Hier schauen wir wie viele GS es gibt und dementsprechen fuellen wir die Liste aus.\n     * Bei Mutationen wird es nur geschaut ob der GS existiert (!=null), da die Familiensituation nicht relevant ist.\n     * Es koennte einen GS2 geben obwohl die neue Familiensituation \"ledig\" sagt\n     */\n    UmzugViewController.prototype.getBetroffenenList = function () {\n        var betroffenenList = [];\n        if (this.gesuchModelManager.getGesuch()) {\n            if (this.gesuchModelManager.getGesuch().gesuchsteller1) {\n                betroffenenList.push(TSBetroffene_1.TSBetroffene.GESUCHSTELLER_1);\n            }\n            if (this.gesuchModelManager.getGesuch().gesuchsteller2) {\n                betroffenenList.push(TSBetroffene_1.TSBetroffene.GESUCHSTELLER_2);\n            }\n            if (this.gesuchModelManager.getGesuch().gesuchsteller2 && this.gesuchModelManager.getGesuch().gesuchsteller1) {\n                // Dies koennte auch direkt beim Push des GS2 gemacht werden, da es keinen GS2 geben darf wenn es\n                // keinen GS1 gibt. Allerdings sind wir mit diesem IF sicher dass GS1 und GS2 wirklich existieren.\n                betroffenenList.push(TSBetroffene_1.TSBetroffene.BEIDE_GESUCHSTELLER);\n            }\n        }\n        return betroffenenList; // empty list wenn die Daten nicht richtig sind\n    };\n    UmzugViewController.prototype.getNameFromBetroffene = function (betroffene) {\n        if (TSBetroffene_1.TSBetroffene.GESUCHSTELLER_1 === betroffene && this.gesuchModelManager.getGesuch().gesuchsteller1) {\n            return this.gesuchModelManager.getGesuch().gesuchsteller1.extractFullName();\n        }\n        else if (TSBetroffene_1.TSBetroffene.GESUCHSTELLER_2 === betroffene && this.gesuchModelManager.getGesuch().gesuchsteller2) {\n            return this.gesuchModelManager.getGesuch().gesuchsteller2.extractFullName();\n        }\n        else if (TSBetroffene_1.TSBetroffene.BEIDE_GESUCHSTELLER === betroffene) {\n            return this.$translate.instant(TSBetroffene_1.TSBetroffene[betroffene]);\n        }\n        return '';\n    };\n    UmzugViewController.prototype.extractAdressenListFromBothGS = function () {\n        this.getAdressenListFromGS1();\n        this.getAdressenListFromGS2();\n    };\n    UmzugViewController.prototype.getAdressenListFromGS1 = function () {\n        var _this = this;\n        if (this.gesuchModelManager.getGesuch() && this.gesuchModelManager.getGesuch().gesuchsteller1) {\n            this.gesuchModelManager.getGesuch().gesuchsteller1.getUmzugAdressen().forEach(function (umzugAdresse) {\n                umzugAdresse.showDatumVon = true; // wird benoetigt weil es vom Server nicht kommt\n                _this.model.push(new TSUmzugAdresse_1.default(TSBetroffene_1.TSBetroffene.GESUCHSTELLER_1, umzugAdresse));\n            });\n        }\n    };\n    /**\n     * Geht durch die Adressenliste des GS2 durch. Wenn eine Adresse von GS2\n     */\n    UmzugViewController.prototype.getAdressenListFromGS2 = function () {\n        var _this = this;\n        if (this.gesuchModelManager.getGesuch() && this.gesuchModelManager.getGesuch().gesuchsteller2) {\n            this.gesuchModelManager.getGesuch().gesuchsteller2.getUmzugAdressen().forEach(function (umzugAdresse) {\n                umzugAdresse.showDatumVon = true; // wird benoetigt weil es vom Server nicht kommt\n                var foundPosition = -1;\n                for (var i = 0; i < _this.model.length; i++) {\n                    if (_this.model[i].adresse.isSameWohnAdresse(umzugAdresse)) {\n                        foundPosition = i;\n                    }\n                }\n                if (foundPosition >= 0) {\n                    _this.model[foundPosition].betroffene = TSBetroffene_1.TSBetroffene.BEIDE_GESUCHSTELLER;\n                    // speichern der AdressContainer vom Gs2 damit wir sie sp√§ter wieder finden\n                    _this.model[foundPosition].adresseGS2 = umzugAdresse;\n                }\n                else {\n                    _this.model.push(new TSUmzugAdresse_1.default(TSBetroffene_1.TSBetroffene.GESUCHSTELLER_2, umzugAdresse));\n                }\n            });\n        }\n    };\n    UmzugViewController.prototype.removeUmzugAdresse = function (adresse) {\n        var _this = this;\n        var remTitleText = this.$translate.instant('UMZUG_LOESCHEN');\n        this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController_1.RemoveDialogController, {\n            title: remTitleText,\n            deleteText: '',\n            parentController: undefined,\n            elementID: undefined\n        }).then(function () {\n            _this.dirty = true;\n            var indexOf = _this.model.lastIndexOf(adresse);\n            if (indexOf >= 0) {\n                _this.model.splice(indexOf, 1);\n            }\n            _this.$timeout(function () { return EbeguUtil_1.default.selectFirst(); }, 100);\n        });\n    };\n    /**\n     * Erstellt eine neue leere Adresse vom Typ WOHNADRESSE\n     */\n    UmzugViewController.prototype.createUmzugAdresse = function () {\n        var adresseContainer = this.createAdressContainer();\n        var umzugAdresse = new TSUmzugAdresse_1.default(undefined, adresseContainer);\n        this.model.push(umzugAdresse);\n        this.dirty = true;\n        this.$postLink();\n        //todo focus on specific id, so the newly added umzug will be selected not the first in the DOM\n    };\n    UmzugViewController.prototype.createAdressContainer = function () {\n        var adresseContainer = new TSAdresseContainer_1.default();\n        var adresse = new TSAdresse_1.default();\n        adresse.adresseTyp = TSAdressetyp_1.TSAdressetyp.WOHNADRESSE;\n        adresseContainer.showDatumVon = true;\n        adresseContainer.adresseJA = adresse;\n        return adresseContainer;\n    };\n    /**\n     * Zuerst entfernt alle Elemente der Arrays von adressen vom GS1 und GS2, ausser dem ersten Element (Wohnadresse).\n     * Danach fuellt diese mit den Adressen die hier geblieben sind bzw. nicht entfernt wurden, dafuer\n     * nimmt es aus der Liste von umzugAdressen alle eingegebenen Adressen und speichert sie in dem entsprechenden GS\n     */\n    UmzugViewController.prototype.saveAdresseInGS = function () {\n        var _this = this;\n        if (this.gesuchModelManager.getGesuch().gesuchsteller1 && this.gesuchModelManager.getGesuch().gesuchsteller1.adressen\n            && this.gesuchModelManager.getGesuch().gesuchsteller1.adressen.length > 0) {\n            this.gesuchModelManager.getGesuch().gesuchsteller1.adressen.length = 1;\n        }\n        if (this.gesuchModelManager.getGesuch().gesuchsteller2 && this.gesuchModelManager.getGesuch().gesuchsteller2.adressen\n            && this.gesuchModelManager.getGesuch().gesuchsteller2.adressen.length > 0) {\n            this.gesuchModelManager.getGesuch().gesuchsteller2.adressen.length = 1;\n        }\n        this.model.forEach(function (umzugAdresse) {\n            if (TSBetroffene_1.TSBetroffene.GESUCHSTELLER_1 === umzugAdresse.betroffene) {\n                _this.addAdresseToGS(_this.gesuchModelManager.getGesuch().gesuchsteller1, umzugAdresse.adresse);\n            }\n            else if (TSBetroffene_1.TSBetroffene.GESUCHSTELLER_2 === umzugAdresse.betroffene) {\n                _this.addAdresseToGS(_this.gesuchModelManager.getGesuch().gesuchsteller2, umzugAdresse.adresse);\n            }\n            else if (TSBetroffene_1.TSBetroffene.BEIDE_GESUCHSTELLER === umzugAdresse.betroffene) {\n                _this.addAdresseToGS(_this.gesuchModelManager.getGesuch().gesuchsteller1, umzugAdresse.adresse);\n                if (!umzugAdresse.adresseGS2) {\n                    umzugAdresse.adresseGS2 = _this.createAdressContainer();\n                }\n                umzugAdresse.adresseGS2.adresseJA.copy(umzugAdresse.adresse.adresseJA);\n                _this.addAdresseToGS(_this.gesuchModelManager.getGesuch().gesuchsteller2, umzugAdresse.adresseGS2);\n            }\n        });\n    };\n    UmzugViewController.prototype.addAdresseToGS = function (gesuchsteller, adresse) {\n        if (gesuchsteller) {\n            if (gesuchsteller.adressen.indexOf(adresse) < 0) {\n                gesuchsteller.addAdresse(adresse);\n            }\n            else {\n                //update old adresse\n            }\n        }\n    };\n    UmzugViewController.prototype.getPreviousButtonText = function () {\n        if (this.getUmzugAdressenList().length === 0) {\n            return 'ZURUECK_ONLY_UPPER';\n        }\n        return 'ZURUECK_UPPER';\n    };\n    UmzugViewController.prototype.getNextButtonText = function () {\n        if (this.getUmzugAdressenList().length === 0) {\n            return 'WEITER_ONLY_UPPER';\n        }\n        return 'WEITER_UPPER';\n    };\n    UmzugViewController.$inject = ['GesuchModelManager', 'BerechnungsManager', 'WizardStepManager', 'ErrorService', '$translate',\n        'DvDialog', '$q', '$scope', '$timeout'];\n    return UmzugViewController;\n}(abstractGesuchView_1.default));\nexports.UmzugViewController = UmzugViewController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/umzugView/umzugView.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/umzugView/umzugView.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport AbstractGesuchViewController from '../abstractGesuchView';\nimport {IComponentOptions, IPromise} from 'angular';\nimport GesuchModelManager from '../../service/gesuchModelManager';\nimport BerechnungsManager from '../../service/berechnungsManager';\nimport ErrorService from '../../../core/errors/service/ErrorService';\nimport WizardStepManager from '../../service/wizardStepManager';\nimport {TSWizardStepName} from '../../../models/enums/TSWizardStepName';\nimport {TSWizardStepStatus} from '../../../models/enums/TSWizardStepStatus';\nimport {TSBetroffene} from '../../../models/enums/TSBetroffene';\nimport TSAdresse from '../../../models/TSAdresse';\nimport {TSAdressetyp} from '../../../models/enums/TSAdressetyp';\nimport TSUmzugAdresse from '../../../models/TSUmzugAdresse';\nimport {DvDialog} from '../../../core/directive/dv-dialog/dv-dialog';\nimport {RemoveDialogController} from '../../dialog/RemoveDialogController';\nimport TSGesuchstellerContainer from '../../../models/TSGesuchstellerContainer';\nimport TSAdresseContainer from '../../../models/TSAdresseContainer';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport ITranslateService = angular.translate.ITranslateService;\nimport ITimeoutService = angular.ITimeoutService;\nimport IQService = angular.IQService;\nimport IScope = angular.IScope;\n\nlet template = require('./umzugView.html');\nrequire('./umzugView.less');\nlet removeDialogTemplate = require('../../dialog/removeDialogTemplate.html');\n\nexport class UmzugViewComponentConfig implements IComponentOptions {\n    transclude = false;\n    bindings: any = {};\n    template = template;\n    controller = UmzugViewController;\n    controllerAs = 'vm';\n}\n\nexport class UmzugViewController extends AbstractGesuchViewController<Array<TSUmzugAdresse>> {\n\n    dirty = false;\n\n    static $inject = ['GesuchModelManager', 'BerechnungsManager', 'WizardStepManager', 'ErrorService', '$translate',\n        'DvDialog', '$q', '$scope', '$timeout'];\n\n    /* @ngInject */\n    constructor(gesuchModelManager: GesuchModelManager, berechnungsManager: BerechnungsManager,\n                wizardStepManager: WizardStepManager, private errorService: ErrorService,\n                private $translate: ITranslateService, private DvDialog: DvDialog, private $q: IQService,\n                $scope: IScope, $timeout: ITimeoutService) {\n\n        super(gesuchModelManager, berechnungsManager, wizardStepManager, $scope, TSWizardStepName.UMZUG, $timeout);\n        this.initViewModel();\n    }\n\n    private initViewModel(): void {\n        this.model = [];\n        this.wizardStepManager.updateCurrentWizardStepStatus(TSWizardStepStatus.OK);\n        this.extractAdressenListFromBothGS();\n    }\n\n    public getUmzugAdressenList(): Array<TSUmzugAdresse> {\n        return this.model;\n    }\n\n    public save(): IPromise<TSGesuchstellerContainer> {\n        if (this.isGesuchValid()) {\n            if (!this.form.$dirty && !this.dirty) {\n                // If there are no changes in form we don't need anything to update on Server and we could return the\n                // promise immediately\n                return this.$q.when(this.gesuchModelManager.getStammdatenToWorkWith());\n            }\n\n            this.errorService.clearAll();\n            this.saveAdresseInGS();\n            this.gesuchModelManager.setGesuchstellerNumber(1);\n            return this.gesuchModelManager.updateGesuchsteller(true).then((response) => {\n                if (this.gesuchModelManager.getGesuch().gesuchsteller2) {\n                    this.gesuchModelManager.setGesuchstellerNumber(2);\n                    return this.gesuchModelManager.updateGesuchsteller(true);\n                }\n                return this.gesuchModelManager.getStammdatenToWorkWith();\n            });\n        }\n        return undefined;\n    }\n\n    /**\n     * Hier schauen wir wie viele GS es gibt und dementsprechen fuellen wir die Liste aus.\n     * Bei Mutationen wird es nur geschaut ob der GS existiert (!=null), da die Familiensituation nicht relevant ist.\n     * Es koennte einen GS2 geben obwohl die neue Familiensituation \"ledig\" sagt\n     */\n    public getBetroffenenList(): Array<TSBetroffene> {\n        let betroffenenList: Array<TSBetroffene> = [];\n        if (this.gesuchModelManager.getGesuch()) {\n            if (this.gesuchModelManager.getGesuch().gesuchsteller1) {\n                betroffenenList.push(TSBetroffene.GESUCHSTELLER_1);\n            }\n            if (this.gesuchModelManager.getGesuch().gesuchsteller2) {\n                betroffenenList.push(TSBetroffene.GESUCHSTELLER_2);\n            }\n            if (this.gesuchModelManager.getGesuch().gesuchsteller2 && this.gesuchModelManager.getGesuch().gesuchsteller1) {\n                // Dies koennte auch direkt beim Push des GS2 gemacht werden, da es keinen GS2 geben darf wenn es\n                // keinen GS1 gibt. Allerdings sind wir mit diesem IF sicher dass GS1 und GS2 wirklich existieren.\n                betroffenenList.push(TSBetroffene.BEIDE_GESUCHSTELLER);\n            }\n        }\n        return betroffenenList; // empty list wenn die Daten nicht richtig sind\n    }\n\n    public getNameFromBetroffene(betroffene: TSBetroffene): string {\n        if (TSBetroffene.GESUCHSTELLER_1 === betroffene && this.gesuchModelManager.getGesuch().gesuchsteller1) {\n            return this.gesuchModelManager.getGesuch().gesuchsteller1.extractFullName();\n\n        } else if (TSBetroffene.GESUCHSTELLER_2 === betroffene && this.gesuchModelManager.getGesuch().gesuchsteller2) {\n            return this.gesuchModelManager.getGesuch().gesuchsteller2.extractFullName();\n\n        } else if (TSBetroffene.BEIDE_GESUCHSTELLER === betroffene) {\n            return this.$translate.instant(TSBetroffene[betroffene]);\n        }\n\n        return '';\n    }\n\n    private extractAdressenListFromBothGS() {\n        this.getAdressenListFromGS1();\n        this.getAdressenListFromGS2();\n    }\n\n    private getAdressenListFromGS1(): void {\n        if (this.gesuchModelManager.getGesuch() && this.gesuchModelManager.getGesuch().gesuchsteller1) {\n            this.gesuchModelManager.getGesuch().gesuchsteller1.getUmzugAdressen().forEach(umzugAdresse => {\n                umzugAdresse.showDatumVon = true; // wird benoetigt weil es vom Server nicht kommt\n                this.model.push(new TSUmzugAdresse(TSBetroffene.GESUCHSTELLER_1, umzugAdresse));\n            });\n        }\n    }\n\n    /**\n     * Geht durch die Adressenliste des GS2 durch. Wenn eine Adresse von GS2\n     */\n    private getAdressenListFromGS2(): void {\n        if (this.gesuchModelManager.getGesuch() && this.gesuchModelManager.getGesuch().gesuchsteller2) {\n            this.gesuchModelManager.getGesuch().gesuchsteller2.getUmzugAdressen().forEach(umzugAdresse => {\n                umzugAdresse.showDatumVon = true; // wird benoetigt weil es vom Server nicht kommt\n                let foundPosition: number = -1;\n                for (let i = 0; i < this.model.length; i++) {\n                    if (this.model[i].adresse.isSameWohnAdresse(umzugAdresse)) {\n                        foundPosition = i;\n                    }\n                }\n                if (foundPosition >= 0) {\n                    this.model[foundPosition].betroffene = TSBetroffene.BEIDE_GESUCHSTELLER;\n\n                    // speichern der AdressContainer vom Gs2 damit wir sie sp√§ter wieder finden\n                    this.model[foundPosition].adresseGS2 = umzugAdresse;\n                } else {\n                    this.model.push(new TSUmzugAdresse(TSBetroffene.GESUCHSTELLER_2, umzugAdresse));\n                }\n            });\n        }\n    }\n\n    public removeUmzugAdresse(adresse: TSUmzugAdresse): void {\n        let remTitleText = this.$translate.instant('UMZUG_LOESCHEN');\n        this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController, {\n            title: remTitleText,\n            deleteText: '',\n            parentController: undefined,\n            elementID: undefined\n        }).then(() => {   //User confirmed removal\n            this.dirty = true;\n            let indexOf = this.model.lastIndexOf(adresse);\n            if (indexOf >= 0) {\n                this.model.splice(indexOf, 1);\n            }\n            this.$timeout(() => EbeguUtil.selectFirst(), 100);\n        });\n    }\n\n    /**\n     * Erstellt eine neue leere Adresse vom Typ WOHNADRESSE\n     */\n    public createUmzugAdresse(): void {\n        let adresseContainer = this.createAdressContainer();\n        let umzugAdresse: TSUmzugAdresse = new TSUmzugAdresse(undefined, adresseContainer);\n\n        this.model.push(umzugAdresse);\n        this.dirty = true;\n        this.$postLink();\n        //todo focus on specific id, so the newly added umzug will be selected not the first in the DOM\n    }\n\n    private createAdressContainer() {\n        let adresseContainer: TSAdresseContainer = new TSAdresseContainer();\n        let adresse: TSAdresse = new TSAdresse();\n        adresse.adresseTyp = TSAdressetyp.WOHNADRESSE;\n        adresseContainer.showDatumVon = true;\n        adresseContainer.adresseJA = adresse;\n        return adresseContainer;\n    }\n\n    /**\n     * Zuerst entfernt alle Elemente der Arrays von adressen vom GS1 und GS2, ausser dem ersten Element (Wohnadresse).\n     * Danach fuellt diese mit den Adressen die hier geblieben sind bzw. nicht entfernt wurden, dafuer\n     * nimmt es aus der Liste von umzugAdressen alle eingegebenen Adressen und speichert sie in dem entsprechenden GS\n     */\n    private saveAdresseInGS(): void {\n        if (this.gesuchModelManager.getGesuch().gesuchsteller1 && this.gesuchModelManager.getGesuch().gesuchsteller1.adressen\n            && this.gesuchModelManager.getGesuch().gesuchsteller1.adressen.length > 0) {\n            this.gesuchModelManager.getGesuch().gesuchsteller1.adressen.length = 1;\n        }\n        if (this.gesuchModelManager.getGesuch().gesuchsteller2 && this.gesuchModelManager.getGesuch().gesuchsteller2.adressen\n            && this.gesuchModelManager.getGesuch().gesuchsteller2.adressen.length > 0) {\n            this.gesuchModelManager.getGesuch().gesuchsteller2.adressen.length = 1;\n        }\n        this.model.forEach(umzugAdresse => {\n\n            if (TSBetroffene.GESUCHSTELLER_1 === umzugAdresse.betroffene) {\n                this.addAdresseToGS(this.gesuchModelManager.getGesuch().gesuchsteller1, umzugAdresse.adresse);\n\n            } else if (TSBetroffene.GESUCHSTELLER_2 === umzugAdresse.betroffene) {\n                this.addAdresseToGS(this.gesuchModelManager.getGesuch().gesuchsteller2, umzugAdresse.adresse);\n\n            } else if (TSBetroffene.BEIDE_GESUCHSTELLER === umzugAdresse.betroffene) {\n                this.addAdresseToGS(this.gesuchModelManager.getGesuch().gesuchsteller1, umzugAdresse.adresse);\n\n                if (!umzugAdresse.adresseGS2) {\n                    umzugAdresse.adresseGS2 = this.createAdressContainer();\n                }\n                umzugAdresse.adresseGS2.adresseJA.copy(umzugAdresse.adresse.adresseJA);\n                this.addAdresseToGS(this.gesuchModelManager.getGesuch().gesuchsteller2, umzugAdresse.adresseGS2);\n            }\n        });\n    }\n\n    private addAdresseToGS(gesuchsteller: TSGesuchstellerContainer, adresse: TSAdresseContainer) {\n        if (gesuchsteller) {\n            if (gesuchsteller.adressen.indexOf(adresse) < 0) {\n                gesuchsteller.addAdresse(adresse);\n            } else {\n                //update old adresse\n            }\n        }\n    }\n\n    public getPreviousButtonText(): string {\n        if (this.getUmzugAdressenList().length === 0) {\n            return 'ZURUECK_ONLY_UPPER';\n        }\n        return 'ZURUECK_UPPER';\n    }\n\n    public getNextButtonText(): string {\n        if (this.getUmzugAdressenList().length === 0) {\n            return 'WEITER_ONLY_UPPER';\n        }\n        return 'WEITER_UPPER';\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/service/ewkRS.rest.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/ewkRS.rest.ts","mtime":1512484412007},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSEWKResultat_1 = require(\"../../models/TSEWKResultat\");\nvar DateUtil_1 = require(\"../../utils/DateUtil\");\nvar EwkRS = /** @class */ (function () {\n    /* @ngInject */\n    function EwkRS($http, $httpParamSerializer, REST_API, ebeguRestUtil, $log) {\n        this.$httpParamSerializer = $httpParamSerializer;\n        this.serviceURL = REST_API + 'gesuchsteller';\n        this.http = $http;\n        this.httpParamSerializer = $httpParamSerializer;\n        this.ebeguRestUtil = ebeguRestUtil;\n        this.log = $log;\n    }\n    EwkRS.prototype.ewkSearchAvailable = function (gsNr) {\n        return this.ewkSearchAvailableGS(this.getGesuchsteller(gsNr));\n    };\n    EwkRS.prototype.ewkSearchAvailableGS = function (gesuchstellerContainer) {\n        if (gesuchstellerContainer && gesuchstellerContainer.gesuchstellerJA\n            && gesuchstellerContainer.gesuchstellerJA.nachname\n            && gesuchstellerContainer.gesuchstellerJA.vorname\n            && gesuchstellerContainer.gesuchstellerJA.geburtsdatum\n            && gesuchstellerContainer.gesuchstellerJA.geschlecht) {\n            return true;\n        }\n        return false;\n    };\n    EwkRS.prototype.suchePerson = function (gsNr) {\n        return this.suchePersonInEwk(this.getGesuchsteller(gsNr));\n    };\n    EwkRS.prototype.getGesuchsteller = function (gsNr) {\n        if (1 === gsNr) {\n            return this.gesuchsteller1;\n        }\n        else if (2 === gsNr) {\n            return this.gesuchsteller2;\n        }\n        else {\n            this.log.error('invalid gesuchstellernummer', gsNr);\n            return null;\n        }\n    };\n    EwkRS.prototype.suchePersonInEwk = function (gesuchstellerContainer) {\n        var _this = this;\n        var gs = gesuchstellerContainer.gesuchstellerJA;\n        if (gs.ewkPersonId) {\n            return this.http.get(this.serviceURL + '/ewk/search/id/' + gs.ewkPersonId)\n                .then(function (response) {\n                return _this.handlePersonSucheResult(response);\n            });\n        }\n        else {\n            var reportParams = this.httpParamSerializer({\n                nachname: gs.nachname,\n                vorname: gs.vorname,\n                geburtsdatum: DateUtil_1.default.momentToLocalDate(gs.geburtsdatum),\n                geschlecht: gs.geschlecht.toLocaleString()\n            });\n            return this.http.get(this.serviceURL + '/ewk/search/attributes?' + reportParams)\n                .then(function (response) {\n                return _this.handlePersonSucheResult(response);\n            });\n        }\n    };\n    EwkRS.prototype.handlePersonSucheResult = function (response) {\n        this.log.debug('PARSING ewkResultat REST object ', response.data);\n        return this.ebeguRestUtil.parseEWKResultat(new TSEWKResultat_1.default(), response.data);\n    };\n    EwkRS.prototype.selectPerson = function (n, ewkPersonID) {\n        var gs = this.getGesuchsteller(n);\n        gs.gesuchstellerJA.ewkPersonId = ewkPersonID;\n        gs.gesuchstellerJA.ewkAbfrageDatum = DateUtil_1.default.now();\n    };\n    EwkRS.prototype.getServiceName = function () {\n        return 'EwkRS';\n    };\n    EwkRS.$inject = ['$http', '$httpParamSerializer', 'REST_API', 'EbeguRestUtil', '$log'];\n    return EwkRS;\n}());\nexports.default = EwkRS;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/ewkRS.rest.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/service/ewkRS.rest.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport EbeguRestUtil from '../../utils/EbeguRestUtil';\nimport {IHttpService, ILogService, IPromise} from 'angular';\nimport TSGesuchstellerContainer from '../../models/TSGesuchstellerContainer';\nimport TSEWKResultat from '../../models/TSEWKResultat';\nimport TSGesuchsteller from '../../models/TSGesuchsteller';\nimport DateUtil from '../../utils/DateUtil';\nimport IHttpParamSerializer = angular.IHttpParamSerializer;\n\nexport default class EwkRS {\n    serviceURL: string;\n    http: IHttpService;\n    httpParamSerializer: IHttpParamSerializer;\n    ebeguRestUtil: EbeguRestUtil;\n    log: ILogService;\n    gesuchsteller1: TSGesuchstellerContainer;\n    gesuchsteller2: TSGesuchstellerContainer;\n\n    static $inject = ['$http', '$httpParamSerializer', 'REST_API', 'EbeguRestUtil', '$log'];\n    /* @ngInject */\n    constructor($http: IHttpService, private $httpParamSerializer: IHttpParamSerializer, REST_API: string, ebeguRestUtil: EbeguRestUtil, $log: ILogService) {\n        this.serviceURL = REST_API + 'gesuchsteller';\n        this.http = $http;\n        this.httpParamSerializer = $httpParamSerializer;\n        this.ebeguRestUtil = ebeguRestUtil;\n        this.log = $log;\n    }\n\n    public ewkSearchAvailable(gsNr: number): boolean {\n        return this.ewkSearchAvailableGS(this.getGesuchsteller(gsNr));\n    }\n\n    private ewkSearchAvailableGS(gesuchstellerContainer: TSGesuchstellerContainer): boolean {\n        if (gesuchstellerContainer && gesuchstellerContainer.gesuchstellerJA\n            && gesuchstellerContainer.gesuchstellerJA.nachname\n            && gesuchstellerContainer.gesuchstellerJA.vorname\n            && gesuchstellerContainer.gesuchstellerJA.geburtsdatum\n            && gesuchstellerContainer.gesuchstellerJA.geschlecht) {\n            return true;\n        }\n        return false;\n    }\n\n    public suchePerson(gsNr: number): IPromise<TSEWKResultat> {\n        return this.suchePersonInEwk(this.getGesuchsteller(gsNr));\n    }\n\n    public getGesuchsteller(gsNr: number): TSGesuchstellerContainer {\n        if (1 === gsNr) {\n            return this.gesuchsteller1;\n        } else if (2 === gsNr) {\n            return this.gesuchsteller2;\n        } else {\n            this.log.error('invalid gesuchstellernummer', gsNr);\n            return null;\n        }\n    }\n\n    private suchePersonInEwk(gesuchstellerContainer: TSGesuchstellerContainer): IPromise<TSEWKResultat> {\n        let gs: TSGesuchsteller = gesuchstellerContainer.gesuchstellerJA;\n        if (gs.ewkPersonId) {\n            return this.http.get(this.serviceURL + '/ewk/search/id/' + gs.ewkPersonId)\n                .then((response: any) => {\n                    return this.handlePersonSucheResult(response);\n                });\n        } else {\n            let reportParams: string = this.httpParamSerializer({\n                nachname: gs.nachname,\n                vorname: gs.vorname,\n                geburtsdatum: DateUtil.momentToLocalDate(gs.geburtsdatum),\n                geschlecht: gs.geschlecht.toLocaleString()\n            });\n            return this.http.get(this.serviceURL + '/ewk/search/attributes?' + reportParams)\n                .then((response: any) => {\n                    return this.handlePersonSucheResult(response);\n                });\n        }\n    }\n\n    private handlePersonSucheResult(response: any): TSEWKResultat {\n        this.log.debug('PARSING ewkResultat REST object ', response.data);\n        return this.ebeguRestUtil.parseEWKResultat(new TSEWKResultat(), response.data);\n    }\n\n    public selectPerson(n: number, ewkPersonID: string): void {\n        let gs: TSGesuchstellerContainer = this.getGesuchsteller(n);\n        gs.gesuchstellerJA.ewkPersonId = ewkPersonID;\n        gs.gesuchstellerJA.ewkAbfrageDatum = DateUtil.now();\n    }\n\n    public getServiceName(): string {\n        return 'EwkRS';\n    }\n}\n"]}]}
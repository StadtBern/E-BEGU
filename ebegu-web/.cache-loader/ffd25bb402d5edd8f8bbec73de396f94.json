{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-valueinput/dv-valueinput.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-valueinput/dv-valueinput.ts","mtime":1518535855216},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var template = require('./dv-valueinput.html');\n    var DVValueinput = /** @class */ (function () {\n        function DVValueinput() {\n            this.restrict = 'E';\n            this.require = { ngModelCtrl: 'ngModel', dvValueInputCtrl: 'dvValueinput' };\n            this.scope = {\n                ngModel: '=',\n                inputId: '@',\n                ngRequired: '<',\n                ngDisabled: '<',\n                allowNegative: '<',\n                float: '<',\n                fixedDecimals: '@',\n                dvOnBlur: '&?',\n                inputName: '@?',\n            };\n            this.controller = ValueinputController;\n            this.controllerAs = 'vm';\n            this.bindToController = true;\n            this.template = template;\n        }\n        DVValueinput.factory = function () {\n            var directive = function () { return new DVValueinput(); };\n            directive.$inject = [];\n            return directive;\n        };\n        return DVValueinput;\n    }());\n    exports.DVValueinput = DVValueinput;\n    var ValueinputController = /** @class */ (function () {\n        function ValueinputController($timeout) {\n            this.$timeout = $timeout;\n        }\n        // beispiel wie man auf changes eines attributes von aussen reagieren kann\n        ValueinputController.prototype.$onChanges = function (changes) {\n            if (changes.ngRequired && !changes.ngRequired.isFirstChange()) {\n                this.valueRequired = changes.ngRequired.currentValue;\n            }\n        };\n        //wird von angular aufgerufen\n        ValueinputController.prototype.$onInit = function () {\n            var _this = this;\n            if (!this.ngModelCtrl) {\n                return;\n            }\n            if (this.ngRequired) {\n                this.valueRequired = this.ngRequired;\n            }\n            if (!this.allowNegative) {\n                this.allowNegative = false;\n            }\n            if (!this.float) {\n                this.float = false;\n            }\n            this.ngModelCtrl.$render = function () {\n                _this.valueinput = _this.ngModelCtrl.$viewValue;\n            };\n            this.ngModelCtrl.$formatters.unshift(ValueinputController.numberToString);\n            this.ngModelCtrl.$parsers.push(ValueinputController.stringToNumber);\n            this.ngModelCtrl.$validators['valueinput'] = function (modelValue, viewValue) {\n                // if not required and view value empty, it's ok...\n                if (!_this.valueRequired && !viewValue) {\n                    return true;\n                }\n                var value = modelValue || ValueinputController.stringToNumber(viewValue);\n                return !isNaN(Number(value)) && (Number(value) < 999999999999) && _this.allowNegative ? true : Number(value) >= 0;\n            };\n        };\n        /**\n         * on blur setzen wir den formatierten \"string\" ins feld\n         */\n        ValueinputController.prototype.updateModelValueBlur = function () {\n            this.updateModelValue();\n            this.ngModelCtrl.$setTouched();\n        };\n        /**\n         * onFocus schreiben wir den string als zahl ins feld und setzen den cursor ans ende des inputs\n         * @param event\n         */\n        ValueinputController.prototype.handleFocus = function (event) {\n            this.valueinput = this.sanitizeInputString();\n            if (event) {\n                var angEle = angular.element(event.target); //read raw html element\n                var element_1 = angEle[0];\n                this.$timeout(function () {\n                    // If this function exists...\n                    if (element_1.setSelectionRange) {\n                        // ... then use it\n                        element_1.setSelectionRange(999999, 999999);\n                    }\n                    else {\n                        // ... otherwise replace the contents with itself\n                        // (Doesn't work in Google Chrome)\n                        element_1.val(element_1.val());\n                    }\n                });\n            }\n        };\n        ValueinputController.prototype.updateModelValue = function () {\n            //set the number as formatted string to the model\n            if (this.valueinput) {\n                //if a number of fixed decimals are requested make the transformation on blur\n                if (this.float === true && !isNaN(this.fixedDecimals)) {\n                    this.valueinput = parseFloat(this.valueinput).toFixed(this.fixedDecimals);\n                }\n                this.valueinput = ValueinputController.formatToNumberString(ValueinputController.formatFromNumberString(this.valueinput));\n            }\n            this.ngModelCtrl.$setViewValue(this.valueinput);\n            if (this.dvOnBlur) {\n                this.dvOnBlur();\n            }\n        };\n        ;\n        ValueinputController.numberToString = function (num) {\n            if (num || num === 0) {\n                return ValueinputController.formatToNumberString(num.toString());\n            }\n            return '';\n        };\n        ValueinputController.stringToNumber = function (string) {\n            if (string) {\n                return Number(ValueinputController.formatFromNumberString(string));\n            }\n            return null; // null zurueckgeben und nicht undefined denn sonst wird ein ng-parse error erzeugt\n        };\n        ValueinputController.formatToNumberString = function (valueString) {\n            if (valueString !== null && valueString !== undefined) {\n                var parts = valueString.split('.');\n                parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"'\");\n                return parts.join('.');\n            }\n            return valueString;\n        };\n        ValueinputController.formatFromNumberString = function (numberString) {\n            return numberString.split(\"'\").join('').split(',').join('');\n        };\n        ValueinputController.prototype.removeNotDigits = function () {\n            var transformedInput = this.sanitizeInputString();\n            //neuen wert ins model schreiben\n            if (transformedInput && transformedInput !== this.ngModelCtrl.$viewValue) {\n                //setting the new raw number into the invisible parentmodel\n                this.ngModelCtrl.$setViewValue(ValueinputController.formatToNumberString(transformedInput));\n                this.ngModelCtrl.$render();\n            }\n            if (this.valueinput !== transformedInput) {\n                this.valueinput = transformedInput;\n            }\n        };\n        ValueinputController.prototype.sanitizeInputString = function () {\n            var transformedInput = this.valueinput;\n            if (transformedInput) {\n                var sign = '';\n                if (this.allowNegative === true && this.valueinput && this.valueinput.indexOf('-') === 0) {\n                    sign = '-';\n                    transformedInput.substr(1); // get just the number part\n                }\n                if (!this.float) {\n                    transformedInput = this.sanitizeIntString(transformedInput, sign);\n                }\n                else {\n                    transformedInput = this.sanitizeFloatString(transformedInput, sign);\n                }\n            }\n            return transformedInput;\n        };\n        ValueinputController.prototype.sanitizeFloatString = function (transformedInput, sign) {\n            // removes all chars that are not a digit or a point\n            transformedInput = transformedInput.replace(/([^0-9|\\.])+/g, '');\n            if (transformedInput) {\n                var pointIndex = transformedInput.indexOf('.');\n                //only parse if there is either no floating point or the floating point is not at the end. Also dont parse\n                // if 0 at end\n                if (pointIndex === -1 || (pointIndex !== (transformedInput.length - 1) && transformedInput.lastIndexOf('0') !== (transformedInput.length - 1))) {\n                    // parse to float to remove unwanted  digits like leading zeros and then back to string\n                    transformedInput = parseFloat(transformedInput).toString();\n                }\n            }\n            transformedInput = sign + transformedInput; // add sign to raw number\n            return transformedInput;\n        };\n        ValueinputController.prototype.sanitizeIntString = function (transformedInput, sign) {\n            transformedInput = transformedInput.replace(/\\D+/g, ''); // removes all \"not digit\"\n            if (transformedInput) {\n                // parse to int to remove not wanted digits like leading zeros and then back to string\n                transformedInput = parseInt(transformedInput).toString();\n            }\n            transformedInput = sign + transformedInput; // add sign to raw number\n            return transformedInput;\n        };\n        ValueinputController.$inject = ['$timeout'];\n        return ValueinputController;\n    }());\n    exports.ValueinputController = ValueinputController;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-valueinput/dv-valueinput.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/directive/dv-valueinput/dv-valueinput.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IAugmentedJQuery, IDirective, IDirectiveFactory, IDirectiveLinkFn, INgModelController} from 'angular';\nimport ITimeoutService = angular.ITimeoutService;\ndeclare let require: any;\ndeclare let angular: any;\nlet template = require('./dv-valueinput.html');\n\nexport class DVValueinput implements IDirective {\n    restrict = 'E';\n    require: any = {ngModelCtrl: 'ngModel', dvValueInputCtrl: 'dvValueinput'};\n    scope = {\n        ngModel: '=',\n        inputId: '@',\n        ngRequired: '<',\n        ngDisabled: '<',\n        allowNegative: '<',\n        float: '<',\n        fixedDecimals: '@',\n        dvOnBlur: '&?',\n        inputName: '@?',\n    };\n    controller = ValueinputController;\n    controllerAs = 'vm';\n    bindToController = true;\n    template = template;\n    link: IDirectiveLinkFn;\n\n    constructor() {\n\n    }\n\n    static factory(): IDirectiveFactory {\n        const directive = () => new DVValueinput();\n        directive.$inject = [];\n        return directive;\n    }\n}\nexport class ValueinputController {\n    valueinput: string;\n    ngModelCtrl: INgModelController;\n    valueRequired: boolean;\n    ngRequired: boolean;\n    allowNegative: boolean;\n    float: boolean;\n    fixedDecimals: number;\n    dvOnBlur: () => void;\n\n    static $inject: string[] = ['$timeout'];\n    constructor(private $timeout: ITimeoutService) {\n    }\n\n    // beispiel wie man auf changes eines attributes von aussen reagieren kann\n    $onChanges(changes: any) {\n        if (changes.ngRequired && !changes.ngRequired.isFirstChange()) {\n            this.valueRequired = changes.ngRequired.currentValue;\n        }\n    }\n\n    //wird von angular aufgerufen\n    $onInit() {\n        if (!this.ngModelCtrl) {\n            return;\n        }\n\n        if (this.ngRequired) {\n            this.valueRequired = this.ngRequired;\n        }\n\n        if (!this.allowNegative) {\n            this.allowNegative = false;\n        }\n\n        if (!this.float) {\n            this.float = false;\n        }\n\n        this.ngModelCtrl.$render = () => {\n            this.valueinput = this.ngModelCtrl.$viewValue;\n        };\n        this.ngModelCtrl.$formatters.unshift(ValueinputController.numberToString);\n        this.ngModelCtrl.$parsers.push(ValueinputController.stringToNumber);\n\n        this.ngModelCtrl.$validators['valueinput'] = (modelValue: any, viewValue: any) => {\n            // if not required and view value empty, it's ok...\n            if (!this.valueRequired && !viewValue) {\n                return true;\n            }\n\n            let value = modelValue || ValueinputController.stringToNumber(viewValue);\n\n            return !isNaN(Number(value)) && (Number(value) < 999999999999) && this.allowNegative ? true : Number(value) >= 0;\n        };\n    }\n\n    /**\n     * on blur setzen wir den formatierten \"string\" ins feld\n     */\n    public updateModelValueBlur() {\n        this.updateModelValue();\n        this.ngModelCtrl.$setTouched();\n    }\n\n    /**\n     * onFocus schreiben wir den string als zahl ins feld und setzen den cursor ans ende des inputs\n     * @param event\n     */\n    public handleFocus(event: any) {\n\n        this.valueinput = this.sanitizeInputString();\n        if (event) {\n            let angEle: IAugmentedJQuery = angular.element(event.target); //read raw html element\n\n            let element: any = angEle[0];\n            this.$timeout(() => {\n                // If this function exists...\n                if (element.setSelectionRange) {\n                    // ... then use it\n                    element.setSelectionRange(999999, 999999);\n                } else {\n                    // ... otherwise replace the contents with itself\n                    // (Doesn't work in Google Chrome)\n                    element.val(element.val());\n                }\n            });\n        }\n\n    }\n\n    updateModelValue() {\n        //set the number as formatted string to the model\n        if (this.valueinput) {\n            //if a number of fixed decimals are requested make the transformation on blur\n            if (this.float === true && !isNaN(this.fixedDecimals)) {\n                this.valueinput = parseFloat(this.valueinput).toFixed(this.fixedDecimals);\n            }\n            this.valueinput = ValueinputController.formatToNumberString(ValueinputController.formatFromNumberString(this.valueinput));\n\n        }\n        this.ngModelCtrl.$setViewValue(this.valueinput);\n        if (this.dvOnBlur) { // userdefined onBlur event\n            this.dvOnBlur();\n        }\n\n    };\n\n    private static numberToString(num: number): string {\n        if (num || num === 0) {\n            return ValueinputController.formatToNumberString(num.toString());\n        }\n        return '';\n    }\n\n    private static stringToNumber(string: string): number | undefined  | null {\n        if (string) {\n            return Number(ValueinputController.formatFromNumberString(string));\n        }\n        return null;  // null zurueckgeben und nicht undefined denn sonst wird ein ng-parse error erzeugt\n    }\n\n    private static formatToNumberString(valueString: string): string {\n        if (valueString !== null && valueString !== undefined) {\n            let parts = valueString.split('.');\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"'\");\n            return parts.join('.');\n        }\n        return valueString;\n    }\n\n    private static formatFromNumberString(numberString: string): string {\n        return numberString.split(\"'\").join('').split(',').join('');\n    }\n\n    public removeNotDigits(): void {\n        let transformedInput = this.sanitizeInputString();\n\n        //neuen wert ins model schreiben\n        if (transformedInput && transformedInput !== this.ngModelCtrl.$viewValue) {\n            //setting the new raw number into the invisible parentmodel\n            this.ngModelCtrl.$setViewValue(ValueinputController.formatToNumberString(transformedInput));\n            this.ngModelCtrl.$render();\n        }\n        if (this.valueinput !== transformedInput) {\n            this.valueinput = transformedInput;\n        }\n    }\n\n    private sanitizeInputString() {\n        let transformedInput = this.valueinput;\n        if (transformedInput) {\n            let sign: string = '';\n            if (this.allowNegative === true && this.valueinput && this.valueinput.indexOf('-') === 0) { // if negative allowed, get sign\n                sign = '-';\n                transformedInput.substr(1); // get just the number part\n            }\n            if (!this.float) {\n                transformedInput = this.sanitizeIntString(transformedInput, sign);\n            } else {\n                transformedInput = this.sanitizeFloatString(transformedInput, sign);\n            }\n        }\n        return transformedInput;\n    }\n\n    private sanitizeFloatString(transformedInput: string, sign: string) {\n        // removes all chars that are not a digit or a point\n        transformedInput = transformedInput.replace(/([^0-9|\\.])+/g, '');\n        if (transformedInput) {\n            let pointIndex = transformedInput.indexOf('.');\n            //only parse if there is either no floating point or the floating point is not at the end. Also dont parse\n            // if 0 at end\n            if (pointIndex === -1 || (pointIndex !== (transformedInput.length - 1) && transformedInput.lastIndexOf('0') !== (transformedInput.length - 1) )) {\n                // parse to float to remove unwanted  digits like leading zeros and then back to string\n                transformedInput = parseFloat(transformedInput).toString();\n            }\n        }\n        transformedInput = sign + transformedInput; // add sign to raw number\n        return transformedInput;\n    }\n\n    private sanitizeIntString(transformedInput: string, sign: string) {\n        transformedInput = transformedInput.replace(/\\D+/g, ''); // removes all \"not digit\"\n        if (transformedInput) {\n            // parse to int to remove not wanted digits like leading zeros and then back to string\n            transformedInput = parseInt(transformedInput).toString();\n        }\n        transformedInput = sign + transformedInput; // add sign to raw number\n        return transformedInput;\n    }\n\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts","mtime":1518612532790},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RemoveDialogController_1 = require(\"../../../gesuch/dialog/RemoveDialogController\");\nvar TSAmt_1 = require(\"../../../models/enums/TSAmt\");\nvar TSMitteilungEvent_1 = require(\"../../../models/enums/TSMitteilungEvent\");\nvar TSMitteilungStatus_1 = require(\"../../../models/enums/TSMitteilungStatus\");\nvar TSMitteilungTeilnehmerTyp_1 = require(\"../../../models/enums/TSMitteilungTeilnehmerTyp\");\nvar TSRole_1 = require(\"../../../models/enums/TSRole\");\nvar TSBetreuungsmitteilung_1 = require(\"../../../models/TSBetreuungsmitteilung\");\nvar TSMitteilung_1 = require(\"../../../models/TSMitteilung\");\nvar EbeguUtil_1 = require(\"../../../utils/EbeguUtil\");\nvar TSRoleUtil_1 = require(\"../../../utils/TSRoleUtil\");\nvar template = require('./dv-mitteilung-list.html');\nrequire('./dv-mitteilung-list.less');\nvar removeDialogTemplate = require('../../../gesuch/dialog/removeDialogTemplate.html');\nvar DVMitteilungListConfig = /** @class */ (function () {\n    function DVMitteilungListConfig() {\n        this.transclude = false;\n        this.bindings = {\n            fall: '<',\n            betreuung: '<',\n            form: '<',\n        };\n        this.template = template;\n        this.controller = DVMitteilungListController;\n        this.controllerAs = 'vm';\n    }\n    return DVMitteilungListConfig;\n}());\nexports.DVMitteilungListConfig = DVMitteilungListConfig;\nvar DVMitteilungListController = /** @class */ (function () {\n    /* @ngInject */\n    function DVMitteilungListController($stateParams, mitteilungRS, authServiceRS, fallRS, betreuungRS, $q, $window, $rootScope, $state, ebeguUtil, DvDialog, gesuchModelManager, $scope, $timeout) {\n        this.$stateParams = $stateParams;\n        this.mitteilungRS = mitteilungRS;\n        this.authServiceRS = authServiceRS;\n        this.fallRS = fallRS;\n        this.betreuungRS = betreuungRS;\n        this.$q = $q;\n        this.$window = $window;\n        this.$rootScope = $rootScope;\n        this.$state = $state;\n        this.DvDialog = DvDialog;\n        this.gesuchModelManager = gesuchModelManager;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.TSRole = TSRole_1.TSRole;\n        this.TSRoleUtil = TSRoleUtil_1.TSRoleUtil;\n        this.ebeguUtil = ebeguUtil;\n    }\n    DVMitteilungListController.prototype.$onInit = function () {\n        var _this = this;\n        if (this.$stateParams.mitteilungId) {\n            // wenn man eine bestimmte Mitteilung oeffnen will, kann man ihr ID als parameter geben\n            this.paramSelectedMitteilungId = this.$stateParams.mitteilungId;\n        }\n        if (this.$stateParams.fallId) {\n            this.fallRS.findFall(this.$stateParams.fallId).then(function (response) {\n                _this.fall = response;\n                if (_this.$stateParams.betreuungId) {\n                    _this.betreuungRS.findBetreuung(_this.$stateParams.betreuungId).then(function (response) {\n                        _this.betreuung = response;\n                        _this.loadEntwurf();\n                        _this.loadAllMitteilungen();\n                    });\n                }\n                else {\n                    _this.loadEntwurf();\n                    // Wenn JA oder Institution -> Neue Mitteilungen als gelesen markieren\n                    if (_this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerJugendamtSchulamtRoles())) {\n                        _this.setAllMitteilungenGelesen().then(function (response) {\n                            _this.loadAllMitteilungen();\n                            if (_this.$rootScope) {\n                                _this.$rootScope.$emit('POSTEINGANG_MAY_CHANGED', null);\n                            }\n                        });\n                    }\n                    else {\n                        // Fuer Revisor und Jurist: Nur laden\n                        _this.loadAllMitteilungen();\n                    }\n                }\n            });\n        }\n        this.$scope.$on(TSMitteilungEvent_1.TSMitteilungEvent[TSMitteilungEvent_1.TSMitteilungEvent.MUTATIONSMITTEILUNG_MUTATION_REMOVED], function () {\n            _this.loadAllMitteilungen();\n        });\n    };\n    DVMitteilungListController.prototype.cancel = function () {\n        this.form.$setPristine();\n        this.$window.history.back();\n    };\n    /**\n     * Diese Methode laedt einen Entwurf wenn es einen existiert. Sonst gibt sie eine leeren\n     * Mitteilung zurueck.\n     */\n    DVMitteilungListController.prototype.loadEntwurf = function () {\n        var _this = this;\n        // Wenn der Fall keinen Besitzer hat, darf auch keine Nachricht geschrieben werden\n        // Ausser wir sind Institutionsbenutzer\n        var isGesuchsteller = this.authServiceRS.isRole(TSRole_1.TSRole.GESUCHSTELLER);\n        var isJugendamtOrSchulamtAndFallHasBesitzer = this.fall.besitzer && this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAdministratorJugendamtSchulamtRoles());\n        var isInstitutionsUser = this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles());\n        if (isGesuchsteller || isJugendamtOrSchulamtAndFallHasBesitzer || isInstitutionsUser) {\n            if (this.betreuung) {\n                this.mitteilungRS.getEntwurfForCurrentRolleForBetreuung(this.betreuung.id).then(function (entwurf) {\n                    if (entwurf) {\n                        _this.currentMitteilung = entwurf;\n                    }\n                    else {\n                        _this.initMitteilungForCurrentBenutzer();\n                    }\n                });\n            }\n            else {\n                this.mitteilungRS.getEntwurfForCurrentRolleForFall(this.fall.id).then(function (entwurf) {\n                    if (entwurf) {\n                        _this.currentMitteilung = entwurf;\n                    }\n                    else {\n                        _this.initMitteilungForCurrentBenutzer();\n                    }\n                });\n            }\n        }\n    };\n    DVMitteilungListController.prototype.initMitteilungForCurrentBenutzer = function () {\n        var currentUser = this.authServiceRS.getPrincipal();\n        //common attributes\n        this.currentMitteilung = new TSMitteilung_1.default();\n        this.currentMitteilung.fall = this.fall;\n        if (this.betreuung) {\n            this.currentMitteilung.betreuung = this.betreuung;\n        }\n        this.currentMitteilung.mitteilungStatus = TSMitteilungStatus_1.TSMitteilungStatus.ENTWURF;\n        this.currentMitteilung.sender = currentUser;\n    };\n    DVMitteilungListController.prototype.getCurrentMitteilung = function () {\n        return this.currentMitteilung;\n    };\n    /**\n     * Speichert die aktuelle Mitteilung als gesendet.\n     */\n    DVMitteilungListController.prototype.sendMitteilung = function () {\n        var _this = this;\n        if (this.form.$invalid) {\n            EbeguUtil_1.default.selectFirstInvalid();\n            return undefined;\n        }\n        if (!this.isMitteilungEmpty()) {\n            return this.mitteilungRS.sendMitteilung(this.getCurrentMitteilung()).then(function (response) {\n                _this.loadEntwurf();\n                _this.loadAllMitteilungen();\n                return _this.currentMitteilung;\n            }).finally(function () {\n                _this.form.$setPristine();\n                _this.form.$setUntouched();\n            });\n        }\n        else {\n            return this.$q.when(this.currentMitteilung);\n        }\n    };\n    /**\n     * Speichert die aktuelle Mitteilung nur wenn das formular dirty ist.\n     * Wenn das Formular leer ist, wird der Entwurf geloescht (falls er bereits existiert)\n     */\n    DVMitteilungListController.prototype.saveEntwurf = function () {\n        var _this = this;\n        if (((this.form.$dirty && !this.isMitteilungEmpty()))) {\n            return this.mitteilungRS.saveEntwurf(this.getCurrentMitteilung()).then(function (response) {\n                _this.loadEntwurf();\n                _this.loadAllMitteilungen();\n                return _this.currentMitteilung;\n            }).finally(function () {\n                _this.form.$setPristine();\n                _this.form.$setUntouched();\n            });\n        }\n        else if (this.isMitteilungEmpty() && !this.currentMitteilung.isNew() && this.currentMitteilung.id) {\n            return this.mitteilungRS.removeEntwurf(this.getCurrentMitteilung()).then(function (response) {\n                _this.initMitteilungForCurrentBenutzer();\n                return _this.currentMitteilung;\n            });\n        }\n        else {\n            return this.$q.when(this.currentMitteilung);\n        }\n    };\n    DVMitteilungListController.prototype.isMitteilungEmpty = function () {\n        return (!this.currentMitteilung.message || this.currentMitteilung.message.length <= 0)\n            && (!this.currentMitteilung.subject || this.currentMitteilung.subject.length <= 0);\n    };\n    DVMitteilungListController.prototype.loadAllMitteilungen = function () {\n        var _this = this;\n        if (this.betreuung) {\n            this.mitteilungRS.getMitteilungenForCurrentRolleForBetreuung(this.betreuung.id).then(function (response) {\n                _this.allMitteilungen = response;\n            });\n        }\n        else {\n            this.mitteilungRS.getMitteilungenForCurrentRolleForFall(this.fall.id).then(function (response) {\n                _this.allMitteilungen = response;\n            });\n        }\n    };\n    /**\n     * Gibt true zurueck wenn der aktuelle BenutzerTyp, der Sender der uebergenenen Mitteilung ist.\n     */\n    DVMitteilungListController.prototype.isCurrentUserTypTheSenderTyp = function (mitteilung) {\n        return mitteilung && mitteilung.sender && this.authServiceRS.getPrincipal()\n            && mitteilung.senderTyp === this.getMitteilungTeilnehmerTypForUserRole(this.authServiceRS.getPrincipal().role);\n    };\n    DVMitteilungListController.prototype.isSenderTypInstitution = function (mitteilung) {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.INSTITUTION;\n    };\n    DVMitteilungListController.prototype.isSenderTypSchulamt = function (mitteilung) {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.JUGENDAMT\n            && mitteilung.getSenderAmt() === TSAmt_1.TSAmt.SCHULAMT;\n    };\n    DVMitteilungListController.prototype.isSenderTypJugendamt = function (mitteilung) {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.JUGENDAMT\n            && mitteilung.getSenderAmt() === TSAmt_1.TSAmt.JUGENDAMT;\n    };\n    DVMitteilungListController.prototype.isSenderTypGesuchsteller = function (mitteilung) {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n    };\n    DVMitteilungListController.prototype.getMitteilungTeilnehmerTypForUserRole = function (role) {\n        switch (role) {\n            case TSRole_1.TSRole.GESUCHSTELLER: {\n                return TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n            }\n            case TSRole_1.TSRole.SACHBEARBEITER_INSTITUTION:\n            case TSRole_1.TSRole.SACHBEARBEITER_TRAEGERSCHAFT: {\n                return TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.INSTITUTION;\n            }\n            case TSRole_1.TSRole.SUPER_ADMIN:\n            case TSRole_1.TSRole.ADMIN:\n            case TSRole_1.TSRole.JURIST:\n            case TSRole_1.TSRole.REVISOR:\n            case TSRole_1.TSRole.SACHBEARBEITER_JA:\n            case TSRole_1.TSRole.SCHULAMT:\n            case TSRole_1.TSRole.ADMINISTRATOR_SCHULAMT: {\n                return TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.JUGENDAMT;\n            }\n            default:\n                return null;\n        }\n    };\n    DVMitteilungListController.prototype.setAllMitteilungenGelesen = function () {\n        return this.mitteilungRS.setAllNewMitteilungenOfFallGelesen(this.fall.id);\n    };\n    /**\n     * Aendert den Status der gegebenen Mitteilung auf ERLEDIGT wenn es GELESEN war oder\n     * auf GELESEN wenn es ERLEDIGT war\n     */\n    DVMitteilungListController.prototype.setErledigt = function (mitteilung) {\n        if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.GELESEN) {\n            mitteilung.mitteilungStatus = TSMitteilungStatus_1.TSMitteilungStatus.ERLEDIGT;\n            this.mitteilungRS.setMitteilungErledigt(mitteilung.id);\n        }\n        else if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.ERLEDIGT) {\n            mitteilung.mitteilungStatus = TSMitteilungStatus_1.TSMitteilungStatus.GELESEN;\n            this.mitteilungRS.setMitteilungGelesen(mitteilung.id);\n        }\n    };\n    DVMitteilungListController.prototype.isStatusErledigtGelesen = function (mitteilung) {\n        return mitteilung && (mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.ERLEDIGT || mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.GELESEN);\n    };\n    DVMitteilungListController.prototype.getBgNummer = function () {\n        var bgNummer = '';\n        if (this.betreuung) {\n            bgNummer = this.ebeguUtil.calculateBetreuungsId(this.betreuung.gesuchsperiode, this.fall, this.betreuung.kindNummer, this.betreuung.betreuungNummer);\n        }\n        return bgNummer;\n    };\n    DVMitteilungListController.prototype.betreuungAsString = function (mitteilung) {\n        var betreuungAsString;\n        if (mitteilung.betreuung) {\n            var bgNummer = this.ebeguUtil.calculateBetreuungsId(mitteilung.betreuung.gesuchsperiode, mitteilung.fall, mitteilung.betreuung.kindNummer, mitteilung.betreuung.betreuungNummer);\n            betreuungAsString = mitteilung.betreuung.kindFullname + ', ' + bgNummer;\n        }\n        return betreuungAsString;\n    };\n    DVMitteilungListController.prototype.gotoBetreuung = function (mitteilung) {\n        this.$state.go('gesuch.betreuung', {\n            betreuungNumber: mitteilung.betreuung.betreuungNummer,\n            kindNumber: mitteilung.betreuung.kindNummer,\n            gesuchId: mitteilung.betreuung.gesuchId\n        });\n    };\n    DVMitteilungListController.prototype.isBetreuungsmitteilungApplied = function (mitteilung) {\n        return (mitteilung instanceof TSBetreuungsmitteilung_1.default) && mitteilung.applied === true;\n    };\n    DVMitteilungListController.prototype.isBetreuungsmitteilungNotApplied = function (mitteilung) {\n        return (mitteilung instanceof TSBetreuungsmitteilung_1.default) && mitteilung.applied !== true;\n    };\n    DVMitteilungListController.prototype.canApplyBetreuungsmitteilung = function (mitteilung) {\n        return this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAdministratorOrAmtRole());\n    };\n    DVMitteilungListController.prototype.$postLink = function () {\n        this.$timeout(function () {\n            EbeguUtil_1.default.selectFirst();\n        }, 200);\n    };\n    DVMitteilungListController.prototype.applyBetreuungsmitteilung = function (mitteilung) {\n        var _this = this;\n        if (mitteilung instanceof TSBetreuungsmitteilung_1.default) {\n            this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController_1.RemoveDialogController, {\n                title: 'MUTATIONSMELDUNG_UEBERNEHMEN',\n                deleteText: 'MUTATIONSMELDUNG_UEBERNEHMEN_BESCHREIBUNG',\n                parentController: this,\n                elementID: 'Intro'\n            }).then(function () {\n                var betreuungsmitteilung = mitteilung;\n                _this.mitteilungRS.applyBetreuungsmitteilung(betreuungsmitteilung.id).then(function (response) {\n                    _this.loadAllMitteilungen();\n                    if (response.id === _this.gesuchModelManager.getGesuch().id) {\n                        // Dies wird gebraucht wenn das Gesuch der Mitteilung schon geladen ist, weil die Daten der\n                        // Betreuung geaendert wurden und deshalb neugeladen werden müssen. reloadGesuch ist einfacher\n                        // als die entsprechende Betreuung neu zu laden\n                        _this.gesuchModelManager.reloadGesuch();\n                    }\n                    else if (response.id) {\n                        // informieren, dass eine neue Mutation erstellt wurde\n                        _this.$rootScope.$broadcast(TSMitteilungEvent_1.TSMitteilungEvent[TSMitteilungEvent_1.TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], 'Mutationsmitteilung einer neuen Mutation hinzugefuegt');\n                    }\n                });\n            });\n        }\n    };\n    DVMitteilungListController.prototype.mitteilungUebergebenAnJugendamt = function (mitteilung) {\n        var _this = this;\n        this.mitteilungRS.mitteilungUebergebenAnJugendamt(mitteilung.id).then(function (msg) {\n            _this.ebeguUtil.replaceElementInList(msg, _this.allMitteilungen, false);\n        });\n    };\n    DVMitteilungListController.prototype.mitteilungUebergebenAnSchulamt = function (mitteilung) {\n        var _this = this;\n        this.mitteilungRS.mitteilungUebergebenAnSchulamt(mitteilung.id).then(function (msg) {\n            _this.ebeguUtil.replaceElementInList(msg, _this.allMitteilungen, false);\n        });\n    };\n    DVMitteilungListController.prototype.isMessageEditableForMyRole = function (mitteilung) {\n        // Ich darf die Mitteilung auf Gelesen setzen oder Delegieren, wenn ich der gleichen Empfängergruppe wie die Meldung selber angehöre\n        return this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt_1.TSAmt.JUGENDAMT) ||\n            this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt_1.TSAmt.SCHULAMT);\n    };\n    DVMitteilungListController.prototype.canUebergebenAnSchulamt = function (mitteilung) {\n        return this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt_1.TSAmt.JUGENDAMT) && !mitteilung.isErledigt();\n    };\n    DVMitteilungListController.prototype.canUebergebenAnJugendamt = function (mitteilung) {\n        return this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt_1.TSAmt.SCHULAMT) && !mitteilung.isErledigt();\n    };\n    DVMitteilungListController.prototype.isUserAndEmpfaengerSameAmt = function (mitteilung, amt) {\n        var userInAmt = this.authServiceRS.getPrincipal().amt === amt;\n        var empfaengerInAmt = mitteilung.getEmpfaengerAmt() === amt;\n        return userInAmt && empfaengerInAmt;\n    };\n    DVMitteilungListController.$inject = ['$stateParams', 'MitteilungRS', 'AuthServiceRS', 'FallRS', 'BetreuungRS',\n        '$q', '$window', '$rootScope', '$state', 'EbeguUtil', 'DvDialog', 'GesuchModelManager', '$scope', '$timeout'];\n    return DVMitteilungListController;\n}());\nexports.DVMitteilungListController = DVMitteilungListController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions, IPromise} from 'angular';\nimport {IStateService} from 'angular-ui-router';\nimport AuthServiceRS from '../../../authentication/service/AuthServiceRS.rest';\nimport {RemoveDialogController} from '../../../gesuch/dialog/RemoveDialogController';\nimport FallRS from '../../../gesuch/service/fallRS.rest';\nimport GesuchModelManager from '../../../gesuch/service/gesuchModelManager';\nimport {IMitteilungenStateParams} from '../../../mitteilungen/mitteilungen.route';\nimport {TSAmt} from '../../../models/enums/TSAmt';\nimport {TSMitteilungEvent} from '../../../models/enums/TSMitteilungEvent';\nimport {TSMitteilungStatus} from '../../../models/enums/TSMitteilungStatus';\nimport {TSMitteilungTeilnehmerTyp} from '../../../models/enums/TSMitteilungTeilnehmerTyp';\nimport {TSRole} from '../../../models/enums/TSRole';\nimport TSBetreuung from '../../../models/TSBetreuung';\nimport TSBetreuungsmitteilung from '../../../models/TSBetreuungsmitteilung';\nimport TSFall from '../../../models/TSFall';\nimport TSMitteilung from '../../../models/TSMitteilung';\nimport TSUser from '../../../models/TSUser';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport {TSRoleUtil} from '../../../utils/TSRoleUtil';\nimport {DvDialog} from '../../directive/dv-dialog/dv-dialog';\nimport BetreuungRS from '../../service/betreuungRS.rest';\nimport MitteilungRS from '../../service/mitteilungRS.rest';\nimport IFormController = angular.IFormController;\nimport IQService = angular.IQService;\nimport IRootScopeService = angular.IRootScopeService;\nimport IScope = angular.IScope;\nimport IWindowService = angular.IWindowService;\nimport ITimeoutService = angular.ITimeoutService;\n\nlet template = require('./dv-mitteilung-list.html');\nrequire('./dv-mitteilung-list.less');\nlet removeDialogTemplate = require('../../../gesuch/dialog/removeDialogTemplate.html');\n\nexport class DVMitteilungListConfig implements IComponentOptions {\n    transclude = false;\n\n    bindings: any = {\n        fall: '<',\n        betreuung: '<',\n        form: '<',\n    };\n\n    template = template;\n    controller = DVMitteilungListController;\n    controllerAs = 'vm';\n}\n\nexport class DVMitteilungListController {\n\n    fall: TSFall;\n    betreuung: TSBetreuung;\n    form: IFormController;\n\n    paramSelectedMitteilungId: string;\n    currentMitteilung: TSMitteilung;\n    allMitteilungen: Array<TSMitteilung>;\n    TSRole: any;\n    TSRoleUtil: any;\n    ebeguUtil: EbeguUtil;\n\n    static $inject: any[] = ['$stateParams', 'MitteilungRS', 'AuthServiceRS', 'FallRS', 'BetreuungRS',\n        '$q', '$window', '$rootScope', '$state', 'EbeguUtil', 'DvDialog', 'GesuchModelManager', '$scope', '$timeout'];\n    /* @ngInject */\n    constructor(private $stateParams: IMitteilungenStateParams, private mitteilungRS: MitteilungRS,\n                private authServiceRS: AuthServiceRS,\n                private fallRS: FallRS, private betreuungRS: BetreuungRS, private $q: IQService,\n                private $window: IWindowService,\n                private $rootScope: IRootScopeService, private $state: IStateService, ebeguUtil: EbeguUtil,\n                private DvDialog: DvDialog,\n                private gesuchModelManager: GesuchModelManager, private $scope: IScope,\n                private $timeout: ITimeoutService) {\n        this.TSRole = TSRole;\n        this.TSRoleUtil = TSRoleUtil;\n        this.ebeguUtil = ebeguUtil;\n    }\n\n    $onInit() {\n        if (this.$stateParams.mitteilungId) {\n            // wenn man eine bestimmte Mitteilung oeffnen will, kann man ihr ID als parameter geben\n            this.paramSelectedMitteilungId = this.$stateParams.mitteilungId;\n        }\n        if (this.$stateParams.fallId) {\n            this.fallRS.findFall(this.$stateParams.fallId).then((response) => {\n                this.fall = response;\n                if (this.$stateParams.betreuungId) {\n                    this.betreuungRS.findBetreuung(this.$stateParams.betreuungId).then((response) => {\n                        this.betreuung = response;\n                        this.loadEntwurf();\n                        this.loadAllMitteilungen();\n                    });\n                } else {\n                    this.loadEntwurf();\n                    // Wenn JA oder Institution -> Neue Mitteilungen als gelesen markieren\n                    if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerJugendamtSchulamtRoles())) {\n                        this.setAllMitteilungenGelesen().then((response) => {\n                            this.loadAllMitteilungen();\n                            if (this.$rootScope) {\n                                this.$rootScope.$emit('POSTEINGANG_MAY_CHANGED', null);\n                            }\n                        });\n                    } else {\n                        // Fuer Revisor und Jurist: Nur laden\n                        this.loadAllMitteilungen();\n                    }\n                }\n            });\n        }\n        this.$scope.$on(TSMitteilungEvent[TSMitteilungEvent.MUTATIONSMITTEILUNG_MUTATION_REMOVED], () => {\n            this.loadAllMitteilungen();\n        });\n    }\n\n    public cancel(): void {\n        this.form.$setPristine();\n        this.$window.history.back();\n    }\n\n    /**\n     * Diese Methode laedt einen Entwurf wenn es einen existiert. Sonst gibt sie eine leeren\n     * Mitteilung zurueck.\n     */\n    private loadEntwurf() {\n        // Wenn der Fall keinen Besitzer hat, darf auch keine Nachricht geschrieben werden\n        // Ausser wir sind Institutionsbenutzer\n        let isGesuchsteller: boolean = this.authServiceRS.isRole(TSRole.GESUCHSTELLER);\n        let isJugendamtOrSchulamtAndFallHasBesitzer: boolean = this.fall.besitzer && this.authServiceRS.isOneOfRoles(TSRoleUtil.getAdministratorJugendamtSchulamtRoles());\n        let isInstitutionsUser: boolean = this.authServiceRS.isOneOfRoles(TSRoleUtil.getTraegerschaftInstitutionOnlyRoles());\n        if (isGesuchsteller || isJugendamtOrSchulamtAndFallHasBesitzer || isInstitutionsUser) {\n            if (this.betreuung) {\n                this.mitteilungRS.getEntwurfForCurrentRolleForBetreuung(this.betreuung.id).then((entwurf: TSMitteilung) => {\n                    if (entwurf) {\n                        this.currentMitteilung = entwurf;\n                    } else {\n                        this.initMitteilungForCurrentBenutzer();\n                    }\n                });\n            } else {\n                this.mitteilungRS.getEntwurfForCurrentRolleForFall(this.fall.id).then((entwurf: TSMitteilung) => {\n                    if (entwurf) {\n                        this.currentMitteilung = entwurf;\n                    } else {\n                        this.initMitteilungForCurrentBenutzer();\n                    }\n                });\n            }\n        }\n    }\n\n    private initMitteilungForCurrentBenutzer() {\n        let currentUser: TSUser = this.authServiceRS.getPrincipal();\n\n        //common attributes\n        this.currentMitteilung = new TSMitteilung();\n        this.currentMitteilung.fall = this.fall;\n        if (this.betreuung) {\n            this.currentMitteilung.betreuung = this.betreuung;\n        }\n        this.currentMitteilung.mitteilungStatus = TSMitteilungStatus.ENTWURF;\n        this.currentMitteilung.sender = currentUser;\n    }\n\n    public getCurrentMitteilung(): TSMitteilung {\n        return this.currentMitteilung;\n    }\n\n    /**\n     * Speichert die aktuelle Mitteilung als gesendet.\n     */\n    public sendMitteilung(): IPromise<TSMitteilung> {\n        if (this.form.$invalid) {\n            EbeguUtil.selectFirstInvalid();\n            return undefined;\n        }\n        if (!this.isMitteilungEmpty()) {\n            return this.mitteilungRS.sendMitteilung(this.getCurrentMitteilung()).then((response) => {\n                this.loadEntwurf();\n                this.loadAllMitteilungen();\n                return this.currentMitteilung;\n            }).finally(() => {\n                this.form.$setPristine();\n                this.form.$setUntouched();\n            });\n        } else {\n            return this.$q.when(this.currentMitteilung);\n        }\n    }\n\n    /**\n     * Speichert die aktuelle Mitteilung nur wenn das formular dirty ist.\n     * Wenn das Formular leer ist, wird der Entwurf geloescht (falls er bereits existiert)\n     */\n    public saveEntwurf(): IPromise<TSMitteilung> {\n        if (((this.form.$dirty && !this.isMitteilungEmpty()))) {\n            return this.mitteilungRS.saveEntwurf(this.getCurrentMitteilung()).then((response) => {\n                this.loadEntwurf();\n                this.loadAllMitteilungen();\n                return this.currentMitteilung;\n            }).finally(() => {\n                this.form.$setPristine();\n                this.form.$setUntouched();\n            });\n\n        } else if (this.isMitteilungEmpty() && !this.currentMitteilung.isNew() && this.currentMitteilung.id) {\n            return this.mitteilungRS.removeEntwurf(this.getCurrentMitteilung()).then((response) => {\n                this.initMitteilungForCurrentBenutzer();\n                return this.currentMitteilung;\n            });\n        } else {\n            return this.$q.when(this.currentMitteilung);\n        }\n    }\n\n    private isMitteilungEmpty() {\n        return (!this.currentMitteilung.message || this.currentMitteilung.message.length <= 0)\n            && (!this.currentMitteilung.subject || this.currentMitteilung.subject.length <= 0);\n    }\n\n    private loadAllMitteilungen(): void {\n        if (this.betreuung) {\n            this.mitteilungRS.getMitteilungenForCurrentRolleForBetreuung(this.betreuung.id).then((response) => {\n                this.allMitteilungen = response;\n            });\n        } else {\n            this.mitteilungRS.getMitteilungenForCurrentRolleForFall(this.fall.id).then((response) => {\n                this.allMitteilungen = response;\n            });\n        }\n    }\n\n    /**\n     * Gibt true zurueck wenn der aktuelle BenutzerTyp, der Sender der uebergenenen Mitteilung ist.\n     */\n    private isCurrentUserTypTheSenderTyp(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && this.authServiceRS.getPrincipal()\n            && mitteilung.senderTyp === this.getMitteilungTeilnehmerTypForUserRole(this.authServiceRS.getPrincipal().role);\n    }\n\n    public isSenderTypInstitution(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp.INSTITUTION;\n    }\n\n    public isSenderTypSchulamt(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp.JUGENDAMT\n            && mitteilung.getSenderAmt() === TSAmt.SCHULAMT;\n    }\n\n    public isSenderTypJugendamt(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp.JUGENDAMT\n            && mitteilung.getSenderAmt() === TSAmt.JUGENDAMT;\n    }\n\n    public isSenderTypGesuchsteller(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n    }\n\n    private getMitteilungTeilnehmerTypForUserRole(role: TSRole): TSMitteilungTeilnehmerTyp {\n        switch (role) {\n            case TSRole.GESUCHSTELLER: {\n                return TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n            }\n            case TSRole.SACHBEARBEITER_INSTITUTION:\n            case TSRole.SACHBEARBEITER_TRAEGERSCHAFT: {\n                return TSMitteilungTeilnehmerTyp.INSTITUTION;\n            }\n            case TSRole.SUPER_ADMIN:\n            case TSRole.ADMIN:\n            case TSRole.JURIST:\n            case TSRole.REVISOR:\n            case TSRole.SACHBEARBEITER_JA:\n            case TSRole.SCHULAMT:\n            case TSRole.ADMINISTRATOR_SCHULAMT: {\n                return TSMitteilungTeilnehmerTyp.JUGENDAMT;\n            }\n            default:\n                return null;\n        }\n    }\n\n    private setAllMitteilungenGelesen(): IPromise<Array<TSMitteilung>> {\n        return this.mitteilungRS.setAllNewMitteilungenOfFallGelesen(this.fall.id);\n    }\n\n    /**\n     * Aendert den Status der gegebenen Mitteilung auf ERLEDIGT wenn es GELESEN war oder\n     * auf GELESEN wenn es ERLEDIGT war\n     */\n    public setErledigt(mitteilung: TSMitteilung): void {\n        if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus.GELESEN) {\n            mitteilung.mitteilungStatus = TSMitteilungStatus.ERLEDIGT;\n            this.mitteilungRS.setMitteilungErledigt(mitteilung.id);\n\n        } else if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus.ERLEDIGT) {\n            mitteilung.mitteilungStatus = TSMitteilungStatus.GELESEN;\n            this.mitteilungRS.setMitteilungGelesen(mitteilung.id);\n        }\n    }\n\n    public isStatusErledigtGelesen(mitteilung: TSMitteilung): boolean {\n        return mitteilung && (mitteilung.mitteilungStatus === TSMitteilungStatus.ERLEDIGT || mitteilung.mitteilungStatus === TSMitteilungStatus.GELESEN);\n    }\n\n    public getBgNummer(): string {\n        let bgNummer: string = '';\n        if (this.betreuung) {\n            bgNummer = this.ebeguUtil.calculateBetreuungsId(this.betreuung.gesuchsperiode, this.fall, this.betreuung.kindNummer, this.betreuung.betreuungNummer);\n        }\n        return bgNummer;\n    }\n\n    public betreuungAsString(mitteilung: TSMitteilung): string {\n        let betreuungAsString: string;\n        if (mitteilung.betreuung) {\n            let bgNummer: string = this.ebeguUtil.calculateBetreuungsId(mitteilung.betreuung.gesuchsperiode, mitteilung.fall,\n                mitteilung.betreuung.kindNummer, mitteilung.betreuung.betreuungNummer);\n            betreuungAsString = mitteilung.betreuung.kindFullname + ', ' + bgNummer;\n        }\n        return betreuungAsString;\n    }\n\n    public gotoBetreuung(mitteilung: TSMitteilung): void {\n        this.$state.go('gesuch.betreuung', {\n            betreuungNumber: mitteilung.betreuung.betreuungNummer,\n            kindNumber: mitteilung.betreuung.kindNummer,\n            gesuchId: mitteilung.betreuung.gesuchId\n        });\n    }\n\n    public isBetreuungsmitteilungApplied(mitteilung: TSMitteilung): boolean {\n        return (mitteilung instanceof TSBetreuungsmitteilung) && (<TSBetreuungsmitteilung>mitteilung).applied === true;\n    }\n\n    public isBetreuungsmitteilungNotApplied(mitteilung: TSMitteilung): boolean {\n        return (mitteilung instanceof TSBetreuungsmitteilung) && (<TSBetreuungsmitteilung>mitteilung).applied !== true;\n    }\n\n    public canApplyBetreuungsmitteilung(mitteilung: TSMitteilung): boolean {\n        return this.authServiceRS.isOneOfRoles(TSRoleUtil.getAdministratorOrAmtRole());\n    }\n\n    $postLink() {\n        this.$timeout(() => {\n            EbeguUtil.selectFirst();\n        }, 200);\n    }\n\n    public applyBetreuungsmitteilung(mitteilung: TSMitteilung): void {\n        if (mitteilung instanceof TSBetreuungsmitteilung) {\n            this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController, {\n                title: 'MUTATIONSMELDUNG_UEBERNEHMEN',\n                deleteText: 'MUTATIONSMELDUNG_UEBERNEHMEN_BESCHREIBUNG',\n                parentController: this,\n                elementID: 'Intro'\n            }).then(() => {   //User confirmed message\n                let betreuungsmitteilung: TSBetreuungsmitteilung = <TSBetreuungsmitteilung>mitteilung;\n                this.mitteilungRS.applyBetreuungsmitteilung(betreuungsmitteilung.id).then((response: any) => { // JaxID kommt als response\n                    this.loadAllMitteilungen();\n                    if (response.id === this.gesuchModelManager.getGesuch().id) {\n                        // Dies wird gebraucht wenn das Gesuch der Mitteilung schon geladen ist, weil die Daten der\n                        // Betreuung geaendert wurden und deshalb neugeladen werden müssen. reloadGesuch ist einfacher\n                        // als die entsprechende Betreuung neu zu laden\n                        this.gesuchModelManager.reloadGesuch();\n                    } else if (response.id) { // eine neue Mutation wurde aus der Muttationsmitteilung erstellt\n                        // informieren, dass eine neue Mutation erstellt wurde\n                        this.$rootScope.$broadcast(TSMitteilungEvent[TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], 'Mutationsmitteilung einer neuen Mutation hinzugefuegt');\n                    }\n                });\n            });\n        }\n    }\n\n    public mitteilungUebergebenAnJugendamt(mitteilung: TSMitteilung): void {\n        this.mitteilungRS.mitteilungUebergebenAnJugendamt(mitteilung.id).then(msg => {\n            this.ebeguUtil.replaceElementInList(msg, this.allMitteilungen, false);\n        });\n    }\n\n    public mitteilungUebergebenAnSchulamt(mitteilung: TSMitteilung): void {\n        this.mitteilungRS.mitteilungUebergebenAnSchulamt(mitteilung.id).then(msg => {\n            this.ebeguUtil.replaceElementInList(msg, this.allMitteilungen, false);\n        });\n    }\n\n    public isMessageEditableForMyRole(mitteilung: TSMitteilung): boolean {\n        // Ich darf die Mitteilung auf Gelesen setzen oder Delegieren, wenn ich der gleichen Empfängergruppe wie die Meldung selber angehöre\n        return this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt.JUGENDAMT) ||\n            this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt.SCHULAMT);\n    }\n\n    public canUebergebenAnSchulamt(mitteilung: TSMitteilung): boolean {\n        return this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt.JUGENDAMT) && !mitteilung.isErledigt();\n    }\n\n    public canUebergebenAnJugendamt(mitteilung: TSMitteilung): boolean {\n        return this.isUserAndEmpfaengerSameAmt(mitteilung, TSAmt.SCHULAMT) && !mitteilung.isErledigt();\n    }\n\n    private isUserAndEmpfaengerSameAmt(mitteilung: TSMitteilung, amt: TSAmt): boolean {\n        let userInAmt: boolean = this.authServiceRS.getPrincipal().amt === amt;\n        let empfaengerInAmt: boolean = mitteilung.getEmpfaengerAmt() === amt;\n        return userInAmt && empfaengerInAmt;\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts","mtime":1518535855212},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\", \"../../../utils/TSRoleUtil\", \"../../../models/TSMitteilung\", \"../../../models/enums/TSMitteilungStatus\", \"../../../models/enums/TSMitteilungTeilnehmerTyp\", \"../../../models/enums/TSRole\", \"../../../utils/EbeguUtil\", \"../../../models/TSBetreuungsmitteilung\", \"../../../gesuch/dialog/RemoveDialogController\", \"../../../models/enums/TSMitteilungEvent\"], function (require, exports, TSRoleUtil_1, TSMitteilung_1, TSMitteilungStatus_1, TSMitteilungTeilnehmerTyp_1, TSRole_1, EbeguUtil_1, TSBetreuungsmitteilung_1, RemoveDialogController_1, TSMitteilungEvent_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var template = require('./dv-mitteilung-list.html');\n    require('./dv-mitteilung-list.less');\n    var removeDialogTemplate = require('../../../gesuch/dialog/removeDialogTemplate.html');\n    var DVMitteilungListConfig = /** @class */ (function () {\n        function DVMitteilungListConfig() {\n            this.transclude = false;\n            this.bindings = {\n                fall: '<',\n                betreuung: '<',\n                form: '<',\n            };\n            this.template = template;\n            this.controller = DVMitteilungListController;\n            this.controllerAs = 'vm';\n        }\n        return DVMitteilungListConfig;\n    }());\n    exports.DVMitteilungListConfig = DVMitteilungListConfig;\n    var DVMitteilungListController = /** @class */ (function () {\n        /* @ngInject */\n        function DVMitteilungListController($stateParams, mitteilungRS, authServiceRS, fallRS, betreuungRS, $q, $window, $rootScope, $state, ebeguUtil, DvDialog, gesuchModelManager, $scope, $timeout) {\n            this.$stateParams = $stateParams;\n            this.mitteilungRS = mitteilungRS;\n            this.authServiceRS = authServiceRS;\n            this.fallRS = fallRS;\n            this.betreuungRS = betreuungRS;\n            this.$q = $q;\n            this.$window = $window;\n            this.$rootScope = $rootScope;\n            this.$state = $state;\n            this.DvDialog = DvDialog;\n            this.gesuchModelManager = gesuchModelManager;\n            this.$scope = $scope;\n            this.$timeout = $timeout;\n            this.TSRole = TSRole_1.TSRole;\n            this.TSRoleUtil = TSRoleUtil_1.TSRoleUtil;\n            this.ebeguUtil = ebeguUtil;\n        }\n        DVMitteilungListController.prototype.$onInit = function () {\n            var _this = this;\n            if (this.$stateParams.mitteilungId) {\n                // wenn man eine bestimmte Mitteilung oeffnen will, kann man ihr ID als parameter geben\n                this.paramSelectedMitteilungId = this.$stateParams.mitteilungId;\n            }\n            if (this.$stateParams.fallId) {\n                this.fallRS.findFall(this.$stateParams.fallId).then(function (response) {\n                    _this.fall = response;\n                    if (_this.$stateParams.betreuungId) {\n                        _this.betreuungRS.findBetreuung(_this.$stateParams.betreuungId).then(function (response) {\n                            _this.betreuung = response;\n                            _this.loadEntwurf();\n                            _this.loadAllMitteilungen();\n                        });\n                    }\n                    else {\n                        _this.loadEntwurf();\n                        // Wenn JA oder Institution -> Neue Mitteilungen als gelesen markieren\n                        if (_this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerJugendamtRoles())) {\n                            _this.setAllMitteilungenGelesen().then(function (response) {\n                                _this.loadAllMitteilungen();\n                                if (_this.$rootScope) {\n                                    _this.$rootScope.$emit('POSTEINGANG_MAY_CHANGED', null);\n                                }\n                            });\n                        }\n                        else {\n                            // Fuer Revisor und Jurist: Nur laden\n                            _this.loadAllMitteilungen();\n                        }\n                    }\n                });\n            }\n            this.$scope.$on(TSMitteilungEvent_1.TSMitteilungEvent[TSMitteilungEvent_1.TSMitteilungEvent.MUTATIONSMITTEILUNG_MUTATION_REMOVED], function () {\n                _this.loadAllMitteilungen();\n            });\n        };\n        DVMitteilungListController.prototype.cancel = function () {\n            this.form.$setPristine();\n            this.$window.history.back();\n        };\n        /**\n         * Diese Methode laedt einen Entwurf wenn es einen existiert. Sonst gibt sie eine leeren\n         * Mitteilung zurueck.\n         */\n        DVMitteilungListController.prototype.loadEntwurf = function () {\n            var _this = this;\n            // Wenn der Fall keinen Besitzer hat, darf auch keine Nachricht geschrieben werden\n            // Ausser wir sind Institutionsbenutzer\n            var isGesuchsteller = this.authServiceRS.isRole(TSRole_1.TSRole.GESUCHSTELLER);\n            var isJugendamtAndFallHasBesitzer = this.fall.besitzer && this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAdministratorJugendamtRole());\n            var isInstitutionsUser = this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles());\n            if (isGesuchsteller || isJugendamtAndFallHasBesitzer || isInstitutionsUser) {\n                if (this.betreuung) {\n                    this.mitteilungRS.getEntwurfForCurrentRolleForBetreuung(this.betreuung.id).then(function (entwurf) {\n                        if (entwurf) {\n                            _this.currentMitteilung = entwurf;\n                        }\n                        else {\n                            _this.initMitteilungForCurrentBenutzer();\n                        }\n                    });\n                }\n                else {\n                    this.mitteilungRS.getEntwurfForCurrentRolleForFall(this.fall.id).then(function (entwurf) {\n                        if (entwurf) {\n                            _this.currentMitteilung = entwurf;\n                        }\n                        else {\n                            _this.initMitteilungForCurrentBenutzer();\n                        }\n                    });\n                }\n            }\n        };\n        DVMitteilungListController.prototype.initMitteilungForCurrentBenutzer = function () {\n            var currentUser = this.authServiceRS.getPrincipal();\n            //common attributes\n            this.currentMitteilung = new TSMitteilung_1.default();\n            this.currentMitteilung.fall = this.fall;\n            if (this.betreuung) {\n                this.currentMitteilung.betreuung = this.betreuung;\n            }\n            this.currentMitteilung.mitteilungStatus = TSMitteilungStatus_1.TSMitteilungStatus.ENTWURF;\n            this.currentMitteilung.sender = currentUser;\n        };\n        DVMitteilungListController.prototype.getCurrentMitteilung = function () {\n            return this.currentMitteilung;\n        };\n        /**\n         * Speichert die aktuelle Mitteilung als gesendet.\n         */\n        DVMitteilungListController.prototype.sendMitteilung = function () {\n            var _this = this;\n            if (this.form.$invalid) {\n                EbeguUtil_1.default.selectFirstInvalid();\n                return undefined;\n            }\n            if (!this.isMitteilungEmpty()) {\n                return this.mitteilungRS.sendMitteilung(this.getCurrentMitteilung()).then(function (response) {\n                    _this.loadEntwurf();\n                    _this.loadAllMitteilungen();\n                    return _this.currentMitteilung;\n                }).finally(function () {\n                    _this.form.$setPristine();\n                    _this.form.$setUntouched();\n                });\n            }\n            else {\n                return this.$q.when(this.currentMitteilung);\n            }\n        };\n        /**\n         * Speichert die aktuelle Mitteilung nur wenn das formular dirty ist.\n         * Wenn das Formular leer ist, wird der Entwurf geloescht (falls er bereits existiert)\n         */\n        DVMitteilungListController.prototype.saveEntwurf = function () {\n            var _this = this;\n            if (((this.form.$dirty && !this.isMitteilungEmpty()))) {\n                return this.mitteilungRS.saveEntwurf(this.getCurrentMitteilung()).then(function (response) {\n                    _this.loadEntwurf();\n                    _this.loadAllMitteilungen();\n                    return _this.currentMitteilung;\n                }).finally(function () {\n                    _this.form.$setPristine();\n                    _this.form.$setUntouched();\n                });\n            }\n            else if (this.isMitteilungEmpty() && !this.currentMitteilung.isNew() && this.currentMitteilung.id) {\n                return this.mitteilungRS.removeEntwurf(this.getCurrentMitteilung()).then(function (response) {\n                    _this.initMitteilungForCurrentBenutzer();\n                    return _this.currentMitteilung;\n                });\n            }\n            else {\n                return this.$q.when(this.currentMitteilung);\n            }\n        };\n        DVMitteilungListController.prototype.isMitteilungEmpty = function () {\n            return (!this.currentMitteilung.message || this.currentMitteilung.message.length <= 0)\n                && (!this.currentMitteilung.subject || this.currentMitteilung.subject.length <= 0);\n        };\n        DVMitteilungListController.prototype.loadAllMitteilungen = function () {\n            var _this = this;\n            if (this.betreuung) {\n                this.mitteilungRS.getMitteilungenForCurrentRolleForBetreuung(this.betreuung.id).then(function (response) {\n                    _this.allMitteilungen = response;\n                });\n            }\n            else {\n                this.mitteilungRS.getMitteilungenForCurrentRolleForFall(this.fall.id).then(function (response) {\n                    _this.allMitteilungen = response;\n                });\n            }\n        };\n        /**\n         * Gibt true zurueck wenn der aktuelle BenutzerTyp, der Sender der uebergenenen Mitteilung ist.\n         */\n        DVMitteilungListController.prototype.isCurrentUserTypTheSenderTyp = function (mitteilung) {\n            return mitteilung && mitteilung.sender && this.authServiceRS.getPrincipal()\n                && mitteilung.senderTyp === this.getMitteilungTeilnehmerTypForUserRole(this.authServiceRS.getPrincipal().role);\n        };\n        DVMitteilungListController.prototype.isSenderTypInstitution = function (mitteilung) {\n            return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.INSTITUTION;\n        };\n        DVMitteilungListController.prototype.isSenderTypJugendamt = function (mitteilung) {\n            return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.JUGENDAMT;\n        };\n        DVMitteilungListController.prototype.isSenderTypGesuchsteller = function (mitteilung) {\n            return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n        };\n        DVMitteilungListController.prototype.getMitteilungTeilnehmerTypForUserRole = function (role) {\n            switch (role) {\n                case TSRole_1.TSRole.GESUCHSTELLER: {\n                    return TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n                }\n                case TSRole_1.TSRole.SACHBEARBEITER_INSTITUTION:\n                case TSRole_1.TSRole.SACHBEARBEITER_TRAEGERSCHAFT: {\n                    return TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.INSTITUTION;\n                }\n                case TSRole_1.TSRole.SUPER_ADMIN:\n                case TSRole_1.TSRole.ADMIN:\n                case TSRole_1.TSRole.JURIST:\n                case TSRole_1.TSRole.REVISOR:\n                case TSRole_1.TSRole.SACHBEARBEITER_JA: {\n                    return TSMitteilungTeilnehmerTyp_1.TSMitteilungTeilnehmerTyp.JUGENDAMT;\n                }\n                default:\n                    return null;\n            }\n        };\n        DVMitteilungListController.prototype.setAllMitteilungenGelesen = function () {\n            return this.mitteilungRS.setAllNewMitteilungenOfFallGelesen(this.fall.id);\n        };\n        /**\n         * Aendert den Status der gegebenen Mitteilung auf ERLEDIGT wenn es GELESEN war oder\n         * auf GELESEN wenn es ERLEDIGT war\n         */\n        DVMitteilungListController.prototype.setErledigt = function (mitteilung) {\n            if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.GELESEN) {\n                mitteilung.mitteilungStatus = TSMitteilungStatus_1.TSMitteilungStatus.ERLEDIGT;\n                this.mitteilungRS.setMitteilungErledigt(mitteilung.id);\n            }\n            else if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.ERLEDIGT) {\n                mitteilung.mitteilungStatus = TSMitteilungStatus_1.TSMitteilungStatus.GELESEN;\n                this.mitteilungRS.setMitteilungGelesen(mitteilung.id);\n            }\n        };\n        DVMitteilungListController.prototype.isStatusErledigtGelesen = function (mitteilung) {\n            return mitteilung && (mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.ERLEDIGT || mitteilung.mitteilungStatus === TSMitteilungStatus_1.TSMitteilungStatus.GELESEN);\n        };\n        DVMitteilungListController.prototype.getBgNummer = function () {\n            var bgNummer = '';\n            if (this.betreuung) {\n                bgNummer = this.ebeguUtil.calculateBetreuungsId(this.betreuung.gesuchsperiode, this.fall, this.betreuung.kindNummer, this.betreuung.betreuungNummer);\n            }\n            return bgNummer;\n        };\n        DVMitteilungListController.prototype.betreuungAsString = function (mitteilung) {\n            var betreuungAsString;\n            if (mitteilung.betreuung) {\n                var bgNummer = this.ebeguUtil.calculateBetreuungsId(mitteilung.betreuung.gesuchsperiode, mitteilung.fall, mitteilung.betreuung.kindNummer, mitteilung.betreuung.betreuungNummer);\n                betreuungAsString = mitteilung.betreuung.kindFullname + ', ' + bgNummer;\n            }\n            return betreuungAsString;\n        };\n        DVMitteilungListController.prototype.gotoBetreuung = function (mitteilung) {\n            this.$state.go('gesuch.betreuung', {\n                betreuungNumber: mitteilung.betreuung.betreuungNummer,\n                kindNumber: mitteilung.betreuung.kindNummer,\n                gesuchId: mitteilung.betreuung.gesuchId\n            });\n        };\n        DVMitteilungListController.prototype.isBetreuungsmitteilungApplied = function (mitteilung) {\n            return (mitteilung instanceof TSBetreuungsmitteilung_1.default) && mitteilung.applied === true;\n        };\n        DVMitteilungListController.prototype.isBetreuungsmitteilungNotApplied = function (mitteilung) {\n            return (mitteilung instanceof TSBetreuungsmitteilung_1.default) && mitteilung.applied !== true;\n        };\n        DVMitteilungListController.prototype.canApplyBetreuungsmitteilung = function (mitteilung) {\n            return this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAdministratorJugendamtRole());\n        };\n        DVMitteilungListController.prototype.$postLink = function () {\n            this.$timeout(function () {\n                EbeguUtil_1.default.selectFirst();\n            }, 200);\n        };\n        DVMitteilungListController.prototype.applyBetreuungsmitteilung = function (mitteilung) {\n            var _this = this;\n            if (mitteilung instanceof TSBetreuungsmitteilung_1.default) {\n                this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController_1.RemoveDialogController, {\n                    title: 'MUTATIONSMELDUNG_UEBERNEHMEN',\n                    deleteText: 'MUTATIONSMELDUNG_UEBERNEHMEN_BESCHREIBUNG',\n                    parentController: this,\n                    elementID: 'Intro'\n                }).then(function () {\n                    var betreuungsmitteilung = mitteilung;\n                    _this.mitteilungRS.applyBetreuungsmitteilung(betreuungsmitteilung.id).then(function (response) {\n                        _this.loadAllMitteilungen();\n                        if (response.id === _this.gesuchModelManager.getGesuch().id) {\n                            // Dies wird gebraucht wenn das Gesuch der Mitteilung schon geladen ist, weil die Daten der\n                            // Betreuung geaendert wurden und deshalb neugeladen werden müssen. reloadGesuch ist einfacher\n                            // als die entsprechende Betreuung neu zu laden\n                            _this.gesuchModelManager.reloadGesuch();\n                        }\n                        else if (response.id) {\n                            // informieren, dass eine neue Mutation erstellt wurde\n                            _this.$rootScope.$broadcast(TSMitteilungEvent_1.TSMitteilungEvent[TSMitteilungEvent_1.TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], 'Mutationsmitteilung einer neuen Mutation hinzugefuegt');\n                        }\n                    });\n                });\n            }\n        };\n        DVMitteilungListController.$inject = ['$stateParams', 'MitteilungRS', 'AuthServiceRS', 'FallRS', 'BetreuungRS',\n            '$q', '$window', '$rootScope', '$state', 'EbeguUtil', 'DvDialog', 'GesuchModelManager', '$scope', '$timeout'];\n        return DVMitteilungListController;\n    }());\n    exports.DVMitteilungListController = DVMitteilungListController;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/component/dv-mitteilung-list/dv-mitteilung-list.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions, IPromise, ITimeoutService} from 'angular';\nimport {TSRoleUtil} from '../../../utils/TSRoleUtil';\nimport TSMitteilung from '../../../models/TSMitteilung';\nimport {TSMitteilungStatus} from '../../../models/enums/TSMitteilungStatus';\nimport {TSMitteilungTeilnehmerTyp} from '../../../models/enums/TSMitteilungTeilnehmerTyp';\nimport {TSRole} from '../../../models/enums/TSRole';\nimport TSFall from '../../../models/TSFall';\nimport TSBetreuung from '../../../models/TSBetreuung';\nimport {IMitteilungenStateParams} from '../../../mitteilungen/mitteilungen.route';\nimport MitteilungRS from '../../service/mitteilungRS.rest';\nimport AuthServiceRS from '../../../authentication/service/AuthServiceRS.rest';\nimport BetreuungRS from '../../service/betreuungRS.rest';\nimport FallRS from '../../../gesuch/service/fallRS.rest';\nimport TSUser from '../../../models/TSUser';\nimport {IStateService} from 'angular-ui-router';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport TSBetreuungsmitteilung from '../../../models/TSBetreuungsmitteilung';\nimport {DvDialog} from '../../directive/dv-dialog/dv-dialog';\nimport {RemoveDialogController} from '../../../gesuch/dialog/RemoveDialogController';\nimport GesuchModelManager from '../../../gesuch/service/gesuchModelManager';\nimport {TSMitteilungEvent} from '../../../models/enums/TSMitteilungEvent';\nimport IFormController = angular.IFormController;\nimport IQService = angular.IQService;\nimport IWindowService = angular.IWindowService;\nimport IRootScopeService = angular.IRootScopeService;\nimport IScope = angular.IScope;\nlet template = require('./dv-mitteilung-list.html');\nrequire('./dv-mitteilung-list.less');\nlet removeDialogTemplate = require('../../../gesuch/dialog/removeDialogTemplate.html');\n\nexport class DVMitteilungListConfig implements IComponentOptions {\n    transclude = false;\n\n    bindings: any = {\n        fall: '<',\n        betreuung: '<',\n        form: '<',\n    };\n\n    template = template;\n    controller = DVMitteilungListController;\n    controllerAs = 'vm';\n}\n\nexport class DVMitteilungListController {\n\n    fall: TSFall;\n    betreuung: TSBetreuung;\n    form: IFormController;\n\n    paramSelectedMitteilungId: string;\n    currentMitteilung: TSMitteilung;\n    allMitteilungen: Array<TSMitteilung>;\n    TSRole: any;\n    TSRoleUtil: any;\n    ebeguUtil: EbeguUtil;\n\n    static $inject: any[] = ['$stateParams', 'MitteilungRS', 'AuthServiceRS', 'FallRS', 'BetreuungRS',\n        '$q', '$window', '$rootScope', '$state', 'EbeguUtil', 'DvDialog', 'GesuchModelManager', '$scope', '$timeout'];\n    /* @ngInject */\n    constructor(private $stateParams: IMitteilungenStateParams, private mitteilungRS: MitteilungRS,\n                private authServiceRS: AuthServiceRS,\n                private fallRS: FallRS, private betreuungRS: BetreuungRS, private $q: IQService,\n                private $window: IWindowService,\n                private $rootScope: IRootScopeService, private $state: IStateService, ebeguUtil: EbeguUtil,\n                private DvDialog: DvDialog,\n                private gesuchModelManager: GesuchModelManager, private $scope: IScope,\n                private $timeout: ITimeoutService) {\n        this.TSRole = TSRole;\n        this.TSRoleUtil = TSRoleUtil;\n        this.ebeguUtil = ebeguUtil;\n    }\n\n    $onInit() {\n        if (this.$stateParams.mitteilungId) {\n            // wenn man eine bestimmte Mitteilung oeffnen will, kann man ihr ID als parameter geben\n            this.paramSelectedMitteilungId = this.$stateParams.mitteilungId;\n        }\n        if (this.$stateParams.fallId) {\n            this.fallRS.findFall(this.$stateParams.fallId).then((response) => {\n                this.fall = response;\n                if (this.$stateParams.betreuungId) {\n                    this.betreuungRS.findBetreuung(this.$stateParams.betreuungId).then((response) => {\n                        this.betreuung = response;\n                        this.loadEntwurf();\n                        this.loadAllMitteilungen();\n                    });\n                } else {\n                    this.loadEntwurf();\n                    // Wenn JA oder Institution -> Neue Mitteilungen als gelesen markieren\n                    if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerJugendamtRoles())) {\n                        this.setAllMitteilungenGelesen().then((response) => {\n                            this.loadAllMitteilungen();\n                            if (this.$rootScope) {\n                                this.$rootScope.$emit('POSTEINGANG_MAY_CHANGED', null);\n                            }\n                        });\n                    } else {\n                        // Fuer Revisor und Jurist: Nur laden\n                        this.loadAllMitteilungen();\n                    }\n                }\n            });\n        }\n        this.$scope.$on(TSMitteilungEvent[TSMitteilungEvent.MUTATIONSMITTEILUNG_MUTATION_REMOVED], () => {\n            this.loadAllMitteilungen();\n        });\n    }\n\n    public cancel(): void {\n        this.form.$setPristine();\n        this.$window.history.back();\n    }\n\n    /**\n     * Diese Methode laedt einen Entwurf wenn es einen existiert. Sonst gibt sie eine leeren\n     * Mitteilung zurueck.\n     */\n    private loadEntwurf() {\n        // Wenn der Fall keinen Besitzer hat, darf auch keine Nachricht geschrieben werden\n        // Ausser wir sind Institutionsbenutzer\n        let isGesuchsteller: boolean = this.authServiceRS.isRole(TSRole.GESUCHSTELLER);\n        let isJugendamtAndFallHasBesitzer: boolean = this.fall.besitzer && this.authServiceRS.isOneOfRoles(TSRoleUtil.getAdministratorJugendamtRole());\n        let isInstitutionsUser: boolean = this.authServiceRS.isOneOfRoles(TSRoleUtil.getTraegerschaftInstitutionOnlyRoles());\n        if (isGesuchsteller || isJugendamtAndFallHasBesitzer || isInstitutionsUser) {\n            if (this.betreuung) {\n                this.mitteilungRS.getEntwurfForCurrentRolleForBetreuung(this.betreuung.id).then((entwurf: TSMitteilung) => {\n                    if (entwurf) {\n                        this.currentMitteilung = entwurf;\n                    } else {\n                        this.initMitteilungForCurrentBenutzer();\n                    }\n                });\n            } else {\n                this.mitteilungRS.getEntwurfForCurrentRolleForFall(this.fall.id).then((entwurf: TSMitteilung) => {\n                    if (entwurf) {\n                        this.currentMitteilung = entwurf;\n                    } else {\n                        this.initMitteilungForCurrentBenutzer();\n                    }\n                });\n            }\n        }\n    }\n\n    private initMitteilungForCurrentBenutzer() {\n        let currentUser: TSUser = this.authServiceRS.getPrincipal();\n\n        //common attributes\n        this.currentMitteilung = new TSMitteilung();\n        this.currentMitteilung.fall = this.fall;\n        if (this.betreuung) {\n            this.currentMitteilung.betreuung = this.betreuung;\n        }\n        this.currentMitteilung.mitteilungStatus = TSMitteilungStatus.ENTWURF;\n        this.currentMitteilung.sender = currentUser;\n    }\n\n    public getCurrentMitteilung(): TSMitteilung {\n        return this.currentMitteilung;\n    }\n\n    /**\n     * Speichert die aktuelle Mitteilung als gesendet.\n     */\n    public sendMitteilung(): IPromise<TSMitteilung> {\n        if (this.form.$invalid) {\n            EbeguUtil.selectFirstInvalid();\n            return undefined;\n        }\n        if (!this.isMitteilungEmpty()) {\n            return this.mitteilungRS.sendMitteilung(this.getCurrentMitteilung()).then((response) => {\n                this.loadEntwurf();\n                this.loadAllMitteilungen();\n                return this.currentMitteilung;\n            }).finally(() => {\n                this.form.$setPristine();\n                this.form.$setUntouched();\n            });\n        } else {\n            return this.$q.when(this.currentMitteilung);\n        }\n    }\n\n    /**\n     * Speichert die aktuelle Mitteilung nur wenn das formular dirty ist.\n     * Wenn das Formular leer ist, wird der Entwurf geloescht (falls er bereits existiert)\n     */\n    public saveEntwurf(): IPromise<TSMitteilung> {\n        if (((this.form.$dirty && !this.isMitteilungEmpty()))) {\n            return this.mitteilungRS.saveEntwurf(this.getCurrentMitteilung()).then((response) => {\n                this.loadEntwurf();\n                this.loadAllMitteilungen();\n                return this.currentMitteilung;\n            }).finally(() => {\n                this.form.$setPristine();\n               this.form.$setUntouched();\n            });\n\n        } else if (this.isMitteilungEmpty() && !this.currentMitteilung.isNew() && this.currentMitteilung.id) {\n            return this.mitteilungRS.removeEntwurf(this.getCurrentMitteilung()).then((response) => {\n                this.initMitteilungForCurrentBenutzer();\n                return this.currentMitteilung;\n            });\n        } else {\n            return this.$q.when(this.currentMitteilung);\n        }\n    }\n\n    private isMitteilungEmpty() {\n        return (!this.currentMitteilung.message || this.currentMitteilung.message.length <= 0)\n            && (!this.currentMitteilung.subject || this.currentMitteilung.subject.length <= 0);\n    }\n\n    private loadAllMitteilungen(): void {\n        if (this.betreuung) {\n            this.mitteilungRS.getMitteilungenForCurrentRolleForBetreuung(this.betreuung.id).then((response) => {\n                this.allMitteilungen = response;\n            });\n        } else {\n            this.mitteilungRS.getMitteilungenForCurrentRolleForFall(this.fall.id).then((response) => {\n                this.allMitteilungen = response;\n            });\n        }\n    }\n\n    /**\n     * Gibt true zurueck wenn der aktuelle BenutzerTyp, der Sender der uebergenenen Mitteilung ist.\n     */\n    private isCurrentUserTypTheSenderTyp(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && this.authServiceRS.getPrincipal()\n            && mitteilung.senderTyp === this.getMitteilungTeilnehmerTypForUserRole(this.authServiceRS.getPrincipal().role);\n    }\n\n    public isSenderTypInstitution(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp.INSTITUTION;\n    }\n\n    public isSenderTypJugendamt(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp.JUGENDAMT;\n    }\n\n    public isSenderTypGesuchsteller(mitteilung: TSMitteilung): boolean {\n        return mitteilung && mitteilung.sender && mitteilung.senderTyp === TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n    }\n\n    private getMitteilungTeilnehmerTypForUserRole(role: TSRole): TSMitteilungTeilnehmerTyp {\n        switch (role) {\n            case TSRole.GESUCHSTELLER: {\n                return TSMitteilungTeilnehmerTyp.GESUCHSTELLER;\n            }\n            case TSRole.SACHBEARBEITER_INSTITUTION:\n            case TSRole.SACHBEARBEITER_TRAEGERSCHAFT: {\n                return TSMitteilungTeilnehmerTyp.INSTITUTION;\n            }\n            case TSRole.SUPER_ADMIN:\n            case TSRole.ADMIN:\n            case TSRole.JURIST:\n            case TSRole.REVISOR:\n            case TSRole.SACHBEARBEITER_JA: {\n                return TSMitteilungTeilnehmerTyp.JUGENDAMT;\n            }\n            default:\n                return null;\n        }\n    }\n\n    private setAllMitteilungenGelesen(): IPromise<Array<TSMitteilung>> {\n        return this.mitteilungRS.setAllNewMitteilungenOfFallGelesen(this.fall.id);\n    }\n\n    /**\n     * Aendert den Status der gegebenen Mitteilung auf ERLEDIGT wenn es GELESEN war oder\n     * auf GELESEN wenn es ERLEDIGT war\n     */\n    public setErledigt(mitteilung: TSMitteilung): void {\n        if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus.GELESEN) {\n            mitteilung.mitteilungStatus = TSMitteilungStatus.ERLEDIGT;\n            this.mitteilungRS.setMitteilungErledigt(mitteilung.id);\n\n        } else if (mitteilung && mitteilung.mitteilungStatus === TSMitteilungStatus.ERLEDIGT) {\n            mitteilung.mitteilungStatus = TSMitteilungStatus.GELESEN;\n            this.mitteilungRS.setMitteilungGelesen(mitteilung.id);\n        }\n    }\n\n    public isStatusErledigtGelesen(mitteilung: TSMitteilung): boolean {\n        return mitteilung && (mitteilung.mitteilungStatus === TSMitteilungStatus.ERLEDIGT || mitteilung.mitteilungStatus === TSMitteilungStatus.GELESEN);\n    }\n\n    public getBgNummer(): string {\n        let bgNummer: string = '';\n        if (this.betreuung) {\n            bgNummer = this.ebeguUtil.calculateBetreuungsId(this.betreuung.gesuchsperiode, this.fall, this.betreuung.kindNummer, this.betreuung.betreuungNummer);\n        }\n        return bgNummer;\n    }\n\n    public betreuungAsString(mitteilung: TSMitteilung): string {\n        let betreuungAsString: string;\n        if (mitteilung.betreuung) {\n            let bgNummer: string = this.ebeguUtil.calculateBetreuungsId(mitteilung.betreuung.gesuchsperiode, mitteilung.fall,\n                mitteilung.betreuung.kindNummer, mitteilung.betreuung.betreuungNummer);\n            betreuungAsString = mitteilung.betreuung.kindFullname + ', ' + bgNummer;\n        }\n        return betreuungAsString;\n    }\n\n    public gotoBetreuung(mitteilung: TSMitteilung): void {\n        this.$state.go('gesuch.betreuung', {\n            betreuungNumber: mitteilung.betreuung.betreuungNummer,\n            kindNumber: mitteilung.betreuung.kindNummer,\n            gesuchId: mitteilung.betreuung.gesuchId\n        });\n    }\n\n    public isBetreuungsmitteilungApplied(mitteilung: TSMitteilung): boolean {\n        return (mitteilung instanceof TSBetreuungsmitteilung) && (<TSBetreuungsmitteilung>mitteilung).applied === true;\n    }\n\n    public isBetreuungsmitteilungNotApplied(mitteilung: TSMitteilung): boolean {\n        return (mitteilung instanceof TSBetreuungsmitteilung) && (<TSBetreuungsmitteilung>mitteilung).applied !== true;\n    }\n\n    public canApplyBetreuungsmitteilung(mitteilung: TSMitteilung): boolean {\n        return this.authServiceRS.isOneOfRoles(TSRoleUtil.getAdministratorJugendamtRole());\n    }\n\n    $postLink() {\n        this.$timeout(() => {\n            EbeguUtil.selectFirst();\n        }, 200);\n    }\n\n    public applyBetreuungsmitteilung(mitteilung: TSMitteilung): void {\n        if (mitteilung instanceof TSBetreuungsmitteilung) {\n            this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController, {\n                title: 'MUTATIONSMELDUNG_UEBERNEHMEN',\n                deleteText: 'MUTATIONSMELDUNG_UEBERNEHMEN_BESCHREIBUNG',\n                parentController: this,\n                elementID: 'Intro'\n            }).then(() => {   //User confirmed message\n                let betreuungsmitteilung: TSBetreuungsmitteilung = <TSBetreuungsmitteilung>mitteilung;\n                this.mitteilungRS.applyBetreuungsmitteilung(betreuungsmitteilung.id).then((response: any) => { // JaxID kommt als response\n                    this.loadAllMitteilungen();\n                    if (response.id === this.gesuchModelManager.getGesuch().id) {\n                        // Dies wird gebraucht wenn das Gesuch der Mitteilung schon geladen ist, weil die Daten der\n\t\t\t\t\t\t// Betreuung geaendert wurden und deshalb neugeladen werden müssen. reloadGesuch ist einfacher\n\t\t\t\t\t\t// als die entsprechende Betreuung neu zu laden\n                        this.gesuchModelManager.reloadGesuch();\n                    } else if (response.id) { // eine neue Mutation wurde aus der Muttationsmitteilung erstellt\n                        // informieren, dass eine neue Mutation erstellt wurde\n                        this.$rootScope.$broadcast(TSMitteilungEvent[TSMitteilungEvent.MUTATIONSMITTEILUNG_NEUE_MUTATION], 'Mutationsmitteilung einer neuen Mutation hinzugefuegt');\n                    }\n                });\n            });\n\n        }\n    }\n}\n"]}]}
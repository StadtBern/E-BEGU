{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/statistik/component/statistikView/statistikView.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/statistik/component/statistikView/statistikView.ts","mtime":1518612642528},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSStatistikParameter_1 = require(\"../../../models/TSStatistikParameter\");\nvar TSStatistikParameterType_1 = require(\"../../../models/enums/TSStatistikParameterType\");\nvar TSRole_1 = require(\"../../../models/enums/TSRole\");\nvar TSRoleUtil_1 = require(\"../../../utils/TSRoleUtil\");\nvar DateUtil_1 = require(\"../../../utils/DateUtil\");\nvar template = require('./statistikView.html');\nrequire('./statistikView.less');\nvar StatistikViewComponentConfig = /** @class */ (function () {\n    function StatistikViewComponentConfig() {\n        this.transclude = false;\n        this.template = template;\n        this.controller = StatistikViewController;\n        this.controllerAs = 'vm';\n    }\n    return StatistikViewComponentConfig;\n}());\nexports.StatistikViewComponentConfig = StatistikViewComponentConfig;\nvar StatistikViewController = /** @class */ (function () {\n    function StatistikViewController($state, gesuchsperiodeRS, $log, reportRS, downloadRS, bachJobRS, errorService, $translate, $interval) {\n        this.$state = $state;\n        this.gesuchsperiodeRS = gesuchsperiodeRS;\n        this.$log = $log;\n        this.reportRS = reportRS;\n        this.downloadRS = downloadRS;\n        this.bachJobRS = bachJobRS;\n        this.errorService = errorService;\n        this.$translate = $translate;\n        this.$interval = $interval;\n        this.DATE_PARAM_FORMAT = 'YYYY-MM-DD';\n    }\n    StatistikViewController.prototype.$onInit = function () {\n        var _this = this;\n        this._statistikParameter = new TSStatistikParameter_1.default();\n        this.gesuchsperiodeRS.getAllGesuchsperioden().then(function (response) {\n            _this._gesuchsperioden = response;\n            if (_this._gesuchsperioden.length > 0) {\n                _this.maxDate = _this._gesuchsperioden[0].gueltigkeit.gueltigBis;\n                _this.minDate = DateUtil_1.default.localDateToMoment('2017-01-01');\n            }\n        });\n        this.TSRole = TSRole_1.TSRole;\n        this.TSRoleUtil = TSRoleUtil_1.TSRoleUtil;\n        this.refreshUserJobs();\n        this.initBatchJobPolling();\n    };\n    StatistikViewController.prototype.initBatchJobPolling = function () {\n        var _this = this;\n        //check all 8 seconds for the state\n        this.$interval(function () { return _this.refreshUserJobs(); }, 8000);\n    };\n    StatistikViewController.prototype.refreshUserJobs = function () {\n        var _this = this;\n        this.bachJobRS.getBatchJobsOfUser().then(function (response) {\n            _this.userjobs = response;\n        });\n    };\n    StatistikViewController.prototype.generateStatistik = function (form, type) {\n        var _this = this;\n        if (form.$valid) {\n            var tmpType = TSStatistikParameterType_1.TSStatistikParameterType[type];\n            tmpType ? this.$log.debug('Statistik Type: ' + tmpType) : this.$log.debug('default, Type not recognized');\n            this.$log.debug('Validated Form: ' + form.$name);\n            switch (tmpType) {\n                case TSStatistikParameterType_1.TSStatistikParameterType.GESUCH_STICHTAG: {\n                    this.reportRS.getGesuchStichtagReportExcel(this._statistikParameter.stichtag.format(this.DATE_PARAM_FORMAT), this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                        .then(function (batchExecutionId) {\n                        _this.$log.debug('executionID: ' + batchExecutionId);\n                        var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                        _this.errorService.addMesageAsInfo(startmsg);\n                    })\n                        .catch(function (ex) {\n                        _this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                    break;\n                }\n                case TSStatistikParameterType_1.TSStatistikParameterType.GESUCH_ZEITRAUM: {\n                    this.reportRS.getGesuchZeitraumReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT), this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT), this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                        .then(function (batchExecutionId) {\n                        _this.$log.debug('executionID: ' + batchExecutionId);\n                        var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                        _this.errorService.addMesageAsInfo(startmsg);\n                    })\n                        .catch(function (ex) {\n                        _this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                    break;\n                }\n                case TSStatistikParameterType_1.TSStatistikParameterType.KINDER: {\n                    this.reportRS.getKinderReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT), this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT), this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                        .then(function (batchExecutionId) {\n                        _this.$log.debug('executionID: ' + batchExecutionId);\n                        var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                        _this.errorService.addMesageAsInfo(startmsg);\n                    })\n                        .catch(function (ex) {\n                        _this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                    break;\n                }\n                case TSStatistikParameterType_1.TSStatistikParameterType.GESUCHSTELLER: {\n                    this.reportRS.getGesuchstellerReportExcel(this._statistikParameter.stichtag.format(this.DATE_PARAM_FORMAT))\n                        .then(function (batchExecutionId) {\n                        _this.$log.debug('executionID: ' + batchExecutionId);\n                        var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                        _this.errorService.addMesageAsInfo(startmsg);\n                    })\n                        .catch(function (ex) {\n                        _this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                    break;\n                }\n                case TSStatistikParameterType_1.TSStatistikParameterType.KANTON: {\n                    this.reportRS.getKantonReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT), this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT))\n                        .then(function (batchExecutionId) {\n                        _this.$log.debug('executionID: ' + batchExecutionId);\n                        var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                        _this.errorService.addMesageAsInfo(startmsg);\n                    })\n                        .catch(function (ex) {\n                        _this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                    break;\n                }\n                case TSStatistikParameterType_1.TSStatistikParameterType.MITARBEITERINNEN: {\n                    this.reportRS.getMitarbeiterinnenReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT), this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT))\n                        .then(function (batchExecutionId) {\n                        _this.$log.debug('executionID: ' + batchExecutionId);\n                        var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                        _this.errorService.addMesageAsInfo(startmsg);\n                    })\n                        .catch(function (ex) {\n                        _this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                    break;\n                }\n                case TSStatistikParameterType_1.TSStatistikParameterType.GESUCHSTELLER_KINDER_BETREUUNG: {\n                    this.reportRS.getGesuchstellerKinderBetreuungReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT), this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT), this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                        .then(function (batchExecutionId) {\n                        _this.$log.debug('executionID: ' + batchExecutionId);\n                        var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                        _this.errorService.addMesageAsInfo(startmsg);\n                    })\n                        .catch(function (ex) {\n                        _this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                    break;\n                }\n                case TSStatistikParameterType_1.TSStatistikParameterType.ZAHLUNGEN_PERIODE:\n                    if (this._statistikParameter.gesuchsperiode) {\n                        this.reportRS.getZahlungPeriodeReportExcel(this._statistikParameter.gesuchsperiode)\n                            .then(function (batchExecutionId) {\n                            _this.$log.debug('executionID: ' + batchExecutionId);\n                            var startmsg = _this.$translate.instant('STARTED_GENERATION');\n                            _this.errorService.addMesageAsInfo(startmsg);\n                        })\n                            .catch(function (ex) {\n                            _this.$log.error('An error occurred downloading the document, closing download window.');\n                        });\n                    }\n                    else {\n                        this.$log.warn('gesuchsperiode muss gewählt sein');\n                    }\n                    break;\n                default:\n                    this.$log.debug('default, Type not recognized');\n                    break;\n            }\n        }\n    };\n    Object.defineProperty(StatistikViewController.prototype, \"statistikParameter\", {\n        get: function () {\n            return this._statistikParameter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StatistikViewController.prototype, \"gesuchsperioden\", {\n        get: function () {\n            return this._gesuchsperioden;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StatistikViewController.prototype.rowClicked = function (row) {\n        if (row !== null && row !== undefined && row.execution !== undefined && row.execution !== null) {\n            if (row.execution.endTime !== null || row.execution.endTime !== undefined) {\n                var win = this.downloadRS.prepareDownloadWindow();\n                this.$log.debug('accessToken: ' + row.resultData);\n                this.downloadRS.startDownload(row.resultData, 'report.xlsx', false, win);\n            }\n            else {\n                this.$log.info('batch-job is not yet finnished');\n            }\n        }\n    };\n    /**\n     * helper methode die es dem Admin erlaubt alle jobs zu sehen\n     */\n    StatistikViewController.prototype.showAllJobs = function () {\n        var _this = this;\n        this.bachJobRS.getAllJobs().then(function (result) {\n            var res = [];\n            res = res.concat(result.map(function (value) {\n                return value.execution || undefined;\n            }));\n            _this.allJobs = res;\n        });\n    };\n    StatistikViewController.$inject = ['$state', 'GesuchsperiodeRS', '$log', 'ReportAsyncRS', 'DownloadRS', 'BatchJobRS',\n        'ErrorService', '$translate', '$interval'];\n    return StatistikViewController;\n}());\nexports.StatistikViewController = StatistikViewController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/statistik/component/statistikView/statistikView.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/statistik/component/statistikView/statistikView.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IComponentOptions, IIntervalService} from 'angular';\nimport {IStateService} from 'angular-ui-router';\nimport TSStatistikParameter from '../../../models/TSStatistikParameter';\nimport {TSStatistikParameterType} from '../../../models/enums/TSStatistikParameterType';\nimport TSGesuchsperiode from '../../../models/TSGesuchsperiode';\nimport GesuchsperiodeRS from '../../../core/service/gesuchsperiodeRS.rest';\nimport {TSRole} from '../../../models/enums/TSRole';\nimport {TSRoleUtil} from '../../../utils/TSRoleUtil';\nimport {DownloadRS} from '../../../core/service/downloadRS.rest';\nimport * as moment from 'moment';\nimport DateUtil from '../../../utils/DateUtil';\nimport {ReportAsyncRS} from '../../../core/service/reportAsyncRS.rest';\nimport ErrorService from '../../../core/errors/service/ErrorService';\nimport BatchJobRS from '../../../core/service/batchRS.rest';\nimport TSWorkJob from '../../../models/TSWorkJob';\nimport TSBatchJobInformation from '../../../models/TSBatchJobInformation';\nimport IFormController = angular.IFormController;\nimport ILogService = angular.ILogService;\nimport Moment = moment.Moment;\nimport ITranslateService = angular.translate.ITranslateService;\n\nlet template = require('./statistikView.html');\nrequire('./statistikView.less');\n\nexport class StatistikViewComponentConfig implements IComponentOptions {\n    transclude = false;\n    template = template;\n    controller = StatistikViewController;\n    controllerAs = 'vm';\n}\n\nexport class StatistikViewController {\n    private _statistikParameter: TSStatistikParameter;\n    private _gesuchsperioden: Array<TSGesuchsperiode>;\n    TSRole: any;\n    TSRoleUtil: any;\n    private DATE_PARAM_FORMAT: string = 'YYYY-MM-DD';\n    // Statistiken sind nur moeglich ab Beginn der fruehesten Periode bis Ende der letzten Periode\n    private maxDate: Moment;\n    private minDate: Moment;\n    private userjobs: Array<TSWorkJob>;\n    private allJobs: Array<TSBatchJobInformation>;\n\n    static $inject: string[] = ['$state', 'GesuchsperiodeRS', '$log', 'ReportAsyncRS', 'DownloadRS', 'BatchJobRS',\n        'ErrorService', '$translate', '$interval'];\n\n    constructor(private $state: IStateService, private gesuchsperiodeRS: GesuchsperiodeRS, private $log: ILogService,\n        private reportRS: ReportAsyncRS, private downloadRS: DownloadRS, private bachJobRS: BatchJobRS, private errorService: ErrorService,\n        private $translate: ITranslateService, private $interval: IIntervalService) {\n    }\n\n    $onInit() {\n        this._statistikParameter = new TSStatistikParameter();\n        this.gesuchsperiodeRS.getAllGesuchsperioden().then((response: any) => {\n            this._gesuchsperioden = response;\n            if (this._gesuchsperioden.length > 0) {\n                this.maxDate = this._gesuchsperioden[0].gueltigkeit.gueltigBis;\n                this.minDate = DateUtil.localDateToMoment('2017-01-01');\n            }\n        });\n        this.TSRole = TSRole;\n        this.TSRoleUtil = TSRoleUtil;\n\n        this.refreshUserJobs();\n        this.initBatchJobPolling();\n    }\n\n    private initBatchJobPolling() {\n        //check all 8 seconds for the state\n        this.$interval(() => this.refreshUserJobs(), 8000);\n    }\n\n    private refreshUserJobs() {\n        this.bachJobRS.getBatchJobsOfUser().then((response: TSWorkJob[]) => {\n            this.userjobs = response;\n        });\n    }\n\n    public generateStatistik(form: IFormController, type?: TSStatistikParameterType): void {\n        if (form.$valid) {\n            let tmpType = (<any>TSStatistikParameterType)[type];\n            tmpType ? this.$log.debug('Statistik Type: ' + tmpType) : this.$log.debug('default, Type not recognized');\n            this.$log.debug('Validated Form: ' + form.$name);\n\n            switch (tmpType) {\n            case TSStatistikParameterType.GESUCH_STICHTAG: {\n                this.reportRS.getGesuchStichtagReportExcel(this._statistikParameter.stichtag.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                .then((batchExecutionId: string) => {\n                    this.$log.debug('executionID: ' + batchExecutionId);\n                    let startmsg = this.$translate.instant('STARTED_GENERATION');\n                    this.errorService.addMesageAsInfo(startmsg);\n                })\n                .catch((ex: any) => {\n                    this.$log.error('An error occurred downloading the document, closing download window.');\n                });\n                break;\n            }\n            case TSStatistikParameterType.GESUCH_ZEITRAUM: {\n                this.reportRS.getGesuchZeitraumReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                .then((batchExecutionId: string) => {\n                    this.$log.debug('executionID: ' + batchExecutionId);\n                    let startmsg = this.$translate.instant('STARTED_GENERATION');\n                    this.errorService.addMesageAsInfo(startmsg);\n                })\n                .catch((ex) => {\n                    this.$log.error('An error occurred downloading the document, closing download window.');\n                });\n                break;\n            }\n            case TSStatistikParameterType.KINDER: {\n                this.reportRS.getKinderReportExcel(\n                    this._statistikParameter.von.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                .then((batchExecutionId: string) => {\n                    this.$log.debug('executionID: ' + batchExecutionId);\n                    let startmsg = this.$translate.instant('STARTED_GENERATION');\n                    this.errorService.addMesageAsInfo(startmsg);\n                })\n                .catch((ex) => {\n                    this.$log.error('An error occurred downloading the document, closing download window.');\n                });\n                break;\n            }\n            case TSStatistikParameterType.GESUCHSTELLER: {\n                this.reportRS.getGesuchstellerReportExcel(this._statistikParameter.stichtag.format(this.DATE_PARAM_FORMAT))\n                .then((batchExecutionId: string) => {\n                    this.$log.debug('executionID: ' + batchExecutionId);\n                    let startmsg = this.$translate.instant('STARTED_GENERATION');\n                    this.errorService.addMesageAsInfo(startmsg);\n                })\n                .catch((ex) => {\n                    this.$log.error('An error occurred downloading the document, closing download window.');\n                });\n                break;\n            }\n            case TSStatistikParameterType.KANTON: {\n                this.reportRS.getKantonReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT))\n                .then((batchExecutionId: string) => {\n                    this.$log.debug('executionID: ' + batchExecutionId);\n                    let startmsg = this.$translate.instant('STARTED_GENERATION');\n                    this.errorService.addMesageAsInfo(startmsg);\n                })\n                .catch((ex) => {\n                    this.$log.error('An error occurred downloading the document, closing download window.');\n                });\n                break;\n            }\n            case TSStatistikParameterType.MITARBEITERINNEN: {\n                this.reportRS.getMitarbeiterinnenReportExcel(this._statistikParameter.von.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT))\n                .then((batchExecutionId: string) => {\n                    this.$log.debug('executionID: ' + batchExecutionId);\n                    let startmsg = this.$translate.instant('STARTED_GENERATION');\n                    this.errorService.addMesageAsInfo(startmsg);\n                })\n                .catch((ex) => {\n                    this.$log.error('An error occurred downloading the document, closing download window.');\n                });\n                break;\n            }\n            case TSStatistikParameterType.GESUCHSTELLER_KINDER_BETREUUNG: {\n                this.reportRS.getGesuchstellerKinderBetreuungReportExcel(\n                    this._statistikParameter.von.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.bis.format(this.DATE_PARAM_FORMAT),\n                    this._statistikParameter.gesuchsperiode ? this._statistikParameter.gesuchsperiode.toString() : null)\n                .then((batchExecutionId: string) => {\n                    this.$log.debug('executionID: ' + batchExecutionId);\n                    let startmsg = this.$translate.instant('STARTED_GENERATION');\n                    this.errorService.addMesageAsInfo(startmsg);\n                })\n                .catch((ex) => {\n                    this.$log.error('An error occurred downloading the document, closing download window.');\n                });\n                break;\n            }\n            case TSStatistikParameterType.ZAHLUNGEN_PERIODE:\n                if (this._statistikParameter.gesuchsperiode) {\n                    this.reportRS.getZahlungPeriodeReportExcel(\n                        this._statistikParameter.gesuchsperiode)\n                    .then((batchExecutionId: string) => {\n                        this.$log.debug('executionID: ' + batchExecutionId);\n                        let startmsg = this.$translate.instant('STARTED_GENERATION');\n                        this.errorService.addMesageAsInfo(startmsg);\n                    })\n                    .catch((ex) => {\n                        this.$log.error('An error occurred downloading the document, closing download window.');\n                    });\n                } else {\n                    this.$log.warn('gesuchsperiode muss gewählt sein');\n                }\n                break;\n            default:\n                this.$log.debug('default, Type not recognized');\n                break;\n            }\n        }\n    }\n\n    get statistikParameter(): TSStatistikParameter {\n        return this._statistikParameter;\n    }\n\n    get gesuchsperioden(): Array<TSGesuchsperiode> {\n        return this._gesuchsperioden;\n    }\n\n    public rowClicked(row: TSWorkJob) {\n        if (row !== null && row !== undefined && row.execution !== undefined && row.execution !== null) {\n            if (row.execution.endTime !== null || row.execution.endTime !== undefined) {\n                let win: Window = this.downloadRS.prepareDownloadWindow();\n                this.$log.debug('accessToken: ' + row.resultData);\n                this.downloadRS.startDownload(row.resultData, 'report.xlsx', false, win);\n            } else {\n                this.$log.info('batch-job is not yet finnished');\n            }\n        }\n    }\n\n    /**\n     * helper methode die es dem Admin erlaubt alle jobs zu sehen\n     */\n    public showAllJobs() {\n        this.bachJobRS.getAllJobs().then((result: TSWorkJob[]) => {\n            let res: TSBatchJobInformation[] = [];\n            res = res.concat(result.map((value) => {\n                return value.execution || undefined;\n            }));\n            this.allJobs = res;\n        });\n    }\n}\n"]}]}
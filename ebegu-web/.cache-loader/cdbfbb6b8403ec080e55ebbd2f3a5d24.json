{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/gesuchModelManager.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/gesuchModelManager.ts","mtime":1518535855232},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\ndefine([\"require\", \"exports\", \"../../models/TSFall\", \"../../models/TSGesuch\", \"../../models/TSGesuchsteller\", \"../../models/TSAdresse\", \"../../models/enums/TSAdressetyp\", \"../../models/TSFamiliensituation\", \"../../utils/DateUtil\", \"../../models/enums/TSBetreuungsstatus\", \"../../models/enums/TSAntragStatus\", \"../../models/enums/TSWizardStepName\", \"../../models/enums/TSWizardStepStatus\", \"../../models/enums/TSAntragTyp\", \"../../utils/EbeguUtil\", \"../../models/TSExceptionReport\", \"../../models/enums/TSErrorType\", \"../../models/enums/TSErrorLevel\", \"../../models/enums/TSRole\", \"../../utils/TSRoleUtil\", \"../../models/enums/TSBetreuungsangebotTyp\", \"../../models/enums/TSEingangsart\", \"../../models/TSEinkommensverschlechterungInfoContainer\", \"../../models/TSFamiliensituationContainer\", \"../../models/TSGesuchstellerContainer\", \"../../models/TSAdresseContainer\", \"../../models/enums/TSAuthEvent\", \"../../models/enums/TSGesuchsperiodeStatus\"], function (require, exports, TSFall_1, TSGesuch_1, TSGesuchsteller_1, TSAdresse_1, TSAdressetyp_1, TSFamiliensituation_1, DateUtil_1, TSBetreuungsstatus_1, TSAntragStatus_1, TSWizardStepName_1, TSWizardStepStatus_1, TSAntragTyp_1, EbeguUtil_1, TSExceptionReport_1, TSErrorType_1, TSErrorLevel_1, TSRole_1, TSRoleUtil_1, TSBetreuungsangebotTyp_1, TSEingangsart_1, TSEinkommensverschlechterungInfoContainer_1, TSFamiliensituationContainer_1, TSGesuchstellerContainer_1, TSAdresseContainer_1, TSAuthEvent_1, TSGesuchsperiodeStatus_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var GesuchModelManager = /** @class */ (function () {\n        /* @ngInject */\n        function GesuchModelManager(familiensituationRS, fallRS, gesuchRS, gesuchstellerRS, finanzielleSituationRS, kindRS, fachstelleRS, erwerbspensumRS, instStamRS, betreuungRS, gesuchsperiodeRS, ebeguRestUtil, log, authServiceRS, einkommensverschlechterungContainerRS, verfuegungRS, wizardStepManager, einkommensverschlechterungInfoRS, antragStatusHistoryRS, ebeguUtil, errorService, adresseRS, $q, CONSTANTS, $rootScope, ewkRS) {\n            var _this = this;\n            this.familiensituationRS = familiensituationRS;\n            this.fallRS = fallRS;\n            this.gesuchRS = gesuchRS;\n            this.gesuchstellerRS = gesuchstellerRS;\n            this.finanzielleSituationRS = finanzielleSituationRS;\n            this.kindRS = kindRS;\n            this.fachstelleRS = fachstelleRS;\n            this.erwerbspensumRS = erwerbspensumRS;\n            this.instStamRS = instStamRS;\n            this.betreuungRS = betreuungRS;\n            this.gesuchsperiodeRS = gesuchsperiodeRS;\n            this.ebeguRestUtil = ebeguRestUtil;\n            this.log = log;\n            this.authServiceRS = authServiceRS;\n            this.einkommensverschlechterungContainerRS = einkommensverschlechterungContainerRS;\n            this.verfuegungRS = verfuegungRS;\n            this.wizardStepManager = wizardStepManager;\n            this.einkommensverschlechterungInfoRS = einkommensverschlechterungInfoRS;\n            this.antragStatusHistoryRS = antragStatusHistoryRS;\n            this.ebeguUtil = ebeguUtil;\n            this.errorService = errorService;\n            this.adresseRS = adresseRS;\n            this.$q = $q;\n            this.CONSTANTS = CONSTANTS;\n            this.$rootScope = $rootScope;\n            this.ewkRS = ewkRS;\n            this.gesuchstellerNumber = 1;\n            this.basisJahrPlusNumber = 1;\n            $rootScope.$on(TSAuthEvent_1.TSAuthEvent[TSAuthEvent_1.TSAuthEvent.LOGOUT_SUCCESS], function () {\n                _this.setGesuch(undefined);\n                _this.log.debug('Cleared gesuch on logout');\n            });\n        }\n        /**\n         * Je nach dem welche Rolle der Benutzer hat, wird das Gesuch aus der DB anders geholt.\n         * Fuer Institutionen z.B. wird das Gesuch nur mit den relevanten Daten geholt\n         */\n        GesuchModelManager.prototype.openGesuch = function (gesuchId) {\n            var _this = this;\n            if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) {\n                return this.gesuchRS.findGesuchForInstitution(gesuchId)\n                    .then(function (response) {\n                    return _this.wizardStepManager.findStepsFromGesuch(gesuchId).then(function (bla) {\n                        if (response) {\n                            _this.setGesuch(response);\n                        }\n                        return response;\n                    });\n                });\n            }\n            else {\n                return this.gesuchRS.findGesuch(gesuchId)\n                    .then(function (response) {\n                    return _this.wizardStepManager.findStepsFromGesuch(gesuchId).then(function (bla) {\n                        if (response) {\n                            _this.setGesuch(response);\n                        }\n                        return response;\n                    });\n                });\n            }\n        };\n        /**\n         * Mit den Daten vom Gesuch, werden die entsprechenden Steps der Liste hiddenSteps hinzugefuegt.\n         * Oder ggf. aus der Liste entfernt (nur public fuer test)\n         */\n        GesuchModelManager.prototype.setHiddenSteps = function () {\n            if (this.gesuch) {\n                //Freigabe\n                if (this.gesuch.isOnlineGesuch()) {\n                    this.wizardStepManager.unhideStep(TSWizardStepName_1.TSWizardStepName.FREIGABE);\n                }\n                else {\n                    this.wizardStepManager.hideStep(TSWizardStepName_1.TSWizardStepName.FREIGABE);\n                }\n                //Abwesenheit\n                if (!this.gesuch.isMutation()) {\n                    this.wizardStepManager.hideStep(TSWizardStepName_1.TSWizardStepName.ABWESENHEIT);\n                }\n                else {\n                    this.wizardStepManager.unhideStep(TSWizardStepName_1.TSWizardStepName.ABWESENHEIT);\n                }\n                //Umzug\n                if (!this.gesuch.isMutation() && !this.getGesuch().isThereAnyUmzug()) {\n                    this.wizardStepManager.hideStep(TSWizardStepName_1.TSWizardStepName.UMZUG);\n                }\n                else {\n                    this.wizardStepManager.unhideStep(TSWizardStepName_1.TSWizardStepName.UMZUG);\n                }\n            }\n        };\n        /**\n         * In dieser Methode wird das Gesuch ersetzt. Das Gesuch ist jetzt private und darf nur ueber diese Methode geaendert werden.\n         *\n         * @param gesuch das Gesuch. Null und undefined werden erlaubt.\n         */\n        GesuchModelManager.prototype.setGesuch = function (gesuch) {\n            this.gesuch = gesuch;\n            if (this.gesuch) {\n                this.wizardStepManager.findStepsFromGesuch(this.gesuch.id);\n                this.setHiddenSteps();\n                // EWK Service mit bereits existierenden Daten initialisieren\n                this.ewkRS.gesuchsteller1 = this.gesuch.gesuchsteller1;\n                this.ewkRS.gesuchsteller2 = this.gesuch.gesuchsteller2;\n            }\n            this.ewkPersonGS1 = undefined;\n            this.ewkPersonGS2 = undefined;\n            this.ewkResultatGS1 = undefined;\n            this.ewkResultatGS2 = undefined;\n        };\n        GesuchModelManager.prototype.getGesuch = function () {\n            return this.gesuch;\n        };\n        /**\n         * Prueft ob der 2. Gesuchtsteller eingetragen werden muss je nach dem was in Familiensituation ausgewaehlt wurde. Wenn es sich\n         * um eine Mutation handelt wird nur geschaut ob der 2GS bereits existiert. Wenn ja, dann wird er benoetigt, da bei Mutationen darf\n         * der 2GS nicht geloescht werden\n         */\n        GesuchModelManager.prototype.isGesuchsteller2Required = function () {\n            if (this.gesuch && this.getFamiliensituation() && this.getFamiliensituation().familienstatus) {\n                return this.getFamiliensituation().hasSecondGesuchsteller()\n                    || (this.gesuch.isMutation() && this.gesuch.gesuchsteller2 != null && this.gesuch.gesuchsteller2 !== undefined);\n            }\n            else {\n                return false;\n            }\n        };\n        GesuchModelManager.prototype.isBasisJahr2Required = function () {\n            return this.getEkvFuerBasisJahrPlus(2);\n        };\n        GesuchModelManager.prototype.isRequiredEKV_GS_BJ = function (gs, bj) {\n            if (gs === 2) {\n                return this.getEkvFuerBasisJahrPlus(bj) && this.isGesuchsteller2Required();\n            }\n            else {\n                return this.getEkvFuerBasisJahrPlus(bj);\n            }\n        };\n        GesuchModelManager.prototype.getFamiliensituation = function () {\n            if (this.gesuch) {\n                return this.gesuch.extractFamiliensituation();\n            }\n            return undefined;\n        };\n        GesuchModelManager.prototype.getFamiliensituationErstgesuch = function () {\n            if (this.gesuch) {\n                return this.gesuch.extractFamiliensituationErstgesuch();\n            }\n            return undefined;\n        };\n        GesuchModelManager.prototype.updateFachstellenList = function () {\n            var _this = this;\n            this.fachstelleRS.getAllFachstellen().then(function (response) {\n                _this.fachstellenList = response;\n            });\n        };\n        /**\n         * Retrieves the list of InstitutionStammdaten for the date of today.\n         */\n        GesuchModelManager.prototype.updateActiveInstitutionenList = function () {\n            var _this = this;\n            this.instStamRS.getAllActiveInstitutionStammdatenByDate(DateUtil_1.default.today()).then(function (response) {\n                _this.activInstitutionenList = response;\n            });\n        };\n        /**\n         * Wenn das Gesuch schon gespeichert ist (timestampErstellt != null), wird dieses nur aktualisiert. Wenn es sich um ein neues Gesuch handelt\n         * dann wird zuerst der Fall erstellt, dieser ins Gesuch kopiert und dann das Gesuch erstellt\n         * @returns {IPromise<TSGesuch>}\n         */\n        GesuchModelManager.prototype.saveGesuchAndFall = function () {\n            var _this = this;\n            if (this.gesuch && this.gesuch.timestampErstellt) {\n                return this.updateGesuch();\n            }\n            else {\n                if (this.gesuch.fall && this.gesuch.fall.timestampErstellt) {\n                    // Fall ist schon vorhanden\n                    return this.gesuchRS.createGesuch(this.gesuch).then(function (gesuchResponse) {\n                        _this.gesuch = gesuchResponse;\n                        return _this.gesuch;\n                    });\n                }\n                else {\n                    return this.fallRS.createFall(this.gesuch.fall).then(function (fallResponse) {\n                        _this.gesuch.fall = angular.copy(fallResponse);\n                        return _this.gesuchRS.createGesuch(_this.gesuch).then(function (gesuchResponse) {\n                            _this.gesuch = gesuchResponse;\n                            return _this.gesuch;\n                        });\n                    });\n                }\n            }\n        };\n        GesuchModelManager.prototype.reloadGesuch = function () {\n            var _this = this;\n            return this.gesuchRS.findGesuch(this.gesuch.id).then(function (gesuchResponse) {\n                _this.setGesuch(gesuchResponse);\n                return _this.gesuch;\n            });\n        };\n        /**\n         * Update das Gesuch\n         * @returns {IPromise<TSGesuch>}\n         */\n        GesuchModelManager.prototype.updateGesuch = function () {\n            var _this = this;\n            return this.gesuchRS.updateGesuch(this.gesuch).then(function (gesuchResponse) {\n                _this.gesuch = gesuchResponse;\n                _this.calculateNewStatus(_this.gesuch.status); // just to be sure that the status has been correctly updated\n                return _this.gesuch;\n            });\n        };\n        /**\n         * Update den Fall\n         * @returns {IPromise<TSFall>}\n         */\n        GesuchModelManager.prototype.updateFall = function () {\n            var _this = this;\n            if (this.gesuch && this.gesuch.fall) {\n                return this.fallRS.updateFall(this.gesuch.fall).then(function (fallResponse) {\n                    var parsedFall = _this.ebeguRestUtil.parseFall(_this.gesuch.fall, fallResponse);\n                    return _this.gesuch.fall = angular.copy(parsedFall);\n                });\n            }\n            else {\n                this.log.warn('Es wurde versucht einen undefined Fall zu speichern');\n                var deferred = this.$q.defer();\n                deferred.resolve(undefined);\n                return deferred.promise;\n            }\n        };\n        /**\n         * Speichert den StammdatenToWorkWith.\n         */\n        GesuchModelManager.prototype.updateGesuchsteller = function (umzug) {\n            var _this = this;\n            // Da showUmzug nicht im Server gespeichert wird, muessen wir den alten Wert kopieren und nach der Aktualisierung wiedersetzen\n            var tempShowUmzug = this.getStammdatenToWorkWith().showUmzug;\n            return this.gesuchstellerRS.saveGesuchsteller(this.getStammdatenToWorkWith(), this.gesuch.id, this.gesuchstellerNumber, umzug)\n                .then(function (gesuchstellerResponse) {\n                _this.setStammdatenToWorkWith(gesuchstellerResponse);\n                return _this.getStammdatenToWorkWith();\n            });\n        };\n        GesuchModelManager.prototype.saveFinanzielleSituation = function () {\n            var _this = this;\n            return this.finanzielleSituationRS.saveFinanzielleSituation(this.getStammdatenToWorkWith().finanzielleSituationContainer, this.getStammdatenToWorkWith().id, this.gesuch.id)\n                .then(function (finSitContRespo) {\n                _this.getStammdatenToWorkWith().finanzielleSituationContainer = finSitContRespo;\n                return _this.getStammdatenToWorkWith().finanzielleSituationContainer;\n            });\n        };\n        GesuchModelManager.prototype.saveEinkommensverschlechterungContainer = function () {\n            var _this = this;\n            return this.einkommensverschlechterungContainerRS.saveEinkommensverschlechterungContainer(this.getStammdatenToWorkWith().einkommensverschlechterungContainer, this.getStammdatenToWorkWith().id, this.gesuch.id)\n                .then(function (ekvContRespo) {\n                _this.getStammdatenToWorkWith().einkommensverschlechterungContainer = ekvContRespo;\n                return _this.getStammdatenToWorkWith().einkommensverschlechterungContainer;\n            });\n        };\n        /**\n         * Gesuchsteller nummer darf nur 1 oder 2 sein. Wenn die uebergebene Nummer nicht 1 oder 2 ist, wird dann 1 gesetzt\n         * @param gsNumber\n         */\n        GesuchModelManager.prototype.setGesuchstellerNumber = function (gsNumber) {\n            if (gsNumber === 1 || gsNumber === 2) {\n                this.gesuchstellerNumber = gsNumber;\n            }\n            else {\n                this.gesuchstellerNumber = 1;\n            }\n        };\n        /**\n         * BasisJahrPlus nummer darf nur 1 oder 2 sein. Wenn die uebergebene Nummer nicht 1 oder 2 ist, wird dann 1 gesetzt\n         * @param bjpNumber\n         */\n        GesuchModelManager.prototype.setBasisJahrPlusNumber = function (bjpNumber) {\n            if (bjpNumber === 1 || bjpNumber === 2) {\n                this.basisJahrPlusNumber = bjpNumber;\n            }\n            else {\n                this.basisJahrPlusNumber = 1;\n            }\n        };\n        /**\n         * Setzt den Kind Index. Dies ist der Index des aktuellen Kindes in der Liste der Kinder\n         * @param kindIndex\n         */\n        GesuchModelManager.prototype.setKindIndex = function (kindIndex) {\n            if (kindIndex >= 0) {\n                this.kindIndex = kindIndex;\n            }\n            else {\n                this.kindIndex = 0;\n            }\n        };\n        /**\n         * Setzt den BetreuungsIndex.\n         * @param betreuungIndex\n         */\n        GesuchModelManager.prototype.setBetreuungIndex = function (betreuungIndex) {\n            if (betreuungIndex >= 0) {\n                this.betreuungIndex = betreuungIndex;\n            }\n            else {\n                this.setKindIndex(0);\n            }\n        };\n        GesuchModelManager.prototype.convertKindNumberToKindIndex = function (kindNumber) {\n            for (var i = 0; i < this.getGesuch().kindContainers.length; i++) {\n                if (this.getGesuch().kindContainers[i].kindNummer === kindNumber) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        GesuchModelManager.prototype.convertBetreuungNumberToBetreuungIndex = function (betreuungNumber) {\n            for (var i = 0; i < this.getKindToWorkWith().betreuungen.length; i++) {\n                if (this.getKindToWorkWith().betreuungen[i].betreuungNummer === betreuungNumber) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        GesuchModelManager.prototype.getFachstellenList = function () {\n            if (this.fachstellenList === undefined) {\n                this.fachstellenList = []; // init empty while we wait for promise\n                this.updateFachstellenList();\n            }\n            return this.fachstellenList;\n        };\n        GesuchModelManager.prototype.getActiveInstitutionenList = function () {\n            if (this.activInstitutionenList === undefined) {\n                this.activInstitutionenList = []; // init empty while we wait for promise\n                this.updateActiveInstitutionenList();\n            }\n            return this.activInstitutionenList;\n        };\n        GesuchModelManager.prototype.getStammdatenToWorkWith = function () {\n            if (this.gesuchstellerNumber === 2) {\n                return this.gesuch.gesuchsteller2;\n            }\n            else {\n                return this.gesuch.gesuchsteller1;\n            }\n        };\n        GesuchModelManager.prototype.getEkvFuerBasisJahrPlus = function (basisJahrPlus) {\n            if (!this.gesuch.extractEinkommensverschlechterungInfo()) {\n                this.initEinkommensverschlechterungInfo();\n            }\n            if (basisJahrPlus === 2) {\n                return this.gesuch.extractEinkommensverschlechterungInfo().ekvFuerBasisJahrPlus2;\n            }\n            else {\n                return this.gesuch.extractEinkommensverschlechterungInfo().ekvFuerBasisJahrPlus1;\n            }\n        };\n        GesuchModelManager.prototype.setStammdatenToWorkWith = function (gesuchsteller) {\n            if (this.gesuchstellerNumber === 1) {\n                return this.gesuch.gesuchsteller1 = gesuchsteller;\n            }\n            else {\n                return this.gesuch.gesuchsteller2 = gesuchsteller;\n            }\n        };\n        GesuchModelManager.prototype.initStammdaten = function () {\n            if (!this.getStammdatenToWorkWith()) {\n                var gesuchsteller = void 0;\n                // die daten die wir aus iam importiert haben werden bei gs1 abgefuellt\n                if (this.gesuchstellerNumber === 1 && this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                    var principal = this.authServiceRS.getPrincipal();\n                    var name = principal ? principal.nachname : undefined;\n                    var vorname = principal ? principal.vorname : undefined;\n                    var email = principal ? principal.email : undefined;\n                    gesuchsteller = new TSGesuchsteller_1.default(vorname, name, undefined, undefined, email);\n                }\n                else {\n                    gesuchsteller = new TSGesuchsteller_1.default();\n                }\n                this.setStammdatenToWorkWith(new TSGesuchstellerContainer_1.default(gesuchsteller));\n                this.getStammdatenToWorkWith().adressen = this.initWohnAdresse();\n            }\n        };\n        GesuchModelManager.prototype.initEinkommensverschlechterungInfo = function () {\n            if (this.gesuch && !this.gesuch.extractEinkommensverschlechterungInfo()) {\n                this.gesuch.einkommensverschlechterungInfoContainer = new TSEinkommensverschlechterungInfoContainer_1.default();\n                this.gesuch.einkommensverschlechterungInfoContainer.init();\n            }\n        };\n        /**\n         * Erstellt ein neues Gesuch und einen neuen Fall. Wenn !forced sie werden nur erstellt wenn das Gesuch noch nicht erstellt wurde i.e. es null/undefined ist\n         * Wenn force werden Gesuch und Fall immer erstellt.\n         */\n        GesuchModelManager.prototype.initGesuch = function (forced, eingangsart) {\n            if (forced || (!forced && !this.gesuch)) {\n                this.initAntrag(TSAntragTyp_1.TSAntragTyp.ERSTGESUCH, eingangsart);\n            }\n            this.antragStatusHistoryRS.loadLastStatusChange(this.getGesuch());\n        };\n        /**\n         * Erstellt ein neues Gesuch mit der angegebenen Eingangsart und Gesuchsperiode. Damit dies im resolve des\n         * routing gemacht werden kann, wird das ganze als promise gehandhabt\n         * @param forced\n         * @param eingangsart\n         * @param gesuchsperiodeId\n         * @param fallId\n         * @return a void promise that is resolved once all subpromises are done\n         */\n        GesuchModelManager.prototype.initGesuchWithEingangsart = function (forced, eingangsart, gesuchsperiodeId, fallId) {\n            var _this = this;\n            this.initGesuch(forced, eingangsart);\n            var setGesuchsperiodeProm;\n            if (gesuchsperiodeId) {\n                setGesuchsperiodeProm = this.gesuchsperiodeRS.findGesuchsperiode(gesuchsperiodeId).then(function (periode) {\n                    _this.gesuch.gesuchsperiode = periode;\n                });\n            }\n            var setFallProm;\n            if (fallId) {\n                setFallProm = this.fallRS.findFall(fallId).then(function (foundFall) {\n                    _this.gesuch.fall = foundFall;\n                });\n            }\n            if (forced) {\n                if (TSEingangsart_1.TSEingangsart.ONLINE === eingangsart) {\n                    this.gesuch.status = TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS;\n                }\n                else {\n                    this.gesuch.status = TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_JA;\n                }\n                //ewk zuruecksetzen\n                if (this.ewkRS) {\n                    this.ewkRS.gesuchsteller1 = undefined;\n                    this.ewkRS.gesuchsteller2 = undefined;\n                }\n            }\n            // this creates a list of promises and resolves them all. once all promises are resolved the .then function is triggered\n            return this.$q.all([setGesuchsperiodeProm, setFallProm]).then(function () {\n                _this.log.debug('initialized new gesuch ', _this.gesuch);\n                return _this.gesuch;\n            });\n        };\n        /**\n         * Diese Methode erstellt eine Fake-Mutation als gesuch fuer das GesuchModelManager. Die Mutation ist noch leer und hat\n         * das ID des Gesuchs aus dem sie erstellt wurde. Wenn der Benutzer auf speichern klickt, wird der Service \"antragMutieren\"\n         * mit dem ID des alten Gesuchs aufgerufen. Das Objekt das man zurueckbekommt, wird dann diese Fake-Mutation mit den richtigen\n         * Daten ueberschreiben\n         * @param gesuchID\n         * @param eingangsart\n         * @param gesuchsperiodeId\n         * @param fallId\n         */\n        GesuchModelManager.prototype.initMutation = function (gesuchID, eingangsart, gesuchsperiodeId, fallId) {\n            this.initCopyOfGesuch(gesuchID, eingangsart, gesuchsperiodeId, fallId, TSAntragTyp_1.TSAntragTyp.MUTATION);\n        };\n        /**\n         * Diese Methode erstellt ein Fake-Erneuerungsgesuch als gesuch fuer das GesuchModelManager. Das Gesuch ist noch leer und hat\n         * das ID des Gesuchs aus dem es erstellt wurde.\n         */\n        GesuchModelManager.prototype.initErneuerungsgesuch = function (gesuchID, eingangsart, gesuchsperiodeId, fallId) {\n            this.initCopyOfGesuch(gesuchID, eingangsart, gesuchsperiodeId, fallId, TSAntragTyp_1.TSAntragTyp.ERNEUERUNGSGESUCH);\n        };\n        GesuchModelManager.prototype.initCopyOfGesuch = function (gesuchID, eingangsart, gesuchsperiodeId, fallId, antragTyp) {\n            var _this = this;\n            this.gesuchsperiodeRS.findGesuchsperiode(gesuchsperiodeId).then(function (periode) {\n                _this.gesuch.gesuchsperiode = periode;\n            });\n            this.initAntrag(antragTyp, eingangsart);\n            this.fallRS.findFall(fallId).then(function (foundFall) {\n                _this.gesuch.fall = foundFall;\n            });\n            this.gesuch.id = gesuchID; //setzen wir das alte gesuchID, um danach im Server die Mutation erstellen zu koennen\n            if (TSEingangsart_1.TSEingangsart.ONLINE === eingangsart) {\n                this.gesuch.status = TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_GS;\n            }\n            else {\n                this.gesuch.status = TSAntragStatus_1.TSAntragStatus.IN_BEARBEITUNG_JA;\n            }\n            this.gesuch.emptyCopy = true;\n        };\n        GesuchModelManager.prototype.initAntrag = function (antragTyp, eingangsart) {\n            this.gesuch = new TSGesuch_1.default();\n            this.gesuch.fall = new TSFall_1.default();\n            this.gesuch.typ = antragTyp; // by default ist es ein Erstgesuch\n            this.gesuch.eingangsart = eingangsart;\n            this.setHiddenSteps();\n            this.wizardStepManager.initWizardSteps();\n            this.setCurrentUserAsFallVerantwortlicher();\n        };\n        GesuchModelManager.prototype.initFamiliensituation = function () {\n            if (!this.getFamiliensituation()) {\n                this.gesuch.familiensituationContainer = new TSFamiliensituationContainer_1.default();\n                this.gesuch.familiensituationContainer.familiensituationJA = new TSFamiliensituation_1.default();\n            }\n        };\n        GesuchModelManager.prototype.initKinder = function () {\n            if (!this.gesuch.kindContainers) {\n                this.gesuch.kindContainers = [];\n            }\n        };\n        /**\n         * Gibt das Jahr des Anfangs der Gesuchsperiode minus 1 zurueck. undefined wenn die Gesuchsperiode nicht richtig gesetzt wurde\n         * @returns {number}\n         */\n        GesuchModelManager.prototype.getBasisjahr = function () {\n            if (this.getGesuchsperiodeBegin()) {\n                return this.getGesuchsperiodeBegin().year() - 1;\n            }\n            return undefined;\n        };\n        /**\n         * Gibt das Jahr des Anfangs der Gesuchsperiode minus 1 zurueck. undefined wenn die Gesuchsperiode nicht richtig gesetzt wurde\n         * @returns {number}\n         */\n        GesuchModelManager.prototype.getBasisjahrPlus = function (plus) {\n            if (this.getGesuchsperiodeBegin()) {\n                return this.getGesuchsperiodeBegin().year() - 1 + plus;\n            }\n            return undefined;\n        };\n        GesuchModelManager.prototype.getBasisjahrToWorkWith = function () {\n            return this.getBasisjahrPlus(this.basisJahrPlusNumber);\n        };\n        /**\n         * Gibt das gesamte Objekt Gesuchsperiode zurueck, das zum Gesuch gehoert.\n         * @returns {any}\n         */\n        GesuchModelManager.prototype.getGesuchsperiode = function () {\n            if (this.gesuch) {\n                return this.gesuch.gesuchsperiode;\n            }\n            return undefined;\n        };\n        /**\n         * Gibt den Anfang der Gesuchsperiode als Moment zurueck\n         * @returns {any}\n         */\n        GesuchModelManager.prototype.getGesuchsperiodeBegin = function () {\n            if (this.getGesuchsperiode() && this.getGesuchsperiode().gueltigkeit) {\n                return this.gesuch.gesuchsperiode.gueltigkeit.gueltigAb;\n            }\n            return undefined;\n        };\n        GesuchModelManager.prototype.initWohnAdresse = function () {\n            var wohnAdresseContanier = new TSAdresseContainer_1.default();\n            var wohnAdresse = new TSAdresse_1.default();\n            wohnAdresse.adresseTyp = TSAdressetyp_1.TSAdressetyp.WOHNADRESSE;\n            wohnAdresseContanier.showDatumVon = false;\n            wohnAdresseContanier.adresseJA = wohnAdresse;\n            return [wohnAdresseContanier];\n        };\n        GesuchModelManager.prototype.getKinderList = function () {\n            if (this.gesuch) {\n                return this.gesuch.kindContainers;\n            }\n            return [];\n        };\n        /**\n         *\n         * @returns {any} Alle KindContainer in denen das Kind Betreuung benoetigt\n         */\n        GesuchModelManager.prototype.getKinderWithBetreuungList = function () {\n            var listResult = [];\n            if (this.gesuch) {\n                listResult = this.gesuch.getKinderWithBetreuungList();\n            }\n            return listResult;\n        };\n        GesuchModelManager.prototype.saveBetreuung = function (betreuungToSave, abwesenheit) {\n            var _this = this;\n            if (betreuungToSave.betreuungsstatus === TSBetreuungsstatus_1.TSBetreuungsstatus.ABGEWIESEN) {\n                return this.betreuungRS.betreuungsPlatzAbweisen(betreuungToSave, this.getKindToWorkWith().id, this.gesuch.id)\n                    .then(function (storedBetreuung) {\n                    return _this.gesuchRS.getGesuchBetreuungenStatus(_this.gesuch.id).then(function (betreuungenStatus) {\n                        _this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                        return _this.handleSavedBetreuung(storedBetreuung);\n                    });\n                });\n            }\n            else if (betreuungToSave.betreuungsstatus === TSBetreuungsstatus_1.TSBetreuungsstatus.BESTAETIGT) {\n                return this.betreuungRS.betreuungsPlatzBestaetigen(betreuungToSave, this.getKindToWorkWith().id, this.gesuch.id)\n                    .then(function (storedBetreuung) {\n                    return _this.gesuchRS.getGesuchBetreuungenStatus(_this.gesuch.id).then(function (betreuungenStatus) {\n                        _this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                        return _this.handleSavedBetreuung(storedBetreuung);\n                    });\n                });\n            }\n            else {\n                return this.betreuungRS.saveBetreuung(betreuungToSave, this.getKindToWorkWith().id, this.gesuch.id, abwesenheit)\n                    .then(function (storedBetreuung) {\n                    return _this.gesuchRS.getGesuchBetreuungenStatus(_this.gesuch.id).then(function (betreuungenStatus) {\n                        _this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                        return _this.handleSavedBetreuung(storedBetreuung);\n                    });\n                });\n            }\n        };\n        GesuchModelManager.prototype.handleSavedBetreuung = function (storedBetreuung) {\n            this.getKindFromServer();\n            if (!storedBetreuung.isNew()) {\n                var i = EbeguUtil_1.default.getIndexOfElementwithID(storedBetreuung, this.getKindToWorkWith().betreuungen);\n                if (i >= 0) {\n                    this.getKindToWorkWith().betreuungen[i] = storedBetreuung;\n                    this.setBetreuungIndex(i);\n                }\n            }\n            else {\n                this.getKindToWorkWith().betreuungen.push(storedBetreuung); //neues kind anfuegen\n                this.setBetreuungIndex(this.getKindToWorkWith().betreuungen.length - 1);\n            }\n            return storedBetreuung;\n        };\n        GesuchModelManager.prototype.saveKind = function (kindToSave) {\n            var _this = this;\n            return this.kindRS.saveKind(kindToSave, this.gesuch.id)\n                .then(function (storedKindCont) {\n                _this.getFallFromServer();\n                if (!kindToSave.isNew()) {\n                    var i = EbeguUtil_1.default.getIndexOfElementwithID(kindToSave, _this.gesuch.kindContainers);\n                    if (i >= 0) {\n                        _this.gesuch.kindContainers[i] = storedKindCont;\n                    }\n                }\n                else {\n                    _this.gesuch.kindContainers.push(storedKindCont); //neues kind anfuegen\n                }\n                return storedKindCont;\n            });\n        };\n        /**\n         * Sucht das KindToWorkWith im Server und aktualisiert es mit dem bekommenen Daten\n         * @returns {IPromise<TSKindContainer>}\n         */\n        GesuchModelManager.prototype.getKindFromServer = function () {\n            var _this = this;\n            return this.kindRS.findKind(this.getKindToWorkWith().id).then(function (kindResponse) {\n                return _this.setKindToWorkWith(kindResponse);\n            });\n        };\n        /**\n         * Sucht das Gesuch im Server und aktualisiert es mit dem bekommenen Daten\n         * @returns {IPromise<void>}\n         */\n        GesuchModelManager.prototype.getFallFromServer = function () {\n            var _this = this;\n            return this.fallRS.findFall(this.gesuch.fall.id).then(function (fallResponse) {\n                return _this.gesuch.fall = fallResponse;\n            });\n        };\n        GesuchModelManager.prototype.getKindToWorkWith = function () {\n            if (this.gesuch && this.gesuch.kindContainers && this.gesuch.kindContainers.length > this.kindIndex) {\n                return this.gesuch.kindContainers[this.kindIndex];\n            }\n            else {\n                this.log.error('kindContainers is not set or kindIndex is out of bounds ' + this.kindIndex);\n            }\n            return undefined;\n        };\n        /**\n         * Sucht im ausgewaehlten Kind (kindIndex) nach der aktuellen Betreuung. Deshalb muessen sowohl\n         * kindIndex als auch betreuungNumber bereits gesetzt sein.\n         * @returns {any}\n         */\n        GesuchModelManager.prototype.getBetreuungToWorkWith = function () {\n            if (this.getKindToWorkWith() && this.getKindToWorkWith().betreuungen.length > this.betreuungIndex) {\n                return this.getKindToWorkWith().betreuungen[this.betreuungIndex];\n            }\n            else {\n                this.log.error('kindToWorkWith is not set or index of betreuung is out of bounds ' + this.betreuungIndex);\n            }\n            return undefined;\n        };\n        /**\n         * Ersetzt das Kind in der aktuelle Position \"kindIndex\" durch das gegebene Kind. Aus diesem Grund muss diese Methode\n         * nur aufgerufen werden, wenn die Position \"kindIndex\" schon richtig gesetzt wurde.\n         * @param kind\n         * @returns {TSKindContainer}\n         */\n        GesuchModelManager.prototype.setKindToWorkWith = function (kind) {\n            return this.gesuch.kindContainers[this.kindIndex] = kind;\n        };\n        /**\n         * Ersetzt die Betreuung in der aktuelle Position \"betreuungIndex\" durch die gegebene Betreuung. Aus diesem Grund muss diese Methode\n         * nur aufgerufen werden, wenn die Position \"betreuungIndex\" schon richtig gesetzt wurde.\n         * @param betreuung\n         * @returns {TSBetreuung}\n         */\n        GesuchModelManager.prototype.setBetreuungToWorkWith = function (betreuung) {\n            return this.getKindToWorkWith().betreuungen[this.betreuungIndex] = betreuung;\n        };\n        /**\n         * Entfernt das aktuelle Kind von der Liste aber nicht von der DB.\n         */\n        GesuchModelManager.prototype.removeKindFromList = function () {\n            this.gesuch.kindContainers.splice(this.kindIndex, 1);\n            this.setKindIndex(undefined); //by default auf undefined setzen\n        };\n        /**\n         * Entfernt die aktuelle Betreuung des aktuellen Kindes von der Liste aber nicht von der DB.\n         */\n        GesuchModelManager.prototype.removeBetreuungFromKind = function () {\n            this.getKindToWorkWith().betreuungen.splice(this.betreuungIndex, 1);\n            this.setBetreuungIndex(undefined); //by default auf undefined setzen\n            // recalculates the current status because a change in a Betreuung could mean a change in the gesuchstatus, for example when\n            // the status was PLATZBESTAETIGUNG_ABGEWIESEN and the declined Platz is removed, the new status should be GEPRUEFT\n            this.getGesuch().status = this.calculateNewStatus(this.getGesuch().status);\n        };\n        GesuchModelManager.prototype.getKindIndex = function () {\n            return this.kindIndex;\n        };\n        GesuchModelManager.prototype.getBetreuungIndex = function () {\n            return this.betreuungIndex;\n        };\n        GesuchModelManager.prototype.getGesuchstellerNumber = function () {\n            return this.gesuchstellerNumber;\n        };\n        GesuchModelManager.prototype.getBasisJahrPlusNumber = function () {\n            return this.basisJahrPlusNumber;\n        };\n        /**\n         * Check whether the Gesuch is already saved in the database.\n         * Case yes the fields shouldn't be editable anymore\n         */\n        GesuchModelManager.prototype.isGesuchSaved = function () {\n            return this.gesuch && (this.gesuch.timestampErstellt !== undefined)\n                && (this.gesuch.timestampErstellt !== null);\n        };\n        /**\n         * Sucht das gegebene KindContainer in der List von KindContainer, erstellt es als KindToWorkWith\n         * und gibt die Position in der Array zurueck. Gibt -1 zurueck wenn das Kind nicht gefunden wurde.\n         * @param kind\n         */\n        GesuchModelManager.prototype.findKind = function (kind) {\n            if (this.gesuch.kindContainers.indexOf(kind) >= 0) {\n                this.setKindIndex(this.gesuch.kindContainers.indexOf(kind));\n                return this.kindIndex;\n            }\n            return -1;\n        };\n        /**\n         * Sucht das Kind mit der eingegebenen KindID in allen KindContainers des Gesuchs. kindIndex wird gesetzt und zurueckgegeben\n         * @param kindID\n         * @returns {number}\n         */\n        GesuchModelManager.prototype.findKindById = function (kindID) {\n            if (this.gesuch.kindContainers) {\n                for (var i = 0; i < this.gesuch.kindContainers.length; i++) {\n                    if (this.gesuch.kindContainers[i].id === kindID) {\n                        this.setKindIndex(i);\n                        return this.kindIndex;\n                    }\n                }\n            }\n            return -1;\n        };\n        GesuchModelManager.prototype.removeKind = function () {\n            var _this = this;\n            return this.kindRS.removeKind(this.getKindToWorkWith().id, this.gesuch.id).then(function (responseKind) {\n                _this.removeKindFromList();\n                return _this.gesuchRS.getGesuchBetreuungenStatus(_this.gesuch.id).then(function (betreuungenStatus) {\n                    _this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                    return _this.updateGesuch();\n                });\n            });\n        };\n        GesuchModelManager.prototype.findBetreuung = function (betreuung) {\n            if (this.getKindToWorkWith() && this.getKindToWorkWith().betreuungen) {\n                this.setBetreuungIndex(this.getKindToWorkWith().betreuungen.indexOf(betreuung));\n                return this.betreuungIndex;\n            }\n            return -1;\n        };\n        /**\n         * Sucht die Betreuung mit der eingegebenen betreuungID in allen Betreuungen des aktuellen Kind. betreuungIndex wird gesetzt und zurueckgegeben\n         * @param betreuungID\n         * @returns {number}\n         */\n        GesuchModelManager.prototype.findBetreuungById = function (betreuungID) {\n            var kindToWorkWith = this.getKindToWorkWith();\n            if (kindToWorkWith) {\n                for (var i = 0; i < kindToWorkWith.betreuungen.length; i++) {\n                    if (kindToWorkWith.betreuungen[i].id === betreuungID) {\n                        this.setBetreuungIndex(i);\n                        return this.betreuungIndex;\n                    }\n                }\n            }\n            return -1;\n        };\n        GesuchModelManager.prototype.removeBetreuung = function () {\n            var _this = this;\n            return this.betreuungRS.removeBetreuung(this.getBetreuungToWorkWith().id, this.gesuch.id).then(function (responseBetreuung) {\n                _this.removeBetreuungFromKind();\n                return _this.gesuchRS.getGesuchBetreuungenStatus(_this.gesuch.id).then(function (betreuungenStatus) {\n                    _this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                    _this.kindRS.saveKind(_this.getKindToWorkWith(), _this.gesuch.id);\n                });\n            });\n        };\n        GesuchModelManager.prototype.removeErwerbspensum = function (pensum) {\n            var erwerbspensenOfCurrentGS;\n            erwerbspensenOfCurrentGS = this.getStammdatenToWorkWith().erwerbspensenContainer;\n            var index = erwerbspensenOfCurrentGS.indexOf(pensum);\n            if (index >= 0) {\n                var pensumToRemove = this.getStammdatenToWorkWith().erwerbspensenContainer[index];\n                if (pensumToRemove.id) {\n                    this.erwerbspensumRS.removeErwerbspensum(pensumToRemove.id, this.getGesuch().id)\n                        .then(function () {\n                        erwerbspensenOfCurrentGS.splice(index, 1);\n                    });\n                }\n                else {\n                    //sonst nur vom gui wegnehmen\n                    erwerbspensenOfCurrentGS.splice(index, 1);\n                }\n            }\n            else {\n                console.log('can not remove Erwerbspensum since it  could not be found in list');\n            }\n        };\n        GesuchModelManager.prototype.findIndexOfErwerbspensum = function (gesuchstellerNumber, pensum) {\n            var gesuchsteller;\n            gesuchsteller = gesuchstellerNumber === 2 ? this.gesuch.gesuchsteller2 : this.gesuch.gesuchsteller1;\n            return gesuchsteller.erwerbspensenContainer.indexOf(pensum);\n        };\n        GesuchModelManager.prototype.saveErwerbspensum = function (gesuchsteller, erwerbspensum) {\n            if (erwerbspensum.id) {\n                return this.erwerbspensumRS.saveErwerbspensum(erwerbspensum, gesuchsteller.id, this.gesuch.id)\n                    .then(function (response) {\n                    var i = EbeguUtil_1.default.getIndexOfElementwithID(erwerbspensum, gesuchsteller.erwerbspensenContainer);\n                    if (i >= 0) {\n                        gesuchsteller.erwerbspensenContainer[i] = erwerbspensum;\n                    }\n                    return response;\n                });\n            }\n            else {\n                return this.erwerbspensumRS.saveErwerbspensum(erwerbspensum, gesuchsteller.id, this.gesuch.id)\n                    .then(function (storedErwerbspensum) {\n                    gesuchsteller.erwerbspensenContainer.push(storedErwerbspensum);\n                    return storedErwerbspensum;\n                });\n            }\n        };\n        /**\n         * Takes current user and sets it as the verantwortlicher of Fall\n         */\n        GesuchModelManager.prototype.setCurrentUserAsFallVerantwortlicher = function () {\n            if (this.authServiceRS && this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getAdministratorJugendamtRole())) {\n                this.setUserAsFallVerantwortlicher(this.authServiceRS.getPrincipal());\n            }\n        };\n        GesuchModelManager.prototype.setUserAsFallVerantwortlicher = function (user) {\n            if (this.gesuch && this.gesuch.fall) {\n                this.gesuch.fall.verantwortlicher = user;\n            }\n        };\n        GesuchModelManager.prototype.getFallVerantwortlicher = function () {\n            if (this.gesuch && this.gesuch.fall) {\n                return this.gesuch.fall.verantwortlicher;\n            }\n            return undefined;\n        };\n        GesuchModelManager.prototype.calculateVerfuegungen = function () {\n            var _this = this;\n            return this.verfuegungRS.calculateVerfuegung(this.gesuch.id)\n                .then(function (response) {\n                _this.updateKinderListWithCalculatedVerfuegungen(response);\n                return;\n            });\n        };\n        GesuchModelManager.prototype.updateKinderListWithCalculatedVerfuegungen = function (kinderWithVerfuegungen) {\n            if (kinderWithVerfuegungen.length !== this.gesuch.kindContainers.length) {\n                var msg = 'ACHTUNG Ungueltiger Zustand, Anzahl zurueckgelieferter Container'\n                    + (kinderWithVerfuegungen.length ? kinderWithVerfuegungen.length : 'no_container')\n                    + 'stimmt nicht mit erwareter ueberein ' + this.gesuch.kindContainers.length;\n                this.log.error(msg);\n                var error = new TSExceptionReport_1.default(TSErrorType_1.TSErrorType.INTERNAL, TSErrorLevel_1.TSErrorLevel.SEVERE, msg, kinderWithVerfuegungen);\n                this.errorService.addDvbError(error);\n            }\n            var numOfAssigned = 0;\n            for (var i = 0; i < this.gesuch.kindContainers.length; i++) {\n                for (var j = 0; j < kinderWithVerfuegungen.length; j++) {\n                    if (this.gesuch.kindContainers[i].id === kinderWithVerfuegungen[j].id) {\n                        numOfAssigned++;\n                        for (var k = 0; k < this.gesuch.kindContainers[i].betreuungen.length; k++) {\n                            if (this.gesuch.kindContainers[i].betreuungen.length !== kinderWithVerfuegungen[j].betreuungen.length) {\n                                var msg = 'ACHTUNG unvorhergesehener Zustand. Anzahl Betreuungen eines Kindes stimmt nicht' +\n                                    ' mit der berechneten Anzahl Betreuungen ueberein; erwartet: ' +\n                                    this.gesuch.kindContainers[i].betreuungen.length + ' erhalten: ' + kinderWithVerfuegungen[j].betreuungen.length;\n                                this.log.error(msg, this.gesuch.kindContainers[i], kinderWithVerfuegungen[j]);\n                                this.errorService.addMesageAsError(msg);\n                            }\n                            this.gesuch.kindContainers[i].betreuungen[k] = kinderWithVerfuegungen[j].betreuungen[k];\n                        }\n                    }\n                }\n            }\n            if (numOfAssigned !== this.gesuch.kindContainers.length) {\n                var msg = 'ACHTUNG unvorhergesehener Zustand. Es konnte nicht jeder calculated Kindcontainer vom Server einem Container auf dem Client zugeordnet werden';\n                this.log.error(msg, this.gesuch.kindContainers, kinderWithVerfuegungen);\n                this.errorService.addMesageAsError(msg);\n            }\n            this.ebeguUtil.handleSmarttablesUpdateBug(this.gesuch.kindContainers);\n        };\n        GesuchModelManager.prototype.saveVerfuegung = function (ignorieren) {\n            var _this = this;\n            return this.verfuegungRS.saveVerfuegung(this.getVerfuegenToWorkWith(), this.gesuch.id, this.getBetreuungToWorkWith().id, ignorieren)\n                .then(function (response) {\n                _this.setVerfuegenToWorkWith(response);\n                _this.getBetreuungToWorkWith().betreuungsstatus = TSBetreuungsstatus_1.TSBetreuungsstatus.VERFUEGT;\n                _this.calculateGesuchStatusVerfuegt();\n                return _this.getVerfuegenToWorkWith();\n            });\n        };\n        GesuchModelManager.prototype.calculateGesuchStatusVerfuegt = function () {\n            if (!this.isThereAnyOpenBetreuung()) {\n                this.gesuch.status = this.calculateNewStatus(TSAntragStatus_1.TSAntragStatus.VERFUEGT);\n            }\n        };\n        GesuchModelManager.prototype.verfuegungSchliessenOhenVerfuegen = function () {\n            var _this = this;\n            return this.verfuegungRS.verfuegungSchliessenOhneVerfuegen(this.gesuch.id, this.getBetreuungToWorkWith().id).then(function (response) {\n                _this.getBetreuungToWorkWith().betreuungsstatus = TSBetreuungsstatus_1.TSBetreuungsstatus.GESCHLOSSEN_OHNE_VERFUEGUNG;\n                _this.calculateGesuchStatusVerfuegt();\n                return;\n            });\n        };\n        GesuchModelManager.prototype.verfuegungSchliessenNichtEintreten = function () {\n            var _this = this;\n            return this.verfuegungRS.nichtEintreten(this.getVerfuegenToWorkWith(), this.gesuch.id, this.getBetreuungToWorkWith().id).then(function (response) {\n                _this.setVerfuegenToWorkWith(response);\n                _this.getBetreuungToWorkWith().betreuungsstatus = TSBetreuungsstatus_1.TSBetreuungsstatus.NICHT_EINGETRETEN;\n                _this.calculateGesuchStatusVerfuegt();\n                return _this.getVerfuegenToWorkWith();\n            });\n        };\n        GesuchModelManager.prototype.getVerfuegenToWorkWith = function () {\n            if (this.getKindToWorkWith() && this.getBetreuungToWorkWith()) {\n                return this.getBetreuungToWorkWith().verfuegung;\n            }\n            return undefined;\n        };\n        GesuchModelManager.prototype.setVerfuegenToWorkWith = function (verfuegung) {\n            if (this.getKindToWorkWith() && this.getBetreuungToWorkWith()) {\n                this.getBetreuungToWorkWith().verfuegung = verfuegung;\n            }\n        };\n        GesuchModelManager.prototype.isThereAnyKindWithBetreuungsbedarf = function () {\n            var kinderList = this.getKinderList();\n            for (var _i = 0, kinderList_1 = kinderList; _i < kinderList_1.length; _i++) {\n                var kind = kinderList_1[_i];\n                //das kind muss schon gespeichert sein damit es zahelt\n                if (kind.kindJA.familienErgaenzendeBetreuung && !kind.kindJA.isNew()) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Gibt true zurueck wenn es mindestens eine Betreuung gibt, dessen Status anders als VERFUEGT oder GESCHLOSSEN_OHNE_VERFUEGUNG oder SCHULAMT ist\n         * @returns {boolean}\n         */\n        GesuchModelManager.prototype.isThereAnyOpenBetreuung = function () {\n            var kinderWithBetreuungList = this.getKinderWithBetreuungList();\n            for (var _i = 0, kinderWithBetreuungList_1 = kinderWithBetreuungList; _i < kinderWithBetreuungList_1.length; _i++) {\n                var kind = kinderWithBetreuungList_1[_i];\n                for (var _a = 0, _b = kind.betreuungen; _a < _b.length; _a++) {\n                    var betreuung = _b[_a];\n                    if (betreuung.betreuungsstatus !== TSBetreuungsstatus_1.TSBetreuungsstatus.SCHULAMT\n                        && betreuung.betreuungsstatus !== TSBetreuungsstatus_1.TSBetreuungsstatus.VERFUEGT\n                        && betreuung.betreuungsstatus !== TSBetreuungsstatus_1.TSBetreuungsstatus.NICHT_EINGETRETEN\n                        && betreuung.betreuungsstatus !== TSBetreuungsstatus_1.TSBetreuungsstatus.GESCHLOSSEN_OHNE_VERFUEGUNG) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        /**\n         * Gibt true zurueck wenn es mindestens eine Betreuung gibt, dessen Status ABGEWIESEN ist\n         * @returns {boolean}\n         */\n        GesuchModelManager.prototype.isThereAnyAbgewieseneBetreuung = function () {\n            var kinderWithBetreuungList = this.getKinderWithBetreuungList();\n            for (var _i = 0, kinderWithBetreuungList_2 = kinderWithBetreuungList; _i < kinderWithBetreuungList_2.length; _i++) {\n                var kind = kinderWithBetreuungList_2[_i];\n                for (var _a = 0, _b = kind.betreuungen; _a < _b.length; _a++) {\n                    var betreuung = _b[_a];\n                    if (betreuung.betreuungsstatus === TSBetreuungsstatus_1.TSBetreuungsstatus.ABGEWIESEN) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        /**\n         * Returns true when all Betreuungen are of kind SCHULAMT.\n         * Returns false also if there are no Kinder with betreuungsbedarf\n         */\n        GesuchModelManager.prototype.areThereOnlySchulamtAngebote = function () {\n            if (!this.gesuch) {\n                return false;\n            }\n            return this.gesuch.areThereOnlySchulamtAngebote();\n        };\n        /**\n         * Returns true when all Betreuungen are of kind SCHULAMT.\n         * Returns false also if there are no Kinder with betreuungsbedarf\n         */\n        GesuchModelManager.prototype.areThereOnlyGeschlossenOhneVerfuegung = function () {\n            if (!this.gesuch) {\n                return false;\n            }\n            return this.gesuch.areThereOnlyGeschlossenOhneVerfuegung();\n        };\n        /**\n         * Returns true when all Betreuungen are of kind SCHULAMT.\n         * Returns false also if there are no Kinder with betreuungsbedarf\n         */\n        GesuchModelManager.prototype.isThereAnySchulamtAngebot = function () {\n            var kinderWithBetreuungList = this.getKinderWithBetreuungList();\n            if (kinderWithBetreuungList.length <= 0) {\n                return false; // no Kind with bedarf\n            }\n            for (var _i = 0, kinderWithBetreuungList_3 = kinderWithBetreuungList; _i < kinderWithBetreuungList_3.length; _i++) {\n                var kind = kinderWithBetreuungList_3[_i];\n                for (var _a = 0, _b = kind.betreuungen; _a < _b.length; _a++) {\n                    var betreuung = _b[_a];\n                    if (TSBetreuungsangebotTyp_1.isSchulamt(betreuung.institutionStammdaten.betreuungsangebotTyp)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        /**\n         * Setzt den Status des Gesuchs und speichert es in der Datenbank. Anstatt das ganze Gesuch zu schicken, rufen wir den Service auf\n         * der den Status aktualisiert und erst wenn das geklappt hat, aktualisieren wir den Status auf dem Client.\n         * Wird nur durchgefuehrt, wenn der gegebene Status nicht der aktuelle Status ist\n         * @param status\n         * @returns {IPromise<TSAntragStatus>}\n         */\n        GesuchModelManager.prototype.saveGesuchStatus = function (status) {\n            var _this = this;\n            if (!this.isGesuchStatus(status)) {\n                return this.gesuchRS.updateGesuchStatus(this.gesuch.id, status).then(function () {\n                    return _this.antragStatusHistoryRS.loadLastStatusChange(_this.getGesuch()).then(function () {\n                        _this.gesuch.status = _this.calculateNewStatus(status);\n                        return _this.gesuch.status;\n                    });\n                });\n            }\n            return undefined;\n        };\n        /**\n         * Antrag freigeben\n         */\n        GesuchModelManager.prototype.antragFreigeben = function (antragId, username) {\n            var _this = this;\n            return this.gesuchRS.antragFreigeben(antragId, username).then(function (response) {\n                _this.setGesuch(response);\n                return response;\n            });\n        };\n        /**\n         * Returns true if the Gesuch has the given status\n         * @param status\n         * @returns {boolean}\n         */\n        GesuchModelManager.prototype.isGesuchStatus = function (status) {\n            return this.gesuch.status === status;\n        };\n        /**\n         * Returns true when the Gesuch must be readonly\n         * @returns {boolean}\n         */\n        GesuchModelManager.prototype.isGesuchReadonly = function () {\n            return this.gesuch && (TSAntragStatus_1.isStatusVerfuegenVerfuegt(this.gesuch.status)\n                || this.isGesuchReadonlyForRole()\n                || this.getGesuch().gesperrtWegenBeschwerde);\n        };\n        /**\n         * checks if the gesuch is readonly for a given role based on its state\n         */\n        GesuchModelManager.prototype.isGesuchReadonlyForRole = function () {\n            var periodeReadonly = this.isGesuchsperiodeReadonly();\n            if (this.authServiceRS.isOneOfRoles(TSRoleUtil_1.TSRoleUtil.getReadOnlyRoles())) {\n                return true; // schulamt hat immer nur readonly zugriff\n            }\n            else if (this.authServiceRS.isRole(TSRole_1.TSRole.GESUCHSTELLER)) {\n                var gesuchReadonly = TSAntragStatus_1.isAtLeastFreigegebenOrFreigabequittung(this.getGesuch().status); //readonly fuer gs wenn gesuch freigegeben oder weiter\n                return gesuchReadonly || periodeReadonly;\n            }\n            return periodeReadonly;\n        };\n        GesuchModelManager.prototype.isGesuchsperiodeReadonly = function () {\n            return this.getGesuch() && this.getGesuch().gesuchsperiode && (this.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus_1.TSGesuchsperiodeStatus.GESCHLOSSEN);\n        };\n        /**\n         * Wenn das Gesuch Online durch den GS erstellt wurde, nun aber in Bearbeitung beim JA ist, handelt es sich um\n         * den Korrekturmodus des Jugendamtes.\n         * @returns {boolean}\n         */\n        GesuchModelManager.prototype.isKorrekturModusJugendamt = function () {\n            return TSAntragStatus_1.isAtLeastFreigegeben(this.gesuch.status) && !TSAntragStatus_1.isAnyStatusOfVerfuegt(this.gesuch.status) && (TSEingangsart_1.TSEingangsart.ONLINE === this.getGesuch().eingangsart);\n        };\n        /**\n         * Einige Status wie GEPRUEFT haben \"substatus\" auf dem Client die berechnet werden muessen. Aus diesem Grund rufen wir\n         * diese Methode auf, bevor wir den Wert setzen.\n         * @param status\n         */\n        GesuchModelManager.prototype.calculateNewStatus = function (status) {\n            if (TSAntragStatus_1.TSAntragStatus.GEPRUEFT === status || TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN === status || TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_WARTEN === status) {\n                if (this.wizardStepManager.hasStepGivenStatus(TSWizardStepName_1.TSWizardStepName.BETREUUNG, TSWizardStepStatus_1.TSWizardStepStatus.NOK)) {\n                    if (this.getGesuch().isThereAnyBetreuung()) {\n                        return TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN;\n                    }\n                    else {\n                        return TSAntragStatus_1.TSAntragStatus.GEPRUEFT;\n                    }\n                }\n                else if (this.wizardStepManager.hasStepGivenStatus(TSWizardStepName_1.TSWizardStepName.BETREUUNG, TSWizardStepStatus_1.TSWizardStepStatus.PLATZBESTAETIGUNG)) {\n                    return TSAntragStatus_1.TSAntragStatus.PLATZBESTAETIGUNG_WARTEN;\n                }\n                else if (this.wizardStepManager.hasStepGivenStatus(TSWizardStepName_1.TSWizardStepName.BETREUUNG, TSWizardStepStatus_1.TSWizardStepStatus.OK)) {\n                    return TSAntragStatus_1.TSAntragStatus.GEPRUEFT;\n                }\n            }\n            return status;\n        };\n        /**\n         * Gibt true zurueck, wenn der Antrag ein Erstgesuchist. False bekommt man wenn der Antrag eine Mutation ist\n         * By default (beim Fehler oder leerem Gesuch) wird auch true zurueckgegeben\n         */\n        GesuchModelManager.prototype.isGesuch = function () {\n            if (this.gesuch) {\n                return this.gesuch.typ === TSAntragTyp_1.TSAntragTyp.ERSTGESUCH || this.gesuch.typ === TSAntragTyp_1.TSAntragTyp.ERNEUERUNGSGESUCH;\n            }\n            return true;\n        };\n        GesuchModelManager.prototype.saveMutation = function () {\n            var _this = this;\n            return this.gesuchRS.antragMutieren(this.gesuch.id, this.gesuch.eingangsdatum)\n                .then(function (response) {\n                _this.setGesuch(response);\n                return _this.wizardStepManager.findStepsFromGesuch(response.id).then(function () {\n                    return _this.getGesuch();\n                });\n            });\n        };\n        GesuchModelManager.prototype.saveErneuerungsgesuch = function () {\n            var _this = this;\n            return this.gesuchRS.antragErneuern(this.gesuch.gesuchsperiode.id, this.gesuch.id, this.gesuch.eingangsdatum)\n                .then(function (response) {\n                _this.setGesuch(response);\n                return _this.wizardStepManager.findStepsFromGesuch(response.id).then(function () {\n                    return _this.getGesuch();\n                });\n            });\n        };\n        /**\n         * Aktualisiert alle gegebenen Betreuungen.\n         * ACHTUNG. Die Betreuungen muessen existieren damit alles richtig funktioniert\n         */\n        GesuchModelManager.prototype.updateBetreuungen = function (betreuungenToUpdate, saveForAbwesenheit) {\n            var _this = this;\n            if (betreuungenToUpdate && betreuungenToUpdate.length > 0) {\n                return this.betreuungRS.saveBetreuungen(betreuungenToUpdate, this.gesuch.id, saveForAbwesenheit).then(function (updatedBetreuungen) {\n                    //update data of Betreuungen\n                    _this.gesuch.kindContainers.forEach(function (kindContainer) {\n                        for (var i = 0; i < kindContainer.betreuungen.length; i++) {\n                            var indexOfUpdatedBetreuung = _this.wasBetreuungUpdated(kindContainer.betreuungen[i], updatedBetreuungen);\n                            if (indexOfUpdatedBetreuung >= 0) {\n                                kindContainer.betreuungen[i] = updatedBetreuungen[indexOfUpdatedBetreuung];\n                            }\n                        }\n                    });\n                    return updatedBetreuungen;\n                });\n            }\n            else {\n                var defer = this.$q.defer();\n                defer.resolve();\n                return defer.promise;\n            }\n        };\n        GesuchModelManager.prototype.wasBetreuungUpdated = function (betreuung, updatedBetreuungen) {\n            if (betreuung && updatedBetreuungen) {\n                for (var i = 0; i < updatedBetreuungen.length; i++) {\n                    if (updatedBetreuungen[i].id === betreuung.id) {\n                        return i;\n                    }\n                }\n            }\n            return -1;\n        };\n        GesuchModelManager.prototype.clearGesuch = function () {\n            this.gesuch = undefined;\n        };\n        /**\n         * Schaut alle Betreuungen durch. Wenn es keine \"JAAngebote\" gibt, gibt es false zurueck.\n         * Nur wenn alle JA-Angebote neu sind, gibt es true zurueck.\n         */\n        GesuchModelManager.prototype.areAllJAAngeboteNew = function () {\n            var kinderWithBetreuungList = this.getKinderWithBetreuungList();\n            if (kinderWithBetreuungList.length <= 0) {\n                return false; // no Kind with bedarf\n            }\n            var jaAngeboteFound = false; // Wenn kein JA-Angebot gefunden wurde geben wir false zurueck\n            for (var _i = 0, kinderWithBetreuungList_4 = kinderWithBetreuungList; _i < kinderWithBetreuungList_4.length; _i++) {\n                var kind = kinderWithBetreuungList_4[_i];\n                for (var _a = 0, _b = kind.betreuungen; _a < _b.length; _a++) {\n                    var betreuung = _b[_a];\n                    if (TSBetreuungsangebotTyp_1.isJugendamt(betreuung.institutionStammdaten.betreuungsangebotTyp)) {\n                        if (betreuung.vorgaengerId) {\n                            return false;\n                        }\n                        jaAngeboteFound = true;\n                    }\n                }\n            }\n            return jaAngeboteFound;\n        };\n        GesuchModelManager.prototype.getGesuchName = function () {\n            return this.ebeguUtil.getGesuchNameFromGesuch(this.gesuch);\n        };\n        GesuchModelManager.prototype.isNeuestesGesuch = function () {\n            var gesuchId = this.gesuch.id;\n            return this.gesuchRS.getNeuestesGesuchFromGesuch(gesuchId).then(function (response) {\n                return response;\n            });\n        };\n        GesuchModelManager.prototype.isErwerbspensumRequired = function (gesuchId) {\n            return this.erwerbspensumRS.isErwerbspensumRequired(gesuchId);\n        };\n        GesuchModelManager.$inject = ['FamiliensituationRS', 'FallRS', 'GesuchRS', 'GesuchstellerRS', 'FinanzielleSituationRS', 'KindRS', 'FachstelleRS',\n            'ErwerbspensumRS', 'InstitutionStammdatenRS', 'BetreuungRS', 'GesuchsperiodeRS', 'EbeguRestUtil', '$log', 'AuthServiceRS',\n            'EinkommensverschlechterungContainerRS', 'VerfuegungRS', 'WizardStepManager', 'EinkommensverschlechterungInfoRS',\n            'AntragStatusHistoryRS', 'EbeguUtil', 'ErrorService', 'AdresseRS', '$q', 'CONSTANTS', '$rootScope', 'EwkRS'];\n        return GesuchModelManager;\n    }());\n    exports.default = GesuchModelManager;\n});\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/gesuchModelManager.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuch/service/gesuchModelManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport TSFall from '../../models/TSFall';\nimport TSGesuch from '../../models/TSGesuch';\nimport TSGesuchsteller from '../../models/TSGesuchsteller';\nimport TSAdresse from '../../models/TSAdresse';\nimport {TSAdressetyp} from '../../models/enums/TSAdressetyp';\nimport TSFamiliensituation from '../../models/TSFamiliensituation';\nimport FallRS from './fallRS.rest';\nimport GesuchRS from './gesuchRS.rest';\nimport GesuchstellerRS from '../../core/service/gesuchstellerRS.rest';\nimport FamiliensituationRS from './familiensituationRS.rest';\nimport {ILogService, IPromise, IQService, IRootScopeService} from 'angular';\nimport EbeguRestUtil from '../../utils/EbeguRestUtil';\nimport TSFinanzielleSituationContainer from '../../models/TSFinanzielleSituationContainer';\nimport TSEinkommensverschlechterungContainer from '../../models/TSEinkommensverschlechterungContainer';\nimport FinanzielleSituationRS from './finanzielleSituationRS.rest';\nimport EinkommensverschlechterungContainerRS from './einkommensverschlechterungContainerRS.rest';\nimport TSKindContainer from '../../models/TSKindContainer';\nimport KindRS from '../../core/service/kindRS.rest';\nimport {TSFachstelle} from '../../models/TSFachstelle';\nimport {FachstelleRS} from '../../core/service/fachstelleRS.rest';\nimport TSErwerbspensumContainer from '../../models/TSErwerbspensumContainer';\nimport ErwerbspensumRS from '../../core/service/erwerbspensumRS.rest';\nimport TSBetreuung from '../../models/TSBetreuung';\nimport TSInstitutionStammdaten from '../../models/TSInstitutionStammdaten';\nimport {InstitutionStammdatenRS} from '../../core/service/institutionStammdatenRS.rest';\nimport DateUtil from '../../utils/DateUtil';\nimport BetreuungRS from '../../core/service/betreuungRS.rest';\nimport {TSBetreuungsstatus} from '../../models/enums/TSBetreuungsstatus';\nimport TSGesuchsperiode from '../../models/TSGesuchsperiode';\nimport GesuchsperiodeRS from '../../core/service/gesuchsperiodeRS.rest';\nimport AuthServiceRS from '../../authentication/service/AuthServiceRS.rest';\nimport TSUser from '../../models/TSUser';\nimport VerfuegungRS from '../../core/service/verfuegungRS.rest';\nimport TSVerfuegung from '../../models/TSVerfuegung';\nimport WizardStepManager from './wizardStepManager';\nimport EinkommensverschlechterungInfoRS from './einkommensverschlechterungInfoRS.rest';\nimport {\n    isAnyStatusOfVerfuegt,\n    isAtLeastFreigegeben,\n    isAtLeastFreigegebenOrFreigabequittung,\n    isStatusVerfuegenVerfuegt,\n    TSAntragStatus\n} from '../../models/enums/TSAntragStatus';\nimport AntragStatusHistoryRS from '../../core/service/antragStatusHistoryRS.rest';\nimport {TSWizardStepName} from '../../models/enums/TSWizardStepName';\nimport {TSWizardStepStatus} from '../../models/enums/TSWizardStepStatus';\nimport {TSAntragTyp} from '../../models/enums/TSAntragTyp';\nimport EbeguUtil from '../../utils/EbeguUtil';\nimport ErrorService from '../../core/errors/service/ErrorService';\nimport TSExceptionReport from '../../models/TSExceptionReport';\nimport {TSErrorType} from '../../models/enums/TSErrorType';\nimport {TSErrorLevel} from '../../models/enums/TSErrorLevel';\nimport AdresseRS from '../../core/service/adresseRS.rest';\nimport {TSRole} from '../../models/enums/TSRole';\nimport {TSRoleUtil} from '../../utils/TSRoleUtil';\nimport {isJugendamt, isSchulamt} from '../../models/enums/TSBetreuungsangebotTyp';\nimport {TSEingangsart} from '../../models/enums/TSEingangsart';\nimport TSEinkommensverschlechterungInfoContainer from '../../models/TSEinkommensverschlechterungInfoContainer';\nimport TSFamiliensituationContainer from '../../models/TSFamiliensituationContainer';\nimport TSGesuchstellerContainer from '../../models/TSGesuchstellerContainer';\nimport TSAdresseContainer from '../../models/TSAdresseContainer';\nimport {TSAuthEvent} from '../../models/enums/TSAuthEvent';\nimport * as moment from 'moment';\nimport TSEWKResultat from '../../models/TSEWKResultat';\nimport TSEWKPerson from '../../models/TSEWKPerson';\nimport {TSGesuchsperiodeStatus} from '../../models/enums/TSGesuchsperiodeStatus';\nimport EwkRS from '../../core/service/ewkRS.rest';\n\nexport default class GesuchModelManager {\n    private gesuch: TSGesuch;\n    gesuchstellerNumber: number = 1;\n    basisJahrPlusNumber: number = 1;\n    private kindIndex: number;\n    private betreuungIndex: number;\n    private fachstellenList: Array<TSFachstelle>;\n    private activInstitutionenList: Array<TSInstitutionStammdaten>;\n\n    ewkResultatGS1: TSEWKResultat;\n    ewkResultatGS2: TSEWKResultat;\n    ewkPersonGS1: TSEWKPerson;\n    ewkPersonGS2: TSEWKPerson;\n\n    static $inject = ['FamiliensituationRS', 'FallRS', 'GesuchRS', 'GesuchstellerRS', 'FinanzielleSituationRS', 'KindRS', 'FachstelleRS',\n        'ErwerbspensumRS', 'InstitutionStammdatenRS', 'BetreuungRS', 'GesuchsperiodeRS', 'EbeguRestUtil', '$log', 'AuthServiceRS',\n        'EinkommensverschlechterungContainerRS', 'VerfuegungRS', 'WizardStepManager', 'EinkommensverschlechterungInfoRS',\n        'AntragStatusHistoryRS', 'EbeguUtil', 'ErrorService', 'AdresseRS', '$q', 'CONSTANTS', '$rootScope', 'EwkRS'];\n    /* @ngInject */\n    constructor(private familiensituationRS: FamiliensituationRS, private fallRS: FallRS, private gesuchRS: GesuchRS, private gesuchstellerRS: GesuchstellerRS,\n                private finanzielleSituationRS: FinanzielleSituationRS, private kindRS: KindRS, private fachstelleRS: FachstelleRS, private erwerbspensumRS: ErwerbspensumRS,\n                private instStamRS: InstitutionStammdatenRS, private betreuungRS: BetreuungRS, private gesuchsperiodeRS: GesuchsperiodeRS,\n                private ebeguRestUtil: EbeguRestUtil, private log: ILogService, private authServiceRS: AuthServiceRS,\n                private einkommensverschlechterungContainerRS: EinkommensverschlechterungContainerRS, private verfuegungRS: VerfuegungRS,\n                private wizardStepManager: WizardStepManager, private einkommensverschlechterungInfoRS: EinkommensverschlechterungInfoRS,\n                private antragStatusHistoryRS: AntragStatusHistoryRS, private ebeguUtil: EbeguUtil, private errorService: ErrorService,\n                private adresseRS: AdresseRS, private $q: IQService, private CONSTANTS: any, private $rootScope: IRootScopeService, private ewkRS: EwkRS) {\n\n\n        $rootScope.$on(TSAuthEvent[TSAuthEvent.LOGOUT_SUCCESS], () => {\n            this.setGesuch(undefined);\n            this.log.debug('Cleared gesuch on logout');\n        });\n    }\n\n    /**\n     * Je nach dem welche Rolle der Benutzer hat, wird das Gesuch aus der DB anders geholt.\n     * Fuer Institutionen z.B. wird das Gesuch nur mit den relevanten Daten geholt\n     */\n    public openGesuch(gesuchId: string): IPromise<TSGesuch> {\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getTraegerschaftInstitutionOnlyRoles())) { // Superadmin muss als \"normale\" Benutzer betrachtet werden\n            return this.gesuchRS.findGesuchForInstitution(gesuchId)\n                .then((response: TSGesuch) => {\n                    return this.wizardStepManager.findStepsFromGesuch(gesuchId).then(bla => {\n                        if (response) {\n                            this.setGesuch(response);\n                        }\n                        return response;\n                    });\n                });\n        } else {\n            return this.gesuchRS.findGesuch(gesuchId)\n                .then((response: TSGesuch) => {\n                    return this.wizardStepManager.findStepsFromGesuch(gesuchId).then(bla => {\n                        if (response) {\n                            this.setGesuch(response);\n                        }\n                        return response;\n                    });\n                });\n        }\n    }\n\n    /**\n     * Mit den Daten vom Gesuch, werden die entsprechenden Steps der Liste hiddenSteps hinzugefuegt.\n     * Oder ggf. aus der Liste entfernt (nur public fuer test)\n     */\n    public setHiddenSteps(): void {\n        if (this.gesuch) {\n            //Freigabe\n            if (this.gesuch.isOnlineGesuch()) {\n                this.wizardStepManager.unhideStep(TSWizardStepName.FREIGABE);\n            } else {\n                this.wizardStepManager.hideStep(TSWizardStepName.FREIGABE);\n            }\n\n            //Abwesenheit\n            if (!this.gesuch.isMutation()) {\n                this.wizardStepManager.hideStep(TSWizardStepName.ABWESENHEIT);\n            } else {\n                this.wizardStepManager.unhideStep(TSWizardStepName.ABWESENHEIT);\n            }\n\n            //Umzug\n            if (!this.gesuch.isMutation() && !this.getGesuch().isThereAnyUmzug()) {\n                this.wizardStepManager.hideStep(TSWizardStepName.UMZUG);\n            } else {\n                this.wizardStepManager.unhideStep(TSWizardStepName.UMZUG);\n            }\n        }\n    }\n\n    /**\n     * In dieser Methode wird das Gesuch ersetzt. Das Gesuch ist jetzt private und darf nur ueber diese Methode geaendert werden.\n     *\n     * @param gesuch das Gesuch. Null und undefined werden erlaubt.\n     */\n    public setGesuch(gesuch: TSGesuch): void {\n        this.gesuch = gesuch;\n        if (this.gesuch) {\n            this.wizardStepManager.findStepsFromGesuch(this.gesuch.id);\n            this.setHiddenSteps();\n            // EWK Service mit bereits existierenden Daten initialisieren\n            this.ewkRS.gesuchsteller1 = this.gesuch.gesuchsteller1;\n            this.ewkRS.gesuchsteller2 = this.gesuch.gesuchsteller2;\n        }\n        this.ewkPersonGS1 = undefined;\n        this.ewkPersonGS2 = undefined;\n        this.ewkResultatGS1 = undefined;\n        this.ewkResultatGS2 = undefined;\n    }\n\n    public getGesuch(): TSGesuch {\n        return this.gesuch;\n    }\n\n    /**\n     * Prueft ob der 2. Gesuchtsteller eingetragen werden muss je nach dem was in Familiensituation ausgewaehlt wurde. Wenn es sich\n     * um eine Mutation handelt wird nur geschaut ob der 2GS bereits existiert. Wenn ja, dann wird er benoetigt, da bei Mutationen darf\n     * der 2GS nicht geloescht werden\n     */\n    public isGesuchsteller2Required(): boolean {\n        if (this.gesuch && this.getFamiliensituation() && this.getFamiliensituation().familienstatus) {\n            return this.getFamiliensituation().hasSecondGesuchsteller()\n                || (this.gesuch.isMutation() && this.gesuch.gesuchsteller2 != null && this.gesuch.gesuchsteller2 !== undefined);\n        } else {\n            return false;\n        }\n    }\n\n    public isBasisJahr2Required(): boolean {\n        return this.getEkvFuerBasisJahrPlus(2);\n    }\n\n    public isRequiredEKV_GS_BJ(gs: number, bj: number): boolean {\n        if (gs === 2) {\n            return this.getEkvFuerBasisJahrPlus(bj) && this.isGesuchsteller2Required();\n        } else {\n            return this.getEkvFuerBasisJahrPlus(bj);\n        }\n\n    }\n\n    public getFamiliensituation(): TSFamiliensituation {\n        if (this.gesuch) {\n            return this.gesuch.extractFamiliensituation();\n        }\n        return undefined;\n    }\n\n    public getFamiliensituationErstgesuch(): TSFamiliensituation {\n        if (this.gesuch) {\n            return this.gesuch.extractFamiliensituationErstgesuch();\n        }\n        return undefined;\n    }\n\n    public updateFachstellenList(): void {\n        this.fachstelleRS.getAllFachstellen().then((response: TSFachstelle[]) => {\n            this.fachstellenList = response;\n        });\n    }\n\n    /**\n     * Retrieves the list of InstitutionStammdaten for the date of today.\n     */\n    public updateActiveInstitutionenList(): void {\n        this.instStamRS.getAllActiveInstitutionStammdatenByDate(DateUtil.today()).then((response: TSInstitutionStammdaten[]) => {\n            this.activInstitutionenList = response;\n        });\n    }\n\n    /**\n     * Wenn das Gesuch schon gespeichert ist (timestampErstellt != null), wird dieses nur aktualisiert. Wenn es sich um ein neues Gesuch handelt\n     * dann wird zuerst der Fall erstellt, dieser ins Gesuch kopiert und dann das Gesuch erstellt\n     * @returns {IPromise<TSGesuch>}\n     */\n    public saveGesuchAndFall(): IPromise<TSGesuch> {\n        if (this.gesuch && this.gesuch.timestampErstellt) { //update\n            return this.updateGesuch();\n        } else { //create\n            if (this.gesuch.fall && this.gesuch.fall.timestampErstellt) {\n                // Fall ist schon vorhanden\n                return this.gesuchRS.createGesuch(this.gesuch).then((gesuchResponse: any) => {\n                    this.gesuch = gesuchResponse;\n                    return this.gesuch;\n                });\n            } else {\n                return this.fallRS.createFall(this.gesuch.fall).then((fallResponse: TSFall) => {\n                    this.gesuch.fall = angular.copy(fallResponse);\n                    return this.gesuchRS.createGesuch(this.gesuch).then((gesuchResponse: any) => {\n                        this.gesuch = gesuchResponse;\n                        return this.gesuch;\n                    });\n                });\n            }\n        }\n    }\n\n    public reloadGesuch(): IPromise<TSGesuch> {\n        return this.gesuchRS.findGesuch(this.gesuch.id).then((gesuchResponse: any) => {\n            this.setGesuch(gesuchResponse);\n            return this.gesuch;\n        });\n    }\n\n    /**\n     * Update das Gesuch\n     * @returns {IPromise<TSGesuch>}\n     */\n    public updateGesuch(): IPromise<TSGesuch> {\n        return this.gesuchRS.updateGesuch(this.gesuch).then((gesuchResponse: any) => {\n            this.gesuch = gesuchResponse;\n            this.calculateNewStatus(this.gesuch.status); // just to be sure that the status has been correctly updated\n            return this.gesuch;\n        });\n    }\n\n    /**\n     * Update den Fall\n     * @returns {IPromise<TSFall>}\n     */\n    public updateFall(): IPromise<TSFall> {\n        if (this.gesuch && this.gesuch.fall) {\n            return this.fallRS.updateFall(this.gesuch.fall).then((fallResponse: any) => {\n                let parsedFall = this.ebeguRestUtil.parseFall(this.gesuch.fall, fallResponse);\n                return this.gesuch.fall = angular.copy(parsedFall);\n            });\n        } else {\n            this.log.warn('Es wurde versucht einen undefined Fall zu speichern');\n            let deferred = this.$q.defer<TSFall>();\n            deferred.resolve(undefined);\n            return deferred.promise;\n        }\n    }\n\n    /**\n     * Speichert den StammdatenToWorkWith.\n     */\n    public updateGesuchsteller(umzug: boolean): IPromise<TSGesuchstellerContainer> {\n        // Da showUmzug nicht im Server gespeichert wird, muessen wir den alten Wert kopieren und nach der Aktualisierung wiedersetzen\n        let tempShowUmzug: boolean = this.getStammdatenToWorkWith().showUmzug;\n        return this.gesuchstellerRS.saveGesuchsteller(this.getStammdatenToWorkWith(), this.gesuch.id, this.gesuchstellerNumber, umzug)\n            .then((gesuchstellerResponse: any) => {\n                this.setStammdatenToWorkWith(gesuchstellerResponse);\n                return this.getStammdatenToWorkWith();\n            });\n    }\n\n    public saveFinanzielleSituation(): IPromise<TSFinanzielleSituationContainer> {\n        return this.finanzielleSituationRS.saveFinanzielleSituation(\n            this.getStammdatenToWorkWith().finanzielleSituationContainer, this.getStammdatenToWorkWith().id, this.gesuch.id)\n            .then((finSitContRespo: TSFinanzielleSituationContainer) => {\n                this.getStammdatenToWorkWith().finanzielleSituationContainer = finSitContRespo;\n                return this.getStammdatenToWorkWith().finanzielleSituationContainer;\n            });\n    }\n\n    public saveEinkommensverschlechterungContainer(): IPromise<TSEinkommensverschlechterungContainer> {\n        return this.einkommensverschlechterungContainerRS.saveEinkommensverschlechterungContainer(\n            this.getStammdatenToWorkWith().einkommensverschlechterungContainer, this.getStammdatenToWorkWith().id, this.gesuch.id)\n            .then((ekvContRespo: TSEinkommensverschlechterungContainer) => {\n                this.getStammdatenToWorkWith().einkommensverschlechterungContainer = ekvContRespo;\n                return this.getStammdatenToWorkWith().einkommensverschlechterungContainer;\n            });\n    }\n\n    /**\n     * Gesuchsteller nummer darf nur 1 oder 2 sein. Wenn die uebergebene Nummer nicht 1 oder 2 ist, wird dann 1 gesetzt\n     * @param gsNumber\n     */\n    public setGesuchstellerNumber(gsNumber: number) {\n        if (gsNumber === 1 || gsNumber === 2) {\n            this.gesuchstellerNumber = gsNumber;\n        } else {\n            this.gesuchstellerNumber = 1;\n        }\n    }\n\n    /**\n     * BasisJahrPlus nummer darf nur 1 oder 2 sein. Wenn die uebergebene Nummer nicht 1 oder 2 ist, wird dann 1 gesetzt\n     * @param bjpNumber\n     */\n    public setBasisJahrPlusNumber(bjpNumber: number) {\n        if (bjpNumber === 1 || bjpNumber === 2) {\n            this.basisJahrPlusNumber = bjpNumber;\n        } else {\n            this.basisJahrPlusNumber = 1;\n        }\n    }\n\n    /**\n     * Setzt den Kind Index. Dies ist der Index des aktuellen Kindes in der Liste der Kinder\n     * @param kindIndex\n     */\n    public setKindIndex(kindIndex: number) {\n        if (kindIndex >= 0) {\n            this.kindIndex = kindIndex;\n        } else {\n            this.kindIndex = 0;\n        }\n    }\n\n    /**\n     * Setzt den BetreuungsIndex.\n     * @param betreuungIndex\n     */\n    public setBetreuungIndex(betreuungIndex: number) {\n        if (betreuungIndex >= 0) {\n            this.betreuungIndex = betreuungIndex;\n        } else {\n            this.setKindIndex(0);\n        }\n    }\n\n    public convertKindNumberToKindIndex(kindNumber: number): number {\n        for (let i = 0; i < this.getGesuch().kindContainers.length; i++) {\n            if (this.getGesuch().kindContainers[i].kindNummer === kindNumber) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public convertBetreuungNumberToBetreuungIndex(betreuungNumber: number): number {\n        for (let i = 0; i < this.getKindToWorkWith().betreuungen.length; i++) {\n            if (this.getKindToWorkWith().betreuungen[i].betreuungNummer === betreuungNumber) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public getFachstellenList(): Array<TSFachstelle> {\n        if (this.fachstellenList === undefined) {\n            this.fachstellenList = []; // init empty while we wait for promise\n            this.updateFachstellenList();\n        }\n        return this.fachstellenList;\n    }\n\n    public getActiveInstitutionenList(): Array<TSInstitutionStammdaten> {\n        if (this.activInstitutionenList === undefined) {\n            this.activInstitutionenList = []; // init empty while we wait for promise\n            this.updateActiveInstitutionenList();\n        }\n        return this.activInstitutionenList;\n    }\n\n    public getStammdatenToWorkWith(): TSGesuchstellerContainer {\n        if (this.gesuchstellerNumber === 2) {\n            return this.gesuch.gesuchsteller2;\n        } else {\n            return this.gesuch.gesuchsteller1;\n        }\n    }\n\n    public getEkvFuerBasisJahrPlus(basisJahrPlus: number): boolean {\n        if (!this.gesuch.extractEinkommensverschlechterungInfo()) {\n            this.initEinkommensverschlechterungInfo();\n        }\n\n        if (basisJahrPlus === 2) {\n            return this.gesuch.extractEinkommensverschlechterungInfo().ekvFuerBasisJahrPlus2;\n        } else {\n            return this.gesuch.extractEinkommensverschlechterungInfo().ekvFuerBasisJahrPlus1;\n        }\n    }\n\n    public setStammdatenToWorkWith(gesuchsteller: TSGesuchstellerContainer): TSGesuchstellerContainer {\n        if (this.gesuchstellerNumber === 1) {\n            return this.gesuch.gesuchsteller1 = gesuchsteller;\n        } else {\n            return this.gesuch.gesuchsteller2 = gesuchsteller;\n        }\n    }\n\n    public initStammdaten(): void {\n        if (!this.getStammdatenToWorkWith()) {\n            let gesuchsteller: TSGesuchsteller;\n            // die daten die wir aus iam importiert haben werden bei gs1 abgefuellt\n            if (this.gesuchstellerNumber === 1 && this.authServiceRS.isOneOfRoles(TSRoleUtil.getGesuchstellerOnlyRoles())) {\n                let principal: TSUser = this.authServiceRS.getPrincipal();\n                let name: string = principal ? principal.nachname : undefined;\n                let vorname: string = principal ? principal.vorname : undefined;\n                let email: string = principal ? principal.email : undefined;\n                gesuchsteller = new TSGesuchsteller(vorname, name, undefined, undefined, email);\n            } else {\n                gesuchsteller = new TSGesuchsteller();\n            }\n            this.setStammdatenToWorkWith(new TSGesuchstellerContainer(gesuchsteller));\n            this.getStammdatenToWorkWith().adressen = this.initWohnAdresse();\n        }\n    }\n\n    private initEinkommensverschlechterungInfo(): void {\n        if (this.gesuch && !this.gesuch.extractEinkommensverschlechterungInfo()) {\n            this.gesuch.einkommensverschlechterungInfoContainer = new TSEinkommensverschlechterungInfoContainer();\n            this.gesuch.einkommensverschlechterungInfoContainer.init();\n        }\n    }\n\n    /**\n     * Erstellt ein neues Gesuch und einen neuen Fall. Wenn !forced sie werden nur erstellt wenn das Gesuch noch nicht erstellt wurde i.e. es null/undefined ist\n     * Wenn force werden Gesuch und Fall immer erstellt.\n     */\n    public initGesuch(forced: boolean, eingangsart: TSEingangsart) {\n        if (forced || (!forced && !this.gesuch)) {\n            this.initAntrag(TSAntragTyp.ERSTGESUCH, eingangsart);\n        }\n        this.antragStatusHistoryRS.loadLastStatusChange(this.getGesuch());\n    }\n\n    /**\n     * Erstellt ein neues Gesuch mit der angegebenen Eingangsart und Gesuchsperiode. Damit dies im resolve des\n     * routing gemacht werden kann, wird das ganze als promise gehandhabt\n     * @param forced\n     * @param eingangsart\n     * @param gesuchsperiodeId\n     * @param fallId\n     * @return a void promise that is resolved once all subpromises are done\n     */\n    public initGesuchWithEingangsart(forced: boolean, eingangsart: TSEingangsart, gesuchsperiodeId: string, fallId: string): IPromise<TSGesuch> {\n        this.initGesuch(forced, eingangsart);\n        let setGesuchsperiodeProm: IPromise<void>;\n        if (gesuchsperiodeId) {\n            setGesuchsperiodeProm = this.gesuchsperiodeRS.findGesuchsperiode(gesuchsperiodeId).then(periode => {\n                this.gesuch.gesuchsperiode = periode;\n            });\n        }\n\n        let setFallProm: angular.IPromise<void>;\n        if (fallId) {\n            setFallProm = this.fallRS.findFall(fallId).then(foundFall => {\n                this.gesuch.fall = foundFall;\n            });\n        }\n\n        if (forced) {\n            if (TSEingangsart.ONLINE === eingangsart) {\n                this.gesuch.status = TSAntragStatus.IN_BEARBEITUNG_GS;\n            } else {\n                this.gesuch.status = TSAntragStatus.IN_BEARBEITUNG_JA;\n            }\n            //ewk zuruecksetzen\n            if (this.ewkRS) {\n                this.ewkRS.gesuchsteller1 = undefined;\n                this.ewkRS.gesuchsteller2 = undefined;\n            }\n        }\n\n        // this creates a list of promises and resolves them all. once all promises are resolved the .then function is triggered\n        return this.$q.all([setGesuchsperiodeProm, setFallProm]).then(() => {\n            this.log.debug('initialized new gesuch ', this.gesuch);\n            return this.gesuch;\n\n        });\n    }\n\n    /**\n     * Diese Methode erstellt eine Fake-Mutation als gesuch fuer das GesuchModelManager. Die Mutation ist noch leer und hat\n     * das ID des Gesuchs aus dem sie erstellt wurde. Wenn der Benutzer auf speichern klickt, wird der Service \"antragMutieren\"\n     * mit dem ID des alten Gesuchs aufgerufen. Das Objekt das man zurueckbekommt, wird dann diese Fake-Mutation mit den richtigen\n     * Daten ueberschreiben\n     * @param gesuchID\n     * @param eingangsart\n     * @param gesuchsperiodeId\n     * @param fallId\n     */\n    public initMutation(gesuchID: string, eingangsart: TSEingangsart, gesuchsperiodeId: string, fallId: string): void {\n        this.initCopyOfGesuch(gesuchID, eingangsart, gesuchsperiodeId, fallId, TSAntragTyp.MUTATION);\n    }\n\n    /**\n     * Diese Methode erstellt ein Fake-Erneuerungsgesuch als gesuch fuer das GesuchModelManager. Das Gesuch ist noch leer und hat\n     * das ID des Gesuchs aus dem es erstellt wurde.\n     */\n    public initErneuerungsgesuch(gesuchID: string, eingangsart: TSEingangsart, gesuchsperiodeId: string, fallId: string) {\n        this.initCopyOfGesuch(gesuchID, eingangsart, gesuchsperiodeId, fallId, TSAntragTyp.ERNEUERUNGSGESUCH);\n    }\n\n    private initCopyOfGesuch(gesuchID: string, eingangsart: TSEingangsart, gesuchsperiodeId: string, fallId: string, antragTyp: TSAntragTyp): void {\n        this.gesuchsperiodeRS.findGesuchsperiode(gesuchsperiodeId).then(periode => {\n            this.gesuch.gesuchsperiode = periode;\n        });\n        this.initAntrag(antragTyp, eingangsart);\n        this.fallRS.findFall(fallId).then(foundFall => {\n            this.gesuch.fall = foundFall;\n        });\n        this.gesuch.id = gesuchID; //setzen wir das alte gesuchID, um danach im Server die Mutation erstellen zu koennen\n        if (TSEingangsart.ONLINE === eingangsart) {\n            this.gesuch.status = TSAntragStatus.IN_BEARBEITUNG_GS;\n        } else {\n            this.gesuch.status = TSAntragStatus.IN_BEARBEITUNG_JA;\n        }\n        this.gesuch.emptyCopy = true;\n    }\n\n    private initAntrag(antragTyp: TSAntragTyp, eingangsart: TSEingangsart): void {\n        this.gesuch = new TSGesuch();\n        this.gesuch.fall = new TSFall();\n        this.gesuch.typ = antragTyp; // by default ist es ein Erstgesuch\n        this.gesuch.eingangsart = eingangsart;\n        this.setHiddenSteps();\n        this.wizardStepManager.initWizardSteps();\n        this.setCurrentUserAsFallVerantwortlicher();\n    }\n\n    public initFamiliensituation() {\n        if (!this.getFamiliensituation()) {\n            this.gesuch.familiensituationContainer = new TSFamiliensituationContainer();\n            this.gesuch.familiensituationContainer.familiensituationJA = new TSFamiliensituation();\n        }\n    }\n\n    public initKinder(): void {\n        if (!this.gesuch.kindContainers) {\n            this.gesuch.kindContainers = [];\n        }\n    }\n\n    /**\n     * Gibt das Jahr des Anfangs der Gesuchsperiode minus 1 zurueck. undefined wenn die Gesuchsperiode nicht richtig gesetzt wurde\n     * @returns {number}\n     */\n    public getBasisjahr(): number {\n        if (this.getGesuchsperiodeBegin()) {\n            return this.getGesuchsperiodeBegin().year() - 1;\n        }\n        return undefined;\n    }\n\n    /**\n     * Gibt das Jahr des Anfangs der Gesuchsperiode minus 1 zurueck. undefined wenn die Gesuchsperiode nicht richtig gesetzt wurde\n     * @returns {number}\n     */\n    public getBasisjahrPlus(plus: number): number {\n        if (this.getGesuchsperiodeBegin()) {\n            return this.getGesuchsperiodeBegin().year() - 1 + plus;\n        }\n        return undefined;\n    }\n\n\n    public getBasisjahrToWorkWith(): number {\n        return this.getBasisjahrPlus(this.basisJahrPlusNumber);\n    }\n\n    /**\n     * Gibt das gesamte Objekt Gesuchsperiode zurueck, das zum Gesuch gehoert.\n     * @returns {any}\n     */\n    public getGesuchsperiode(): TSGesuchsperiode {\n        if (this.gesuch) {\n            return this.gesuch.gesuchsperiode;\n        }\n        return undefined;\n    }\n\n    /**\n     * Gibt den Anfang der Gesuchsperiode als Moment zurueck\n     * @returns {any}\n     */\n    public getGesuchsperiodeBegin(): moment.Moment {\n        if (this.getGesuchsperiode() && this.getGesuchsperiode().gueltigkeit) {\n            return this.gesuch.gesuchsperiode.gueltigkeit.gueltigAb;\n        }\n        return undefined;\n    }\n\n    private initWohnAdresse(): Array<TSAdresseContainer> {\n        let wohnAdresseContanier: TSAdresseContainer = new TSAdresseContainer();\n        let wohnAdresse = new TSAdresse();\n        wohnAdresse.adresseTyp = TSAdressetyp.WOHNADRESSE;\n        wohnAdresseContanier.showDatumVon = false;\n        wohnAdresseContanier.adresseJA = wohnAdresse;\n        return [wohnAdresseContanier];\n    }\n\n    public getKinderList(): Array<TSKindContainer> {\n        if (this.gesuch) {\n            return this.gesuch.kindContainers;\n        }\n        return [];\n    }\n\n    /**\n     *\n     * @returns {any} Alle KindContainer in denen das Kind Betreuung benoetigt\n     */\n    public getKinderWithBetreuungList(): Array<TSKindContainer> {\n        let listResult: Array<TSKindContainer> = [];\n        if (this.gesuch) {\n            listResult = this.gesuch.getKinderWithBetreuungList();\n        }\n        return listResult;\n    }\n\n\n    public saveBetreuung(betreuungToSave: TSBetreuung, abwesenheit: boolean): IPromise<TSBetreuung> {\n        if (betreuungToSave.betreuungsstatus === TSBetreuungsstatus.ABGEWIESEN) {\n            return this.betreuungRS.betreuungsPlatzAbweisen(betreuungToSave, this.getKindToWorkWith().id, this.gesuch.id)\n                .then((storedBetreuung: any) => {\n                    return this.gesuchRS.getGesuchBetreuungenStatus(this.gesuch.id).then((betreuungenStatus) => {\n                        this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                        return this.handleSavedBetreuung(storedBetreuung);\n                    });\n                });\n        } else  if (betreuungToSave.betreuungsstatus === TSBetreuungsstatus.BESTAETIGT) {\n            return this.betreuungRS.betreuungsPlatzBestaetigen(betreuungToSave, this.getKindToWorkWith().id, this.gesuch.id)\n                .then((storedBetreuung: any) => {\n                    return this.gesuchRS.getGesuchBetreuungenStatus(this.gesuch.id).then((betreuungenStatus) => {\n                        this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                        return this.handleSavedBetreuung(storedBetreuung);\n                    });\n                });\n        } else {\n            return this.betreuungRS.saveBetreuung(betreuungToSave, this.getKindToWorkWith().id, this.gesuch.id, abwesenheit)\n                .then((storedBetreuung: any) => {\n                    return this.gesuchRS.getGesuchBetreuungenStatus(this.gesuch.id).then((betreuungenStatus) => {\n                        this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                        return this.handleSavedBetreuung(storedBetreuung);\n                    });\n                });\n        }\n    }\n\n    private handleSavedBetreuung(storedBetreuung: TSBetreuung): TSBetreuung {\n        this.getKindFromServer();\n        if (!storedBetreuung.isNew()) {   //gespeichertes kind war nicht neu\n            let i: number = EbeguUtil.getIndexOfElementwithID(storedBetreuung, this.getKindToWorkWith().betreuungen);\n            if (i >= 0) {\n                this.getKindToWorkWith().betreuungen[i] = storedBetreuung;\n                this.setBetreuungIndex(i);\n            }\n        } else {\n            this.getKindToWorkWith().betreuungen.push(storedBetreuung);  //neues kind anfuegen\n            this.setBetreuungIndex(this.getKindToWorkWith().betreuungen.length - 1);\n        }\n        return storedBetreuung;\n    }\n\n    public saveKind(kindToSave: TSKindContainer): IPromise<TSKindContainer> {\n        return this.kindRS.saveKind(kindToSave, this.gesuch.id)\n            .then((storedKindCont: TSKindContainer) => {\n                this.getFallFromServer();\n                if (!kindToSave.isNew()) {   //gespeichertes kind war nicht neu\n                    let i: number = EbeguUtil.getIndexOfElementwithID(kindToSave, this.gesuch.kindContainers);\n                       if (i >= 0) {\n                           this.gesuch.kindContainers[i] = storedKindCont;\n                       }\n                } else {\n                    this.gesuch.kindContainers.push(storedKindCont);  //neues kind anfuegen\n                }\n                return storedKindCont;\n            });\n    }\n\n\n    /**\n     * Sucht das KindToWorkWith im Server und aktualisiert es mit dem bekommenen Daten\n     * @returns {IPromise<TSKindContainer>}\n     */\n    private getKindFromServer(): IPromise<TSKindContainer> {\n        return this.kindRS.findKind(this.getKindToWorkWith().id).then((kindResponse) => {\n            return this.setKindToWorkWith(kindResponse);\n        });\n    }\n\n    /**\n     * Sucht das Gesuch im Server und aktualisiert es mit dem bekommenen Daten\n     * @returns {IPromise<void>}\n     */\n    private getFallFromServer(): IPromise<TSFall> {\n        return this.fallRS.findFall(this.gesuch.fall.id).then((fallResponse) => {\n            return this.gesuch.fall = fallResponse;\n        });\n    }\n\n    public getKindToWorkWith(): TSKindContainer {\n        if (this.gesuch && this.gesuch.kindContainers && this.gesuch.kindContainers.length > this.kindIndex) {\n            return this.gesuch.kindContainers[this.kindIndex];\n        } else {\n            this.log.error('kindContainers is not set or kindIndex is out of bounds ' + this.kindIndex);\n        }\n        return undefined;\n    }\n\n    /**\n     * Sucht im ausgewaehlten Kind (kindIndex) nach der aktuellen Betreuung. Deshalb muessen sowohl\n     * kindIndex als auch betreuungNumber bereits gesetzt sein.\n     * @returns {any}\n     */\n    public getBetreuungToWorkWith(): TSBetreuung {\n        if (this.getKindToWorkWith() && this.getKindToWorkWith().betreuungen.length > this.betreuungIndex) {\n            return this.getKindToWorkWith().betreuungen[this.betreuungIndex];\n        } else {\n            this.log.error('kindToWorkWith is not set or index of betreuung is out of bounds ' + this.betreuungIndex);\n        }\n        return undefined;\n    }\n\n    /**\n     * Ersetzt das Kind in der aktuelle Position \"kindIndex\" durch das gegebene Kind. Aus diesem Grund muss diese Methode\n     * nur aufgerufen werden, wenn die Position \"kindIndex\" schon richtig gesetzt wurde.\n     * @param kind\n     * @returns {TSKindContainer}\n     */\n    public setKindToWorkWith(kind: TSKindContainer): TSKindContainer {\n        return this.gesuch.kindContainers[this.kindIndex] = kind;\n    }\n\n    /**\n     * Ersetzt die Betreuung in der aktuelle Position \"betreuungIndex\" durch die gegebene Betreuung. Aus diesem Grund muss diese Methode\n     * nur aufgerufen werden, wenn die Position \"betreuungIndex\" schon richtig gesetzt wurde.\n     * @param betreuung\n     * @returns {TSBetreuung}\n     */\n    public setBetreuungToWorkWith(betreuung: TSBetreuung): TSBetreuung {\n        return this.getKindToWorkWith().betreuungen[this.betreuungIndex] = betreuung;\n    }\n\n    /**\n     * Entfernt das aktuelle Kind von der Liste aber nicht von der DB.\n     */\n    public removeKindFromList() {\n        this.gesuch.kindContainers.splice(this.kindIndex, 1);\n        this.setKindIndex(undefined); //by default auf undefined setzen\n    }\n\n    /**\n     * Entfernt die aktuelle Betreuung des aktuellen Kindes von der Liste aber nicht von der DB.\n     */\n    public removeBetreuungFromKind() {\n        this.getKindToWorkWith().betreuungen.splice(this.betreuungIndex, 1);\n        this.setBetreuungIndex(undefined); //by default auf undefined setzen\n        // recalculates the current status because a change in a Betreuung could mean a change in the gesuchstatus, for example when\n        // the status was PLATZBESTAETIGUNG_ABGEWIESEN and the declined Platz is removed, the new status should be GEPRUEFT\n        this.getGesuch().status = this.calculateNewStatus(this.getGesuch().status);\n    }\n\n    public getKindIndex(): number {\n        return this.kindIndex;\n    }\n\n    public getBetreuungIndex(): number {\n        return this.betreuungIndex;\n    }\n\n    public getGesuchstellerNumber(): number {\n        return this.gesuchstellerNumber;\n    }\n\n    public getBasisJahrPlusNumber(): number {\n        return this.basisJahrPlusNumber;\n    }\n\n    /**\n     * Check whether the Gesuch is already saved in the database.\n     * Case yes the fields shouldn't be editable anymore\n     */\n    public isGesuchSaved(): boolean {\n        return this.gesuch && (this.gesuch.timestampErstellt !== undefined)\n            && (this.gesuch.timestampErstellt !== null);\n    }\n\n    /**\n     * Sucht das gegebene KindContainer in der List von KindContainer, erstellt es als KindToWorkWith\n     * und gibt die Position in der Array zurueck. Gibt -1 zurueck wenn das Kind nicht gefunden wurde.\n     * @param kind\n     */\n    public findKind(kind: TSKindContainer): number {\n        if (this.gesuch.kindContainers.indexOf(kind) >= 0) {\n            this.setKindIndex(this.gesuch.kindContainers.indexOf(kind));\n            return this.kindIndex;\n        }\n        return -1;\n    }\n\n    /**\n     * Sucht das Kind mit der eingegebenen KindID in allen KindContainers des Gesuchs. kindIndex wird gesetzt und zurueckgegeben\n     * @param kindID\n     * @returns {number}\n     */\n    public findKindById(kindID: string): number {\n        if (this.gesuch.kindContainers) {\n            for (let i = 0; i < this.gesuch.kindContainers.length; i++) {\n                if (this.gesuch.kindContainers[i].id === kindID) {\n                    this.setKindIndex(i);\n                    return this.kindIndex;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public removeKind(): IPromise<any> {\n        return this.kindRS.removeKind(this.getKindToWorkWith().id, this.gesuch.id).then((responseKind: any) => {\n            this.removeKindFromList();\n            return this.gesuchRS.getGesuchBetreuungenStatus(this.gesuch.id).then((betreuungenStatus) => {\n                this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                return this.updateGesuch();\n            });\n        });\n    }\n\n    public findBetreuung(betreuung: TSBetreuung): number {\n        if (this.getKindToWorkWith() && this.getKindToWorkWith().betreuungen) {\n            this.setBetreuungIndex(this.getKindToWorkWith().betreuungen.indexOf(betreuung));\n            return this.betreuungIndex;\n        }\n        return -1;\n    }\n\n    /**\n     * Sucht die Betreuung mit der eingegebenen betreuungID in allen Betreuungen des aktuellen Kind. betreuungIndex wird gesetzt und zurueckgegeben\n     * @param betreuungID\n     * @returns {number}\n     */\n    public findBetreuungById(betreuungID: string): number {\n        let kindToWorkWith: TSKindContainer = this.getKindToWorkWith();\n        if (kindToWorkWith) {\n            for (let i = 0; i < kindToWorkWith.betreuungen.length; i++) {\n                if (kindToWorkWith.betreuungen[i].id === betreuungID) {\n                    this.setBetreuungIndex(i);\n                    return this.betreuungIndex;\n                }\n            }\n        }\n        return -1;\n    }\n\n\n    public removeBetreuung(): IPromise<void> {\n        return this.betreuungRS.removeBetreuung(this.getBetreuungToWorkWith().id, this.gesuch.id).then((responseBetreuung: any) => {\n            this.removeBetreuungFromKind();\n            return this.gesuchRS.getGesuchBetreuungenStatus(this.gesuch.id).then((betreuungenStatus) => {\n                this.gesuch.gesuchBetreuungenStatus = betreuungenStatus;\n                this.kindRS.saveKind(this.getKindToWorkWith(), this.gesuch.id);\n            });\n        });\n    }\n\n    public removeErwerbspensum(pensum: TSErwerbspensumContainer): void {\n        let erwerbspensenOfCurrentGS: Array<TSErwerbspensumContainer>;\n        erwerbspensenOfCurrentGS = this.getStammdatenToWorkWith().erwerbspensenContainer;\n        let index: number = erwerbspensenOfCurrentGS.indexOf(pensum);\n        if (index >= 0) {\n            let pensumToRemove: TSErwerbspensumContainer = this.getStammdatenToWorkWith().erwerbspensenContainer[index];\n            if (pensumToRemove.id) { //wenn id vorhanden dann aus der DB loeschen\n                this.erwerbspensumRS.removeErwerbspensum(pensumToRemove.id, this.getGesuch().id)\n                    .then(() => {\n                        erwerbspensenOfCurrentGS.splice(index, 1);\n                    });\n            } else {\n                //sonst nur vom gui wegnehmen\n                erwerbspensenOfCurrentGS.splice(index, 1);\n            }\n        } else {\n            console.log('can not remove Erwerbspensum since it  could not be found in list');\n        }\n    }\n\n    findIndexOfErwerbspensum(gesuchstellerNumber: number, pensum: any): number {\n        let gesuchsteller: TSGesuchstellerContainer;\n        gesuchsteller = gesuchstellerNumber === 2 ? this.gesuch.gesuchsteller2 : this.gesuch.gesuchsteller1;\n        return gesuchsteller.erwerbspensenContainer.indexOf(pensum);\n    }\n\n    saveErwerbspensum(gesuchsteller: TSGesuchstellerContainer, erwerbspensum: TSErwerbspensumContainer): IPromise<TSErwerbspensumContainer> {\n        if (erwerbspensum.id) {\n            return this.erwerbspensumRS.saveErwerbspensum(erwerbspensum, gesuchsteller.id, this.gesuch.id)\n                .then((response: TSErwerbspensumContainer) => {\n\n                    let i: number = EbeguUtil.getIndexOfElementwithID(erwerbspensum, gesuchsteller.erwerbspensenContainer);\n                    if (i >= 0) {\n                        gesuchsteller.erwerbspensenContainer[i] = erwerbspensum;\n                    }\n                    return response;\n                });\n        } else {\n            return this.erwerbspensumRS.saveErwerbspensum(erwerbspensum, gesuchsteller.id, this.gesuch.id)\n                .then((storedErwerbspensum: TSErwerbspensumContainer) => {\n                    gesuchsteller.erwerbspensenContainer.push(storedErwerbspensum);\n                    return storedErwerbspensum;\n                });\n        }\n\n    }\n\n    /**\n     * Takes current user and sets it as the verantwortlicher of Fall\n     */\n    private setCurrentUserAsFallVerantwortlicher() {\n        if (this.authServiceRS && this.authServiceRS.isOneOfRoles(TSRoleUtil.getAdministratorJugendamtRole())) {\n            this.setUserAsFallVerantwortlicher(this.authServiceRS.getPrincipal());\n        }\n    }\n\n    public setUserAsFallVerantwortlicher(user: TSUser) {\n        if (this.gesuch && this.gesuch.fall) {\n            this.gesuch.fall.verantwortlicher = user;\n        }\n    }\n\n    public getFallVerantwortlicher(): TSUser {\n        if (this.gesuch && this.gesuch.fall) {\n            return this.gesuch.fall.verantwortlicher;\n        }\n        return undefined;\n    }\n\n    public calculateVerfuegungen(): IPromise<void> {\n        return this.verfuegungRS.calculateVerfuegung(this.gesuch.id)\n            .then((response: TSKindContainer[]) => {\n                this.updateKinderListWithCalculatedVerfuegungen(response);\n                return;\n            });\n    }\n\n    private updateKinderListWithCalculatedVerfuegungen(kinderWithVerfuegungen: TSKindContainer[]) {\n        if (kinderWithVerfuegungen.length !== this.gesuch.kindContainers.length) {\n            let msg: string = 'ACHTUNG Ungueltiger Zustand, Anzahl zurueckgelieferter Container'\n                + (kinderWithVerfuegungen.length ? kinderWithVerfuegungen.length : 'no_container')\n                + 'stimmt nicht mit erwareter ueberein ' + this.gesuch.kindContainers.length;\n            this.log.error(msg);\n            let error: TSExceptionReport = new TSExceptionReport(TSErrorType.INTERNAL, TSErrorLevel.SEVERE, msg, kinderWithVerfuegungen);\n            this.errorService.addDvbError(error);\n        }\n        let numOfAssigned = 0;\n        for (let i = 0; i < this.gesuch.kindContainers.length; i++) {\n            for (let j = 0; j < kinderWithVerfuegungen.length; j++) {\n                if (this.gesuch.kindContainers[i].id === kinderWithVerfuegungen[j].id) {\n                    numOfAssigned++;\n                    for (let k = 0; k < this.gesuch.kindContainers[i].betreuungen.length; k++) {\n                        if (this.gesuch.kindContainers[i].betreuungen.length !== kinderWithVerfuegungen[j].betreuungen.length) {\n                            let msg = 'ACHTUNG unvorhergesehener Zustand. Anzahl Betreuungen eines Kindes stimmt nicht' +\n                                ' mit der berechneten Anzahl Betreuungen ueberein; erwartet: ' +\n                                this.gesuch.kindContainers[i].betreuungen.length + ' erhalten: ' + kinderWithVerfuegungen[j].betreuungen.length;\n                            this.log.error(msg, this.gesuch.kindContainers[i], kinderWithVerfuegungen[j]);\n                            this.errorService.addMesageAsError(msg);\n                        }\n                        this.gesuch.kindContainers[i].betreuungen[k] = kinderWithVerfuegungen[j].betreuungen[k];\n                    }\n                }\n            }\n        }\n        if (numOfAssigned !== this.gesuch.kindContainers.length) {\n            let msg = 'ACHTUNG unvorhergesehener Zustand. Es konnte nicht jeder calculated Kindcontainer vom Server einem Container auf dem Client zugeordnet werden';\n            this.log.error(msg, this.gesuch.kindContainers, kinderWithVerfuegungen);\n\n            this.errorService.addMesageAsError(msg);\n        }\n        this.ebeguUtil.handleSmarttablesUpdateBug(this.gesuch.kindContainers);\n\n    }\n\n    public saveVerfuegung(ignorieren: boolean): IPromise<TSVerfuegung> {\n        return this.verfuegungRS.saveVerfuegung(this.getVerfuegenToWorkWith(), this.gesuch.id, this.getBetreuungToWorkWith().id, ignorieren)\n            .then((response: TSVerfuegung) => {\n            this.setVerfuegenToWorkWith(response);\n            this.getBetreuungToWorkWith().betreuungsstatus = TSBetreuungsstatus.VERFUEGT;\n            this.calculateGesuchStatusVerfuegt();\n            return this.getVerfuegenToWorkWith();\n        });\n    }\n\n    private calculateGesuchStatusVerfuegt() {\n        if (!this.isThereAnyOpenBetreuung()) {\n            this.gesuch.status = this.calculateNewStatus(TSAntragStatus.VERFUEGT);\n        }\n    }\n\n    public verfuegungSchliessenOhenVerfuegen(): IPromise<void> {\n        return this.verfuegungRS.verfuegungSchliessenOhneVerfuegen(this.gesuch.id, this.getBetreuungToWorkWith().id).then((response) => {\n            this.getBetreuungToWorkWith().betreuungsstatus = TSBetreuungsstatus.GESCHLOSSEN_OHNE_VERFUEGUNG;\n            this.calculateGesuchStatusVerfuegt();\n            return;\n        });\n    }\n\n    public verfuegungSchliessenNichtEintreten(): IPromise<TSVerfuegung> {\n        return this.verfuegungRS.nichtEintreten(this.getVerfuegenToWorkWith(), this.gesuch.id, this.getBetreuungToWorkWith().id).then((response: TSVerfuegung) => {\n            this.setVerfuegenToWorkWith(response);\n            this.getBetreuungToWorkWith().betreuungsstatus = TSBetreuungsstatus.NICHT_EINGETRETEN;\n            this.calculateGesuchStatusVerfuegt();\n            return this.getVerfuegenToWorkWith();\n        });\n    }\n\n    public getVerfuegenToWorkWith(): TSVerfuegung {\n        if (this.getKindToWorkWith() && this.getBetreuungToWorkWith()) {\n            return this.getBetreuungToWorkWith().verfuegung;\n        }\n        return undefined;\n    }\n\n    public setVerfuegenToWorkWith(verfuegung: TSVerfuegung): void {\n        if (this.getKindToWorkWith() && this.getBetreuungToWorkWith()) {\n            this.getBetreuungToWorkWith().verfuegung = verfuegung;\n        }\n    }\n\n    public isThereAnyKindWithBetreuungsbedarf(): boolean {\n        let kinderList: Array<TSKindContainer> = this.getKinderList();\n        for (let kind of kinderList) {\n            //das kind muss schon gespeichert sein damit es zahelt\n            if (kind.kindJA.familienErgaenzendeBetreuung && !kind.kindJA.isNew()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Gibt true zurueck wenn es mindestens eine Betreuung gibt, dessen Status anders als VERFUEGT oder GESCHLOSSEN_OHNE_VERFUEGUNG oder SCHULAMT ist\n     * @returns {boolean}\n     */\n    public isThereAnyOpenBetreuung(): boolean {\n        let kinderWithBetreuungList: Array<TSKindContainer> = this.getKinderWithBetreuungList();\n        for (let kind of kinderWithBetreuungList) {\n            for (let betreuung of kind.betreuungen) {\n                if (betreuung.betreuungsstatus !== TSBetreuungsstatus.SCHULAMT\n                    && betreuung.betreuungsstatus !== TSBetreuungsstatus.VERFUEGT\n                    && betreuung.betreuungsstatus !== TSBetreuungsstatus.NICHT_EINGETRETEN\n                    && betreuung.betreuungsstatus !== TSBetreuungsstatus.GESCHLOSSEN_OHNE_VERFUEGUNG) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Gibt true zurueck wenn es mindestens eine Betreuung gibt, dessen Status ABGEWIESEN ist\n     * @returns {boolean}\n     */\n    public isThereAnyAbgewieseneBetreuung(): boolean {\n        let kinderWithBetreuungList: Array<TSKindContainer> = this.getKinderWithBetreuungList();\n        for (let kind of kinderWithBetreuungList) {\n            for (let betreuung of kind.betreuungen) {\n                if (betreuung.betreuungsstatus === TSBetreuungsstatus.ABGEWIESEN) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns true when all Betreuungen are of kind SCHULAMT.\n     * Returns false also if there are no Kinder with betreuungsbedarf\n     */\n    public areThereOnlySchulamtAngebote(): boolean {\n        if (!this.gesuch) {\n            return false;\n        }\n        return this.gesuch.areThereOnlySchulamtAngebote();\n    }\n\n    /**\n     * Returns true when all Betreuungen are of kind SCHULAMT.\n     * Returns false also if there are no Kinder with betreuungsbedarf\n     */\n    public areThereOnlyGeschlossenOhneVerfuegung(): boolean {\n        if (!this.gesuch) {\n            return false;\n        }\n        return this.gesuch.areThereOnlyGeschlossenOhneVerfuegung();\n    }\n\n    /**\n     * Returns true when all Betreuungen are of kind SCHULAMT.\n     * Returns false also if there are no Kinder with betreuungsbedarf\n     */\n    public isThereAnySchulamtAngebot(): boolean {\n        let kinderWithBetreuungList: Array<TSKindContainer> = this.getKinderWithBetreuungList();\n        if (kinderWithBetreuungList.length <= 0) {\n            return false; // no Kind with bedarf\n        }\n        for (let kind of kinderWithBetreuungList) {\n            for (let betreuung of kind.betreuungen) {\n                if (isSchulamt(betreuung.institutionStammdaten.betreuungsangebotTyp)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Setzt den Status des Gesuchs und speichert es in der Datenbank. Anstatt das ganze Gesuch zu schicken, rufen wir den Service auf\n     * der den Status aktualisiert und erst wenn das geklappt hat, aktualisieren wir den Status auf dem Client.\n     * Wird nur durchgefuehrt, wenn der gegebene Status nicht der aktuelle Status ist\n     * @param status\n     * @returns {IPromise<TSAntragStatus>}\n     */\n    public saveGesuchStatus(status: TSAntragStatus): IPromise<TSAntragStatus> {\n        if (!this.isGesuchStatus(status)) {\n            return this.gesuchRS.updateGesuchStatus(this.gesuch.id, status).then(() => {\n                return this.antragStatusHistoryRS.loadLastStatusChange(this.getGesuch()).then(() => {\n                    this.gesuch.status = this.calculateNewStatus(status);\n                    return this.gesuch.status;\n                });\n            });\n        }\n        return undefined;\n    }\n\n    /**\n     * Antrag freigeben\n     */\n    public antragFreigeben(antragId: string, username: string): IPromise<TSGesuch> {\n        return this.gesuchRS.antragFreigeben(antragId, username).then((response) => {\n            this.setGesuch(response);\n            return response;\n        });\n\n    }\n\n    /**\n     * Returns true if the Gesuch has the given status\n     * @param status\n     * @returns {boolean}\n     */\n    public isGesuchStatus(status: TSAntragStatus): boolean {\n        return this.gesuch.status === status;\n    }\n\n    /**\n     * Returns true when the Gesuch must be readonly\n     * @returns {boolean}\n     */\n    public isGesuchReadonly(): boolean {\n        return this.gesuch && (isStatusVerfuegenVerfuegt(this.gesuch.status)\n            || this.isGesuchReadonlyForRole()\n            || this.getGesuch().gesperrtWegenBeschwerde);\n    }\n\n    /**\n     * checks if the gesuch is readonly for a given role based on its state\n     */\n    private isGesuchReadonlyForRole(): boolean {\n        let periodeReadonly: boolean = this.isGesuchsperiodeReadonly();\n        if (this.authServiceRS.isOneOfRoles(TSRoleUtil.getReadOnlyRoles())) {\n            return true;  // schulamt hat immer nur readonly zugriff\n        } else if (this.authServiceRS.isRole(TSRole.GESUCHSTELLER)) {\n            let gesuchReadonly: boolean = isAtLeastFreigegebenOrFreigabequittung(this.getGesuch().status); //readonly fuer gs wenn gesuch freigegeben oder weiter\n            return gesuchReadonly || periodeReadonly;\n        }\n        return periodeReadonly;\n    }\n\n    public isGesuchsperiodeReadonly(): boolean {\n        return this.getGesuch() && this.getGesuch().gesuchsperiode && (this.getGesuch().gesuchsperiode.status === TSGesuchsperiodeStatus.GESCHLOSSEN);\n    }\n\n    /**\n     * Wenn das Gesuch Online durch den GS erstellt wurde, nun aber in Bearbeitung beim JA ist, handelt es sich um\n     * den Korrekturmodus des Jugendamtes.\n     * @returns {boolean}\n     */\n    public isKorrekturModusJugendamt(): boolean {\n        return isAtLeastFreigegeben(this.gesuch.status) && !isAnyStatusOfVerfuegt(this.gesuch.status) && (TSEingangsart.ONLINE === this.getGesuch().eingangsart);\n    }\n\n    /**\n     * Einige Status wie GEPRUEFT haben \"substatus\" auf dem Client die berechnet werden muessen. Aus diesem Grund rufen wir\n     * diese Methode auf, bevor wir den Wert setzen.\n     * @param status\n     */\n    public calculateNewStatus(status: TSAntragStatus): TSAntragStatus {\n        if (TSAntragStatus.GEPRUEFT === status || TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN === status || TSAntragStatus.PLATZBESTAETIGUNG_WARTEN === status) {\n            if (this.wizardStepManager.hasStepGivenStatus(TSWizardStepName.BETREUUNG, TSWizardStepStatus.NOK)) {\n                if (this.getGesuch().isThereAnyBetreuung()) {\n                    return TSAntragStatus.PLATZBESTAETIGUNG_ABGEWIESEN;\n                } else {\n                    return TSAntragStatus.GEPRUEFT;\n                }\n            } else if (this.wizardStepManager.hasStepGivenStatus(TSWizardStepName.BETREUUNG, TSWizardStepStatus.PLATZBESTAETIGUNG)) {\n                return TSAntragStatus.PLATZBESTAETIGUNG_WARTEN;\n            } else if (this.wizardStepManager.hasStepGivenStatus(TSWizardStepName.BETREUUNG, TSWizardStepStatus.OK)) {\n                return TSAntragStatus.GEPRUEFT;\n            }\n        }\n        return status;\n    }\n\n    /**\n     * Gibt true zurueck, wenn der Antrag ein Erstgesuchist. False bekommt man wenn der Antrag eine Mutation ist\n     * By default (beim Fehler oder leerem Gesuch) wird auch true zurueckgegeben\n     */\n    public isGesuch(): boolean {\n        if (this.gesuch) {\n            return this.gesuch.typ === TSAntragTyp.ERSTGESUCH || this.gesuch.typ === TSAntragTyp.ERNEUERUNGSGESUCH;\n        }\n        return true;\n    }\n\n    public saveMutation(): IPromise<TSGesuch> {\n        return this.gesuchRS.antragMutieren(this.gesuch.id, this.gesuch.eingangsdatum)\n            .then((response: TSGesuch) => {\n                this.setGesuch(response);\n                return this.wizardStepManager.findStepsFromGesuch(response.id).then(() => {\n                    return this.getGesuch();\n                });\n            });\n    }\n\n    public saveErneuerungsgesuch(): IPromise<TSGesuch> {\n        return this.gesuchRS.antragErneuern(this.gesuch.gesuchsperiode.id, this.gesuch.id, this.gesuch.eingangsdatum)\n            .then((response: TSGesuch) => {\n                this.setGesuch(response);\n                return this.wizardStepManager.findStepsFromGesuch(response.id).then(() => {\n                    return this.getGesuch();\n                });\n            });\n    }\n\n    /**\n     * Aktualisiert alle gegebenen Betreuungen.\n     * ACHTUNG. Die Betreuungen muessen existieren damit alles richtig funktioniert\n     */\n    public updateBetreuungen(betreuungenToUpdate: Array<TSBetreuung>, saveForAbwesenheit: boolean): IPromise<Array<TSBetreuung>> {\n        if (betreuungenToUpdate && betreuungenToUpdate.length > 0) {\n            return this.betreuungRS.saveBetreuungen(betreuungenToUpdate, this.gesuch.id, saveForAbwesenheit).then((updatedBetreuungen: Array<TSBetreuung>) => {\n                //update data of Betreuungen\n                this.gesuch.kindContainers.forEach((kindContainer: TSKindContainer) => {\n                    for (let i = 0; i < kindContainer.betreuungen.length; i++) {\n                        let indexOfUpdatedBetreuung = this.wasBetreuungUpdated(kindContainer.betreuungen[i], updatedBetreuungen);\n                        if (indexOfUpdatedBetreuung >= 0) {\n                            kindContainer.betreuungen[i] = updatedBetreuungen[indexOfUpdatedBetreuung];\n                        }\n                    }\n                });\n                return updatedBetreuungen;\n            });\n        } else {\n            let defer = this.$q.defer<Array<TSBetreuung>>();\n            defer.resolve();\n            return defer.promise;\n        }\n    }\n\n    private wasBetreuungUpdated(betreuung: TSBetreuung, updatedBetreuungen: Array<TSBetreuung>): number {\n        if (betreuung && updatedBetreuungen) {\n            for (let i = 0; i < updatedBetreuungen.length; i++) {\n                if (updatedBetreuungen[i].id === betreuung.id) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public clearGesuch(): void {\n        this.gesuch = undefined;\n    }\n\n    /**\n     * Schaut alle Betreuungen durch. Wenn es keine \"JAAngebote\" gibt, gibt es false zurueck.\n     * Nur wenn alle JA-Angebote neu sind, gibt es true zurueck.\n     */\n    public areAllJAAngeboteNew(): boolean {\n        let kinderWithBetreuungList: Array<TSKindContainer> = this.getKinderWithBetreuungList();\n        if (kinderWithBetreuungList.length <= 0) {\n            return false; // no Kind with bedarf\n        }\n        let jaAngeboteFound: boolean = false; // Wenn kein JA-Angebot gefunden wurde geben wir false zurueck\n        for (let kind of kinderWithBetreuungList) {\n            for (let betreuung of kind.betreuungen) {\n                if (isJugendamt(betreuung.institutionStammdaten.betreuungsangebotTyp)) {\n                    if (betreuung.vorgaengerId) { // eine mutierte JA-Betreuung existiert\n                        return false;\n                    }\n                    jaAngeboteFound = true;\n                }\n            }\n        }\n        return jaAngeboteFound;\n    }\n\n    public getGesuchName(): string {\n        return this.ebeguUtil.getGesuchNameFromGesuch(this.gesuch);\n    }\n\n    public isNeuestesGesuch(): IPromise<boolean> {\n        let gesuchId = this.gesuch.id;\n        return this.gesuchRS.getNeuestesGesuchFromGesuch(gesuchId).then((response: boolean) => {\n               return response;\n        });\n    }\n\n    public isErwerbspensumRequired(gesuchId: string): IPromise<boolean> {\n        return this.erwerbspensumRS.isErwerbspensumRequired(gesuchId);\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/service/dVsTPersistService.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/dVsTPersistService.ts","mtime":1512484412007},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSSTPersistObject_1 = require(\"../../models/TSSTPersistObject\");\nvar TSAuthEvent_1 = require(\"../../models/enums/TSAuthEvent\");\n/**\n * This service stores an array of TSSTPersistObject.\n * The namespace cannot be repeated which means that if a new configuration is saved for an\n * existing namespace, this configuration will overwrite the existing one.\n */\nvar DVsTPersistService = /** @class */ (function () {\n    /* @ngInject */\n    function DVsTPersistService($rootScope) {\n        var _this = this;\n        this.$rootScope = $rootScope;\n        this.clearAll();\n        this.$rootScope.$on(TSAuthEvent_1.TSAuthEvent[TSAuthEvent_1.TSAuthEvent.LOGIN_SUCCESS], function () {\n            _this.clearAll();\n        });\n    }\n    DVsTPersistService.prototype.clearAll = function () {\n        this.persistedData = [];\n    };\n    DVsTPersistService.prototype.saveData = function (namespace, data) {\n        var existingData = this.findNamespace(namespace);\n        if (existingData) {\n            existingData.data = JSON.stringify(data);\n        }\n        else {\n            this.persistedData.push(new TSSTPersistObject_1.TSSTPersistObject(namespace, JSON.stringify(data)));\n        }\n    };\n    DVsTPersistService.prototype.loadData = function (namespace) {\n        var existingData = this.findNamespace(namespace);\n        if (existingData) {\n            return JSON.parse(existingData.data);\n        }\n        return undefined;\n    };\n    /**\n     * Deletes the given namespace from the list if it exists and returns true.\n     * If it doesn't exist it returns false\n     */\n    DVsTPersistService.prototype.deleteData = function (namespace) {\n        for (var i = 0; i < this.persistedData.length; i++) {\n            if (this.persistedData[i].namespace === namespace) {\n                this.persistedData.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    DVsTPersistService.prototype.findNamespace = function (namespace) {\n        for (var i = 0; i < this.persistedData.length; i++) {\n            if (this.persistedData[i].namespace === namespace) {\n                return this.persistedData[i];\n            }\n        }\n        return undefined;\n    };\n    DVsTPersistService.$inject = ['$rootScope'];\n    return DVsTPersistService;\n}());\nexports.DVsTPersistService = DVsTPersistService;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/dVsTPersistService.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/service/dVsTPersistService.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAEH,oEAAiE;AAEjE,8DAA2D;AAE3D;;;;GAIG;AACH;IAKI,eAAe;IACf,4BAAoB,UAA6B;QAAjD,iBAKC;QALmB,eAAU,GAAV,UAAU,CAAmB;QAC7C,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,yBAAW,CAAC,yBAAW,CAAC,aAAa,CAAC,EAAE;YACxD,KAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,qCAAQ,GAAhB;QACI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEM,qCAAQ,GAAf,UAAgB,SAAiB,EAAE,IAAS;QACxC,IAAI,YAAY,GAAsB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACf,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,qCAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpF,CAAC;IACL,CAAC;IAEM,qCAAQ,GAAf,UAAgB,SAAiB;QAC7B,IAAI,YAAY,GAAsB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,uCAAU,GAAjB,UAAkB,SAAiB;QAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACjD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,0CAAa,GAArB,UAAsB,SAAiB;QACnC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACjD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACjC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAnDM,0BAAO,GAAQ,CAAC,YAAY,CAAC,CAAC;IAqDzC,yBAAC;CAAA,AAzDD,IAyDC;AAzDY,gDAAkB","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {TSSTPersistObject} from '../../models/TSSTPersistObject';\nimport {IRootScopeService} from 'angular';\nimport {TSAuthEvent} from '../../models/enums/TSAuthEvent';\n\n/**\n * This service stores an array of TSSTPersistObject.\n * The namespace cannot be repeated which means that if a new configuration is saved for an\n * existing namespace, this configuration will overwrite the existing one.\n */\nexport class DVsTPersistService {\n\n    persistedData: TSSTPersistObject[];\n\n    static $inject: any = ['$rootScope'];\n    /* @ngInject */\n    constructor(private $rootScope: IRootScopeService) {\n        this.clearAll();\n        this.$rootScope.$on(TSAuthEvent[TSAuthEvent.LOGIN_SUCCESS], () => {\n            this.clearAll();\n        });\n    }\n\n    private clearAll() {\n        this.persistedData = [];\n    }\n\n    public saveData(namespace: string, data: any): void {\n        let existingData: TSSTPersistObject = this.findNamespace(namespace);\n        if (existingData) {\n            existingData.data = JSON.stringify(data);\n        } else {\n            this.persistedData.push(new TSSTPersistObject(namespace, JSON.stringify(data)));\n        }\n    }\n\n    public loadData(namespace: string): any {\n        let existingData: TSSTPersistObject = this.findNamespace(namespace);\n        if (existingData) {\n            return JSON.parse(existingData.data);\n        }\n        return undefined;\n    }\n\n    /**\n     * Deletes the given namespace from the list if it exists and returns true.\n     * If it doesn't exist it returns false\n     */\n    public deleteData(namespace: string): boolean {\n        for (let i = 0; i < this.persistedData.length; i++) {\n            if (this.persistedData[i].namespace === namespace) {\n                this.persistedData.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private findNamespace(namespace: string): TSSTPersistObject {\n        for (let i = 0; i < this.persistedData.length; i++) {\n            if (this.persistedData[i].namespace === namespace) {\n                return this.persistedData[i];\n            }\n        }\n        return undefined;\n    }\n\n}\n"]}]}
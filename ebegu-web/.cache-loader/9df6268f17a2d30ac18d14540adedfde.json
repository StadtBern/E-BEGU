{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/core/service/uploadRS.rest.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/uploadRS.rest.ts","mtime":1512484412011},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TSDokumentGrund_1 = require(\"../../models/TSDokumentGrund\");\nvar UploadRS = /** @class */ (function () {\n    /* @ngInject */\n    function UploadRS($http, REST_API, $log, upload, ebeguRestUtil, $q, base64) {\n        this.upload = upload;\n        this.base64 = base64;\n        this.serviceURL = REST_API + 'upload';\n        this.http = $http;\n        this.log = $log;\n        this.q = $q;\n        this.ebeguRestUtil = ebeguRestUtil;\n    }\n    UploadRS.prototype.uploadFile = function (files, dokumentGrund, gesuchID) {\n        var _this = this;\n        var restDokumentGrund = {};\n        restDokumentGrund = this.ebeguRestUtil.dokumentGrundToRestObject(restDokumentGrund, dokumentGrund);\n        var restDokumentString = this.upload.json(restDokumentGrund);\n        var names = [];\n        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n            var file = files_1[_i];\n            if (file) {\n                var encodedFilename = this.base64.encode(file.name);\n                names.push(encodedFilename);\n            }\n        }\n        return this.upload.upload({\n            url: this.serviceURL,\n            method: 'POST',\n            headers: {\n                'x-filename': names.join(';'),\n                'x-gesuchID': gesuchID\n            },\n            data: {\n                file: files,\n                dokumentGrund: restDokumentString\n            }\n        }).then(function (response) {\n            return _this.ebeguRestUtil.parseDokumentGrund(new TSDokumentGrund_1.default(), response.data);\n        }, function (response) {\n            console.log('Upload File: NOT SUCCESS');\n            return _this.q.reject();\n        }, function (evt) {\n            var loaded = evt.loaded;\n            var total = evt.total;\n            var progressPercentage = 100.0 * loaded / total;\n            console.log('progress: ' + progressPercentage + '% ');\n            return _this.q.defer().notify();\n        });\n    };\n    UploadRS.prototype.getServiceName = function () {\n        return 'UploadRS';\n    };\n    UploadRS.$inject = ['$http', 'REST_API', '$log', 'Upload', 'EbeguRestUtil', '$q', 'base64'];\n    return UploadRS;\n}());\nexports.UploadRS = UploadRS;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/core/service/uploadRS.rest.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/core/service/uploadRS.rest.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAGH,gEAA2D;AAI3D;IASI,eAAe;IACf,kBAAY,KAAmB,EAAE,QAAgB,EAAE,IAAiB,EAAU,MAAW,EAAE,aAA4B,EAC3G,EAAa,EAAU,MAAW;QADgC,WAAM,GAAN,MAAM,CAAK;QACtD,WAAM,GAAN,MAAM,CAAK;QAC1C,IAAI,CAAC,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;QACZ,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAEM,6BAAU,GAAjB,UAAkB,KAAU,EAAE,aAA8B,EAAE,QAAgB;QAA9E,iBAqCC;QAnCG,IAAI,iBAAiB,GAAG,EAAE,CAAC;QAC3B,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;QACnG,IAAI,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAE7D,IAAI,KAAK,GAAc,EAAE,CAAC;QAC1B,GAAG,CAAC,CAAa,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAjB,IAAI,IAAI,cAAA;YACT,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,IAAI,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpD,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAChC,CAAC;SACJ;QAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACtB,GAAG,EAAE,IAAI,CAAC,UAAU;YACpB,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;gBAC7B,YAAY,EAAE,QAAQ;aACzB;YACD,IAAI,EAAE;gBACF,IAAI,EAAE,KAAK;gBACX,aAAa,EAAE,kBAAkB;aACpC;SACJ,CAAC,CAAC,IAAI,CAAC,UAAC,QAAa;YAClB,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,yBAAe,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvF,CAAC,EAAE,UAAC,QAAa;YACb,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxC,MAAM,CAAC,KAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC,EAAE,UAAC,GAAQ;YACR,IAAI,MAAM,GAAW,GAAG,CAAC,MAAM,CAAC;YAChC,IAAI,KAAK,GAAW,GAAG,CAAC,KAAK,CAAC;YAC9B,IAAI,kBAAkB,GAAW,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC;YACxD,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,kBAAkB,GAAG,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,KAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,iCAAc,GAArB;QACI,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IArDM,gBAAO,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAsD9F,eAAC;CAAA,AA7DD,IA6DC;AA7DY,4BAAQ","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {IHttpService, ILogService, IQService} from 'angular';\nimport TSDokumentGrund from '../../models/TSDokumentGrund';\nimport EbeguRestUtil from '../../utils/EbeguRestUtil';\nimport IPromise = angular.IPromise;\n\nexport class UploadRS {\n    serviceURL: string;\n    http: IHttpService;\n    log: ILogService;\n    ebeguRestUtil: EbeguRestUtil;\n    q: IQService;\n\n    static $inject = ['$http', 'REST_API', '$log', 'Upload', 'EbeguRestUtil', '$q', 'base64'];\n\n    /* @ngInject */\n    constructor($http: IHttpService, REST_API: string, $log: ILogService, private upload: any, ebeguRestUtil: EbeguRestUtil,\n                $q: IQService, private base64: any) {\n        this.serviceURL = REST_API + 'upload';\n        this.http = $http;\n        this.log = $log;\n        this.q = $q;\n        this.ebeguRestUtil = ebeguRestUtil;\n    }\n\n    public uploadFile(files: any, dokumentGrund: TSDokumentGrund, gesuchID: string): IPromise<TSDokumentGrund> {\n\n        let restDokumentGrund = {};\n        restDokumentGrund = this.ebeguRestUtil.dokumentGrundToRestObject(restDokumentGrund, dokumentGrund);\n        let restDokumentString = this.upload.json(restDokumentGrund);\n\n        let names: string [] = [];\n        for (let file of files) {\n            if (file) {\n                let encodedFilename = this.base64.encode(file.name);\n                names.push(encodedFilename);\n            }\n        }\n\n        return this.upload.upload({\n            url: this.serviceURL,\n            method: 'POST',\n            headers: {\n                'x-filename': names.join(';'),\n                'x-gesuchID': gesuchID\n            },\n            data: {\n                file: files,\n                dokumentGrund: restDokumentString\n            }\n        }).then((response: any) => {\n            return this.ebeguRestUtil.parseDokumentGrund(new TSDokumentGrund(), response.data);\n        }, (response: any) => {\n            console.log('Upload File: NOT SUCCESS');\n            return this.q.reject();\n        }, (evt: any) => {\n            let loaded: number = evt.loaded;\n            let total: number = evt.total;\n            let progressPercentage: number = 100.0 * loaded / total;\n            console.log('progress: ' + progressPercentage + '% ');\n            return this.q.defer().notify();\n        });\n    }\n\n    public getServiceName(): string {\n        return 'UploadRS';\n    }\n}\n"]}]}
{"remainingRequest":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js??ref--0-1!/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js??ref--0-2!/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/abwesenheitView/abwesenheitView.ts","cacheIdentifier":"cache-loader:1.1.0 test","dependencies":[{"path":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/abwesenheitView/abwesenheitView.ts","mtime":1512484412011},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/cache-loader/dist/cjs.js","mtime":1507514019000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/thread-loader/dist/cjs.js","mtime":1507523420000},{"path":"/home/imanol/projects/ebegu/ebegu-web/node_modules/ts-loader/index.js","mtime":1508488471000}],"contextDependencies":[],"result":["\"use strict\";\n/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar abstractGesuchView_1 = require(\"../abstractGesuchView\");\nvar TSWizardStepName_1 = require(\"../../../models/enums/TSWizardStepName\");\nvar TSWizardStepStatus_1 = require(\"../../../models/enums/TSWizardStepStatus\");\nvar TSAbwesenheitContainer_1 = require(\"../../../models/TSAbwesenheitContainer\");\nvar TSBetreuungsangebotTyp_1 = require(\"../../../models/enums/TSBetreuungsangebotTyp\");\nvar RemoveDialogController_1 = require(\"../../dialog/RemoveDialogController\");\nvar EbeguUtil_1 = require(\"../../../utils/EbeguUtil\");\nvar template = require('./abwesenheitView.html');\nrequire('./abwesenheitView.less');\nvar removeDialogTemplate = require('../../dialog/removeDialogTemplate.html');\nvar AbwesenheitViewComponentConfig = /** @class */ (function () {\n    function AbwesenheitViewComponentConfig() {\n        this.transclude = false;\n        this.bindings = {};\n        this.template = template;\n        this.controller = AbwesenheitViewController;\n        this.controllerAs = 'vm';\n    }\n    return AbwesenheitViewComponentConfig;\n}());\nexports.AbwesenheitViewComponentConfig = AbwesenheitViewComponentConfig;\nvar KindBetreuungUI = /** @class */ (function () {\n    function KindBetreuungUI() {\n    }\n    return KindBetreuungUI;\n}());\nexports.KindBetreuungUI = KindBetreuungUI;\nvar AbwesenheitUI = /** @class */ (function () {\n    function AbwesenheitUI(kindBetreuung, abwesenheit) {\n        this.kindBetreuung = kindBetreuung;\n        this.abwesenheit = abwesenheit;\n    }\n    return AbwesenheitUI;\n}());\nexports.AbwesenheitUI = AbwesenheitUI;\nvar AbwesenheitViewController = /** @class */ (function (_super) {\n    __extends(AbwesenheitViewController, _super);\n    /* @ngInject */\n    function AbwesenheitViewController(gesuchModelManager, berechnungsManager, wizardStepManager, DvDialog, $translate, $q, errorService, $scope, $timeout) {\n        var _this = _super.call(this, gesuchModelManager, berechnungsManager, wizardStepManager, $scope, TSWizardStepName_1.TSWizardStepName.ABWESENHEIT, $timeout) || this;\n        _this.DvDialog = DvDialog;\n        _this.$translate = $translate;\n        _this.$q = $q;\n        _this.errorService = errorService;\n        _this.changedBetreuungen = [];\n        _this.initViewModel();\n        return _this;\n    }\n    AbwesenheitViewController.prototype.initViewModel = function () {\n        this.removed = false;\n        this.wizardStepManager.updateCurrentWizardStepStatus(TSWizardStepStatus_1.TSWizardStepStatus.OK);\n        this.setBetreuungList();\n        this.initAbwesenheitList();\n    };\n    /**\n     * Aus der Liste mit den gesamten Kindern wird rausgefunden, welche Betreuungen TAGI oder KITA sind. Mit diesen\n     * wird eine neue Liste gemacht, die ein Object fuer jedes Kind und Betreuung hat\n     */\n    AbwesenheitViewController.prototype.setBetreuungList = function () {\n        var _this = this;\n        var kinderList = this.gesuchModelManager.getKinderWithBetreuungList();\n        this.betreuungList = [];\n        kinderList.forEach(function (kind) {\n            var betreuungenFromKind = kind.betreuungen;\n            betreuungenFromKind.forEach(function (betreuung) {\n                if (betreuung.institutionStammdaten && betreuung.institutionStammdaten.betreuungsangebotTyp &&\n                    (betreuung.institutionStammdaten.betreuungsangebotTyp === TSBetreuungsangebotTyp_1.TSBetreuungsangebotTyp.KITA\n                        || betreuung.institutionStammdaten.betreuungsangebotTyp === TSBetreuungsangebotTyp_1.TSBetreuungsangebotTyp.TAGESELTERN_KLEINKIND)) {\n                    _this.betreuungList.push({ betreuung: betreuung, kind: kind });\n                }\n            });\n        });\n    };\n    AbwesenheitViewController.prototype.initAbwesenheitList = function () {\n        var _this = this;\n        this.model = [];\n        this.betreuungList.forEach(function (kindBetreuung) {\n            if (kindBetreuung.betreuung.abwesenheitContainers) {\n                kindBetreuung.betreuung.abwesenheitContainers.forEach(function (abwesenheitCont) {\n                    _this.model.push(new AbwesenheitUI(kindBetreuung, abwesenheitCont));\n                });\n            }\n        });\n    };\n    AbwesenheitViewController.prototype.getBetreuungList = function () {\n        return this.betreuungList;\n    };\n    AbwesenheitViewController.prototype.save = function () {\n        var _this = this;\n        if (this.isGesuchValid()) {\n            this.errorService.clearAll();\n            if (!this.form.$dirty && !this.removed) {\n                // If there are no changes in form we don't need anything to update on Server and we could return the\n                // promise immediately\n                return this.$q.when([]);\n            }\n            //Zuerst loeschen wir alle Abwesenheiten jeder Betreuung\n            var kinderList = this.gesuchModelManager.getKinderWithBetreuungList();\n            kinderList.forEach(function (kindContainer) {\n                kindContainer.betreuungen.forEach(function (betreuung) {\n                    betreuung.abwesenheitContainers.length = 0;\n                });\n            });\n            //Jetzt koennen wir alle geaenderten Abwesenheiten nochmal hinzufuegen\n            this.model.forEach(function (abwesenheit) {\n                if (!abwesenheit.kindBetreuung.betreuung.abwesenheitContainers) {\n                    abwesenheit.kindBetreuung.betreuung.abwesenheitContainers = [];\n                }\n                abwesenheit.kindBetreuung.betreuung.abwesenheitContainers.push(abwesenheit.abwesenheit);\n                _this.addChangedBetreuungToList(abwesenheit.kindBetreuung.betreuung);\n            });\n            return this.gesuchModelManager.updateBetreuungen(this.changedBetreuungen, true);\n        }\n        return undefined;\n    };\n    /**\n     * Anhand des IDs schaut es ob die gegebene Betreuung bereits in der Liste changedBetreuungen ist.\n     * Nur wenn sie noch nicht da ist, wird sie hinzugefuegt\n     */\n    AbwesenheitViewController.prototype.addChangedBetreuungToList = function (betreuung) {\n        var betreuungAlreadyChanged = false;\n        this.changedBetreuungen.forEach(function (changedBetreuung) {\n            if (changedBetreuung.id === betreuung.id) {\n                betreuungAlreadyChanged = true;\n            }\n        });\n        if (!betreuungAlreadyChanged) {\n            this.changedBetreuungen.push(betreuung);\n        }\n    };\n    /**\n     * Nur wenn die Abwesenheit bereits existiert (in der DB) wird es nach Confirmation gefragt.\n     * Sonst wird sie einfach geloescht\n     */\n    AbwesenheitViewController.prototype.removeAbwesenheitConfirm = function (abwesenheit) {\n        var _this = this;\n        if (abwesenheit.abwesenheit.id) {\n            var remTitleText = this.$translate.instant('ABWESENHEIT_LOESCHEN');\n            this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController_1.RemoveDialogController, {\n                title: remTitleText,\n                deleteText: '',\n                parentController: undefined,\n                elementID: undefined\n            }).then(function () {\n                _this.removeAbwesenheit(abwesenheit);\n            });\n        }\n        else {\n            this.removeAbwesenheit(abwesenheit);\n        }\n    };\n    AbwesenheitViewController.prototype.removeAbwesenheit = function (abwesenheit) {\n        var indexOf = this.model.lastIndexOf(abwesenheit);\n        if (indexOf >= 0) {\n            if (abwesenheit.kindBetreuung) {\n                this.removed = true;\n                this.addChangedBetreuungToList(abwesenheit.kindBetreuung.betreuung);\n            }\n            this.model.splice(indexOf, 1);\n            this.$timeout(function () { return EbeguUtil_1.default.selectFirst(); }, 100);\n        }\n    };\n    AbwesenheitViewController.prototype.createAbwesenheit = function () {\n        if (!this.model) {\n            this.model = [];\n        }\n        this.model.push(new AbwesenheitUI(undefined, new TSAbwesenheitContainer_1.default()));\n        this.$postLink();\n        //todo focus on specific id, so the newly added abwesenheit will be selected not the first in the DOM\n    };\n    AbwesenheitViewController.prototype.getAbwesenheiten = function () {\n        return this.model;\n    };\n    /**\n     * Gibt ein string zurueck mit der Form\n     * \"Kindname - InstitutionName\"\n     * Leerer String wieder zurueckgeliefert wenn die Daten nicht richtig sind\n     */\n    AbwesenheitViewController.prototype.getTextForBetreuungDDL = function (kindBetreuung) {\n        if (kindBetreuung && kindBetreuung.kind && kindBetreuung.kind.kindJA\n            && kindBetreuung.betreuung && kindBetreuung.betreuung.institutionStammdaten && kindBetreuung.betreuung.institutionStammdaten.institution) {\n            return kindBetreuung.kind.kindJA.getFullName() + ' - ' + kindBetreuung.betreuung.institutionStammdaten.institution.name;\n        }\n        return '';\n    };\n    /**\n     * Diese Methode macht es moeglich, dass in einer Abwesenheit, das Betreuungsangebot geaendert werden kann. Damit\n     * fuegen wir die Betreuung der Liste changedBetreuungen hinzu, damit sie danach aktualisiert wird\n     */\n    AbwesenheitViewController.prototype.changedAngebot = function (oldKindID, oldBetreuungID) {\n        // In case the Abwesenheit didn't exist before, the old IDs will be empty and there is no need to change\n        // anything\n        if (oldKindID && oldKindID !== '' && oldBetreuungID && oldBetreuungID !== '') {\n            this.gesuchModelManager.findKindById(oldKindID);\n            this.gesuchModelManager.findBetreuungById(oldBetreuungID);\n            var betreuungToWorkWith = this.gesuchModelManager.getBetreuungToWorkWith();\n            if (betreuungToWorkWith && betreuungToWorkWith.id) {\n                this.addChangedBetreuungToList(betreuungToWorkWith);\n            }\n        }\n    };\n    AbwesenheitViewController.prototype.getPreviousButtonText = function () {\n        if (this.getAbwesenheiten().length === 0) {\n            return 'ZURUECK_ONLY_UPPER';\n        }\n        return 'ZURUECK_UPPER';\n    };\n    AbwesenheitViewController.prototype.getNextButtonText = function () {\n        if (this.getAbwesenheiten().length === 0) {\n            return 'WEITER_ONLY_UPPER';\n        }\n        return 'WEITER_UPPER';\n    };\n    AbwesenheitViewController.$inject = ['GesuchModelManager', 'BerechnungsManager', 'WizardStepManager', 'DvDialog',\n        '$translate', '$q', 'ErrorService', '$scope', '$timeout'];\n    return AbwesenheitViewController;\n}(abstractGesuchView_1.default));\nexports.AbwesenheitViewController = AbwesenheitViewController;\n",{"version":3,"file":"/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/abwesenheitView/abwesenheitView.ts","sourceRoot":"","sources":["/home/imanol/projects/ebegu/ebegu-web/src/gesuch/component/abwesenheitView/abwesenheitView.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Ki-Tax: System for the management of external childcare subsidies\n * Copyright (C) 2017 City of Bern Switzerland\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport AbstractGesuchViewController from '../abstractGesuchView';\nimport {IComponentOptions, IPromise} from 'angular';\nimport GesuchModelManager from '../../service/gesuchModelManager';\nimport BerechnungsManager from '../../service/berechnungsManager';\nimport WizardStepManager from '../../service/wizardStepManager';\nimport {TSWizardStepName} from '../../../models/enums/TSWizardStepName';\nimport {TSWizardStepStatus} from '../../../models/enums/TSWizardStepStatus';\nimport TSBetreuung from '../../../models/TSBetreuung';\nimport TSAbwesenheitContainer from '../../../models/TSAbwesenheitContainer';\nimport TSKindContainer from '../../../models/TSKindContainer';\nimport {TSBetreuungsangebotTyp} from '../../../models/enums/TSBetreuungsangebotTyp';\nimport {DvDialog} from '../../../core/directive/dv-dialog/dv-dialog';\nimport {RemoveDialogController} from '../../dialog/RemoveDialogController';\nimport ErrorService from '../../../core/errors/service/ErrorService';\nimport EbeguUtil from '../../../utils/EbeguUtil';\nimport ITranslateService = angular.translate.ITranslateService;\nimport IQService = angular.IQService;\nimport IScope = angular.IScope;\nimport ITimeoutService = angular.ITimeoutService;\n\nlet template = require('./abwesenheitView.html');\nrequire('./abwesenheitView.less');\nlet removeDialogTemplate = require('../../dialog/removeDialogTemplate.html');\n\nexport class AbwesenheitViewComponentConfig implements IComponentOptions {\n    transclude = false;\n    bindings: any = {};\n    template = template;\n    controller = AbwesenheitViewController;\n    controllerAs = 'vm';\n}\n\nexport class KindBetreuungUI {\n    public betreuung: TSBetreuung;\n    public kind: TSKindContainer;\n}\n\nexport class AbwesenheitUI {\n    public kindBetreuung: KindBetreuungUI;\n    public abwesenheit: TSAbwesenheitContainer;\n\n    constructor(kindBetreuung: KindBetreuungUI, abwesenheit: TSAbwesenheitContainer) {\n        this.kindBetreuung = kindBetreuung;\n        this.abwesenheit = abwesenheit;\n    }\n}\n\nexport class AbwesenheitViewController extends AbstractGesuchViewController<Array<AbwesenheitUI>> {\n\n    betreuungList: Array<KindBetreuungUI>;\n    private removed: boolean;\n    private changedBetreuungen: Array<TSBetreuung> = [];\n\n    static $inject = ['GesuchModelManager', 'BerechnungsManager', 'WizardStepManager', 'DvDialog',\n        '$translate', '$q', 'ErrorService', '$scope', '$timeout'];\n\n    /* @ngInject */\n    constructor(gesuchModelManager: GesuchModelManager, berechnungsManager: BerechnungsManager,\n                wizardStepManager: WizardStepManager, private DvDialog: DvDialog, private $translate: ITranslateService,\n                private $q: IQService, private errorService: ErrorService, $scope: IScope, $timeout: ITimeoutService) {\n\n        super(gesuchModelManager, berechnungsManager, wizardStepManager, $scope, TSWizardStepName.ABWESENHEIT, $timeout);\n        this.initViewModel();\n    }\n\n    private initViewModel(): void {\n        this.removed = false;\n        this.wizardStepManager.updateCurrentWizardStepStatus(TSWizardStepStatus.OK);\n        this.setBetreuungList();\n        this.initAbwesenheitList();\n    }\n\n    /**\n     * Aus der Liste mit den gesamten Kindern wird rausgefunden, welche Betreuungen TAGI oder KITA sind. Mit diesen\n     * wird eine neue Liste gemacht, die ein Object fuer jedes Kind und Betreuung hat\n     */\n    private setBetreuungList(): void {\n        let kinderList: Array<TSKindContainer> = this.gesuchModelManager.getKinderWithBetreuungList();\n        this.betreuungList = [];\n        kinderList.forEach((kind) => {\n            let betreuungenFromKind: Array<TSBetreuung> = kind.betreuungen;\n            betreuungenFromKind.forEach((betreuung) => {\n                if (betreuung.institutionStammdaten && betreuung.institutionStammdaten.betreuungsangebotTyp &&\n                    (betreuung.institutionStammdaten.betreuungsangebotTyp === TSBetreuungsangebotTyp.KITA\n                        || betreuung.institutionStammdaten.betreuungsangebotTyp === TSBetreuungsangebotTyp.TAGESELTERN_KLEINKIND)) {\n                    this.betreuungList.push({betreuung, kind});\n                }\n            });\n        });\n    }\n\n    private initAbwesenheitList(): void {\n        this.model = [];\n        this.betreuungList.forEach((kindBetreuung) => {\n            if (kindBetreuung.betreuung.abwesenheitContainers) {\n                kindBetreuung.betreuung.abwesenheitContainers.forEach((abwesenheitCont: TSAbwesenheitContainer) => {\n                    this.model.push(new AbwesenheitUI(kindBetreuung, abwesenheitCont));\n                });\n            }\n        });\n    }\n\n    public getBetreuungList(): Array<KindBetreuungUI> {\n        return this.betreuungList;\n    }\n\n    public save(): IPromise<Array<TSBetreuung>> {\n        if (this.isGesuchValid()) {\n            this.errorService.clearAll();\n            if (!this.form.$dirty && !this.removed) {\n                // If there are no changes in form we don't need anything to update on Server and we could return the\n                // promise immediately\n                return this.$q.when([]);\n            }\n\n            //Zuerst loeschen wir alle Abwesenheiten jeder Betreuung\n            let kinderList: Array<TSKindContainer> = this.gesuchModelManager.getKinderWithBetreuungList();\n            kinderList.forEach((kindContainer: TSKindContainer) => {\n                kindContainer.betreuungen.forEach((betreuung: TSBetreuung) => {\n                    betreuung.abwesenheitContainers.length = 0;\n                });\n            });\n            //Jetzt koennen wir alle geaenderten Abwesenheiten nochmal hinzufuegen\n            this.model.forEach((abwesenheit: AbwesenheitUI) => {\n                if (!abwesenheit.kindBetreuung.betreuung.abwesenheitContainers) {\n                    abwesenheit.kindBetreuung.betreuung.abwesenheitContainers = [];\n                }\n                abwesenheit.kindBetreuung.betreuung.abwesenheitContainers.push(abwesenheit.abwesenheit);\n                this.addChangedBetreuungToList(abwesenheit.kindBetreuung.betreuung);\n            });\n\n            return this.gesuchModelManager.updateBetreuungen(this.changedBetreuungen, true);\n        }\n        return undefined;\n    }\n\n    /**\n     * Anhand des IDs schaut es ob die gegebene Betreuung bereits in der Liste changedBetreuungen ist.\n     * Nur wenn sie noch nicht da ist, wird sie hinzugefuegt\n     */\n    private addChangedBetreuungToList(betreuung: TSBetreuung) {\n        let betreuungAlreadyChanged: boolean = false;\n        this.changedBetreuungen.forEach((changedBetreuung) => {\n            if (changedBetreuung.id === betreuung.id) {\n                betreuungAlreadyChanged = true;\n            }\n        });\n        if (!betreuungAlreadyChanged) {\n            this.changedBetreuungen.push(betreuung);\n        }\n    }\n\n    /**\n     * Nur wenn die Abwesenheit bereits existiert (in der DB) wird es nach Confirmation gefragt.\n     * Sonst wird sie einfach geloescht\n     */\n    public removeAbwesenheitConfirm(abwesenheit: AbwesenheitUI): void {\n        if (abwesenheit.abwesenheit.id) {\n            let remTitleText = this.$translate.instant('ABWESENHEIT_LOESCHEN');\n            this.DvDialog.showDialog(removeDialogTemplate, RemoveDialogController, {\n                title: remTitleText,\n                deleteText: '',\n                parentController: undefined,\n                elementID: undefined\n            }).then(() => {   //User confirmed removal\n                this.removeAbwesenheit(abwesenheit);\n            });\n        } else {\n            this.removeAbwesenheit(abwesenheit);\n        }\n    }\n\n    private removeAbwesenheit(abwesenheit: AbwesenheitUI) {\n        let indexOf = this.model.lastIndexOf(abwesenheit);\n        if (indexOf >= 0) {\n            if (abwesenheit.kindBetreuung) {\n                this.removed = true;\n                this.addChangedBetreuungToList(abwesenheit.kindBetreuung.betreuung);\n            }\n            this.model.splice(indexOf, 1);\n            this.$timeout(() => EbeguUtil.selectFirst(), 100);\n        }\n    }\n\n    public createAbwesenheit(): void {\n        if (!this.model) {\n            this.model = [];\n        }\n        this.model.push(new AbwesenheitUI(undefined, new TSAbwesenheitContainer()));\n        this.$postLink();\n        //todo focus on specific id, so the newly added abwesenheit will be selected not the first in the DOM\n    }\n\n    public getAbwesenheiten(): Array<AbwesenheitUI> {\n        return this.model;\n    }\n\n    /**\n     * Gibt ein string zurueck mit der Form\n     * \"Kindname - InstitutionName\"\n     * Leerer String wieder zurueckgeliefert wenn die Daten nicht richtig sind\n     */\n    public getTextForBetreuungDDL(kindBetreuung: KindBetreuungUI): string {\n        if (kindBetreuung && kindBetreuung.kind && kindBetreuung.kind.kindJA\n            && kindBetreuung.betreuung && kindBetreuung.betreuung.institutionStammdaten && kindBetreuung.betreuung.institutionStammdaten.institution) {\n\n            return kindBetreuung.kind.kindJA.getFullName() + ' - ' + kindBetreuung.betreuung.institutionStammdaten.institution.name;\n        }\n        return '';\n    }\n\n    /**\n     * Diese Methode macht es moeglich, dass in einer Abwesenheit, das Betreuungsangebot geaendert werden kann. Damit\n     * fuegen wir die Betreuung der Liste changedBetreuungen hinzu, damit sie danach aktualisiert wird\n     */\n    public changedAngebot(oldKindID: string, oldBetreuungID: string): void {\n        // In case the Abwesenheit didn't exist before, the old IDs will be empty and there is no need to change\n        // anything\n        if (oldKindID && oldKindID !== '' && oldBetreuungID && oldBetreuungID !== '') {\n            this.gesuchModelManager.findKindById(oldKindID);\n            this.gesuchModelManager.findBetreuungById(oldBetreuungID);\n            let betreuungToWorkWith: TSBetreuung = this.gesuchModelManager.getBetreuungToWorkWith();\n            if (betreuungToWorkWith && betreuungToWorkWith.id) {\n                this.addChangedBetreuungToList(betreuungToWorkWith);\n            }\n        }\n    }\n\n    public getPreviousButtonText(): string {\n        if (this.getAbwesenheiten().length === 0) {\n            return 'ZURUECK_ONLY_UPPER';\n        }\n        return 'ZURUECK_UPPER';\n    }\n\n    public getNextButtonText(): string {\n        if (this.getAbwesenheiten().length === 0) {\n            return 'WEITER_ONLY_UPPER';\n        }\n        return 'WEITER_UPPER';\n    }\n}\n"]}]}